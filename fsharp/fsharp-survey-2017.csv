"Timestamp","How long have you been programming (in any language)?","How would you classify your day job?","Would you say you have a strong math/computer science background?","How comfortable are you with functional programming in general?","What are your primary programming languages","How long have you been using F#?","If you were using F# but have now stopped, please tell us why:","How would you characterize your use of F# today?","Platforms ","Development environment ","F# news and activities","What have been the biggest benefits to you *personally* in using F#? ","What are your favorite features in F#? ","What features in F# do you rarely or never use?","What are the F# tools and libraries that have made the most difference to you as a developer? (one per line)","What have you found to be the best way of learning how to use F#?","What kind of training/documentation appeals to you most?","If you are looking for training or learning materials, what format do you prefer? ","What kinds of learning material would you like to see more of?","How can learning F# be made easier?","What kind of ""published"" code have you created with F#?","In which domain(s) are you using F#?","What kind of data sources are you using F# with?","If you are deploying code written in F#, which platforms do you target?","What is the status of F# in your workplace?","Biggest benefits of F# at work","What stops your workplace from using F# more than it does now?","What could the F# community do to make it more acceptable to your workplace?","What has been the most frustrating thing for you in *learning* F#?","What has been the most frustrating for you in *developing applications* in F#?","What do you think is F#’s most glaring weakness / blind spot / problem?","How could this survey be improved?","Any other comments?"
"2017/05/02 12:18:30 am CET","5-10 years","Open source development","Yes","Experienced","Elixir;F#","4 or more years","","I use it at work or for other commercial uses","Windows","VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;No dependency cycles;Object expressions;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Interactive development;Quotations;Units of measure","","","Practical first, with theory introduced as needed","","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material","","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Custom development/specialist markets;Financial services;Commercial web site/app;Mobile apps","SQL databases;NoSQL database;Textual & flat file data","Windows;Mac;Javascript as a platform;Linux;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Nothing. Everyone loves it.","","Installation process","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","","",""
"2017/05/02 12:29:40 am CET","5-10 years","Enterprise development","Yes","Intermediate","C#;C++;F#","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","fsharp channel on Slack;github/visualfsharp","Correctness (no nulls, it works first time);Great community;Having fun again","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Async workflows;Interactive development;Static type constraints;Units of measure","","F# bloggers;Answers to Stack Overflow questions;The visual studio tutorial project","","Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Commercial products;Open source projects","Utilities and tools;Commercial web site/app;Mobile apps","SQL databases","Windows;Javascript as a platform","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","Bestest Visual Studio support - the current direction is great","Installation process","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/02 12:31:16 am CET","10 or more years","Academic, research, or related","Yes","Expert","F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Atom (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;Type inference;Type providers","Static type constraints","fable
paket
fake
suave
fslab","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","sample applications","","Open source projects;npm package","Data analysis/statistics","SQL databases;Textual & flat file data","Javascript as a platform","It's officially endorsed in my team for critical/production areas","More productive with fewer developers;Better for solving complex problems","Nothing. Everyone loves it.","","Installation process","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries","","",""
"2017/05/02 12:32:00 am CET","10 or more years","Consulting","No","Experienced","F#","4 or more years","","I use it at work or for other commercial uses","Mac","Xamarin;MonoDevelop;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions","Agents (MailboxProcessor);Interactive development;Quotations;Static type constraints;Units of measure","Xamarin Studio
Ionide","F# books;F# bloggers","Practical only. I don't care about theory.","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material","More Video, live coding, more conferences","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Commercial web site/app;Mobile apps","SQL databases;NoSQL database;Read-only data sources such as feeds","iOS;Android","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;More productive with fewer developers;Better for solving complex problems","Nothing. Everyone loves it.","","Don't understand the compiler errors","Cross-platform issues","DOTNETCORE DOA","",""
"2017/05/02 12:36:05 am CET","10 or more years","Consulting","No","Experienced","C#;F#","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Computation expressions;Type inference;Type providers","","","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","","","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","","","","","","","Hiring: They worry about not being able to find F# developers","","","","","",""
"2017/05/02 12:57:00 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#;Java;Javascript","3-4 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide);Unity","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community","Async workflows;Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Object expressions;Units of measure","ionide
giraffe
vs code
sql data provider
neo4j type provider ","F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;fsharpforfunandprofit.com","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials","More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Commercial web site/app","SQL databases;NoSQL database;Textual & flat file data;Read-only data sources such as feeds","Windows;Linux;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams;Functional languages are for weirdos","","Don't understand the compiler errors","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","1st class tooling like re-sharper for C#","","F# and functional paradigms need to be part of basic programming education to produce a wave of savvy new developers who will use it by default."
"2017/05/02 12:59:29 am CET","2-5 years","Enterprise development","No","Learner","C#;F#","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Type providers;Units of measure","FAKE
Paket
Suave","Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","More examples showing how a non-trivial problem was solved. Mark Seamann's blog is usually a good example of this; he takes a real problem and shows how it was solved with F#. Lots of documentation out there is for the most bare-bones implementation, and there aren't a lot of examples on how people actually used it. An example of this is paramaterized URLs in Suave.","Commercial products","Commercial web site/app","NoSQL database","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams;Technical reasons","For me, personally, this is not an F# problem. My workplace fears change... and usually seems to fear critical thinking.","Lack of good tutorials/documentation;I can't use my knowledge from C# or other imperative languages;Not enough real-world code to learn from","Not being part of the core .NET distribution",".NET Core integration. The language has been effectively abandoned by microsoft, but being tied to .NET means it is probably going to die a slow, painful death, as official tools barely support it. I don't know of a good way around this, other than for either MS to step up and finally try to support it, or for it to totally separate itself as a community effort (which it already is, to a large degree, but this comes with costs - and the link to MS is still VERY strong).","",""
"2017/05/02 12:59:56 am CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;F#;Haskell;Typescript","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Quotations;Type providers;Units of measure","","F# bloggers;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","","More material with in-depth tutorials","","Commercial products","Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications;Commercial web site/app","SQL databases;NoSQL database;Event store/logs/Kafka","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","","Not being part of the core .NET distribution;Working with C#-centric tooling;Performance issues","","",""
"2017/05/02 1:01:57 am CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;F#;Haskell;Javascript;sh","4 or more years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;Vim;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;ML was my first love and f# are the best ml","Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations;Units of measure","fparsec
fable
","F# books;F# bloggers;Answers to Stack Overflow questions;For to many f# the only doc are the source","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information","","Open source projects;Not applicable. None of my F# code is used by other people","None - Just playing around;Utilities and tools;Non-commercial web site/app;Mobile apps;Research/Teaching;Text analysis/language parsing;Other","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows;Javascript as a platform;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Its more fun","Technical reasons;fsharp are not a first class .net language ","","Lack of good tutorials/documentation;So many libraries there are not working in my use case, so i need to learn f# and fix the library at the same time","Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;So many libraries there are not working in my use cases","1. The f# tooling are not bad in is self, but compared to c# it feels so bad. and vs2017 was a step back, but i follow the visual f# tools github and i know its getting worked on.

2. There are so many ""working for me"" libraries including the database' type providers. And it is not helping that working with type providers feel like 90' c++ templates: when it works it's really nice to work with, but any error it just explodes in your face with really bad error messages there are not helping.","",""
"2017/05/02 1:12:29 am CET","10 or more years","Commercial software/web development","No","Intermediate","F#;Python","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers;StackOverflow chat","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Object expressions","SqlProvider
Gjallarhorn
Paket
Fake
Argu
Deedle
Oxyplot","MSDN;F# books","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories","Better API documentation for frequently used libraries","Internal enterprise projects","Utilities and tools;Mainstream business & enterprise applications;Data analysis/statistics","SQL databases;Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","No buy-in: There is lack of acceptance from other teams","keep increasing the user base","lack of examples for non core code","Not being part of the core .NET distribution;Lack of F# friendly libraries;Difficulty in troubleshooting problems;Performance issues","more active development on the compiler, more libraries for real-world usage","",""
"2017/05/02 1:19:32 am CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;F#;Javascript;Typescript","2-3 years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide);OmniSharp","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers;StackOverflow chat","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Backtick naming;Computation expressions;Immutability by default;No dependency cycles;Object expressions;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Quotations;Units of measure","Ionide
VS 2017","F# books;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More podcasts and other audio-only material","Porting tryfsharp!! And making a version of it that narrates you through the features.","Internal enterprise projects;Open source projects","None - Just playing around;Utilities and tools;Non-commercial web site/app","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka;Read-only data sources such as feeds","Windows;Linux;Amazon Web services","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","Installation process","Not being part of the core .NET distribution;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 1:21:28 am CET","10 or more years","Data or analytics related","No","Learner","F#","Haven't really used it yet","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","F# Weekly;F# bloggers;StackOverflow chat","Learning functional programming in general","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;Object-oriented features (inc. C# compatibility, conciseness);printf that is type checked;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Async workflows;Computation expressions;Units of measure","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Utilities and tools;Algorithm-heavy business applications (non-financial);Machine learning","SQL databases;Textual & flat file data;Data integration and EAI","Windows","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Too Windows-centric: They have concerns over cross-platform issues","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries","","",""
"2017/05/02 1:31:45 am CET","10 or more years","Commercial software/web development","No","Intermediate","F#","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;No dependency cycles;Quotations;Simple ""one liner"" type definitions for records and DUs;Type providers;Units of measure","Agents (MailboxProcessor);Object-oriented compatibility;Units of measure","Paket
FAKE
Chessie
Unquote
FsCheck
Suave","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","Better tooling. Current state of things is disaster.","Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Commercial web site/app","SQL databases;Event store/logs/Kafka;Read-only data sources such as feeds","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems;programming is fun again","Nothing. Everyone loves it.","","Don't understand the compiler errors;Not enough real-world code to learn from","Not being part of the core .NET distribution;Difficulty in troubleshooting problems;Cross-platform issues","","You have 2 ""Other"" options in ""If you are deploying code written in F#, which platforms do you target?""",""
"2017/05/02 1:35:35 am CET","10 or more years","Financial services or similar","No","Experienced","C#;F#;Visual Basic","4 or more years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;Xamarin;Atom (with Ionide);VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;Type inference","Static type constraints","paket
FsCheck
FSharp.Data
FSharp.Formatting
FAKE","F# books;Personal mentoring;Structured training/workshops;https://fsharpforfunandprofit.com","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","Provide more context around the trade-offs (pros and cons) of a given feature (i.e. ""where"" and ""when"" in addition to ""how"" and ""why"").","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Financial services;Mainstream business & enterprise applications;Non-commercial web site/app;Research/Teaching;Data analysis/statistics;Other","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka;Analytics;Read-only data sources such as feeds","Windows;Mac","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability;Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft;No buy-in: There is lack of acceptance from other teams","Avoid pitching a ""zero sum"" situation (i.e. either C# OR F# or VB); demonstrate benefits of augmenting existing work.

Reduce the amount of F# ""branding"" on projects and types.","","Not being part of the core .NET distribution;Working with C#-centric tooling;Cross-platform issues","Lots of features with no clear guidance on trade-offs

Needs to either be better integrated into the rest of the .NET ecosystem or carved off completely","",""
"2017/05/02 1:36:06 am CET","10 or more years","Data or analytics related","Yes","Experienced","C;C#;C++;F#;Haskell;Javascript;Python;R","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide);Linqpad","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Speed of development","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Quotations;Type providers","Agents (MailboxProcessor);Object expressions","FAKE, Paket, Ionide, FSharp.Data","MSDN;F# books;F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Books or longer articles explaining full context","More material with in-depth tutorials;More short ""live coding"" videos","","Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Machine learning;Data analysis/statistics;Text analysis/language parsing","SQL databases;Textual & flat file data;Analytics;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","","Don't understand the compiler errors","Lack of good wrappers for non-F# libraries;Difficulty in troubleshooting problems","Debugging experience is pretty bad compared to C#","",""
"2017/05/02 1:36:35 am CET","5-10 years","Enterprise development","Yes","Intermediate","C;C#;F#;Java;Javascript;Ruby","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Object-oriented features (inc. C# compatibility, conciseness);printf that is type checked;The ""piping"" idiom;Type providers","Active Patterns;Agents (MailboxProcessor);Object expressions;Quotations;Units of measure","","MSDN;F# bloggers;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications;Commercial web site/app","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka","Windows;Azure","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Nothing. Everyone loves it.","","Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Cross-platform issues","","",""
"2017/05/02 1:39:55 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Integration with non-F# libraries;Units of measure","","F# bloggers;Links posted on social media such as Twitter;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories","","Commercial products;Open source projects","Commercial web site/app","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling","","",""
"2017/05/02 1:44:05 am CET","2-5 years","Open source development","Yes","Intermediate","C;C#;C++;F#;Haskell;Java;Javascript;Rust","1-2 years","","I use it at work or for other commercial uses","Windows;Mac;Linux;Azure","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Functional but can be tweaked to get high performance","Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;Object-oriented features (inc. C# compatibility, conciseness);printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type providers","Active Patterns;Agents (MailboxProcessor);Quotations;Static type constraints;Units of measure","FSharp.Data, Visual Studio","Links and instructions from fsharp.org;F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","Better getting started documentation and a better getting started experience for tools that aren't Visual Studio","Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Data analysis/statistics;Text analysis/language parsing","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows;Mac;Javascript as a platform;Linux;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams;Technical reasons","Even more evangelism, specifically in Azure and the cloud computing space.","Installation process;Don't understand the compiler errors","Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Lack of ","","I love F# and I am excited about it!"
"2017/05/02 2:12:41 am CET","10 or more years","Financial services or similar","Yes","Learner","C#;Javascript","1-2 years","Could not get it into my day to day work.","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Great community;Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom","Object-oriented compatibility","fscheck","F# books;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","More examples of things used in day to day corporate programming like ETL, CRUD, data reporting, ...","Not applicable. None of my F# code is used by other people","Research/Teaching","SQL databases;Textual & flat file data;Data integration and EAI","Windows;Mac;Javascript as a platform","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","Have it be a first class Dot Net citizen like C# is. Have Hanselman use it in his demos.","Installation process;Don't understand the compiler errors;Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Not a first class Dot Net citizen.","Shorter.",""
"2017/05/02 2:14:06 am CET","10 or more years","Commercial software/web development","Yes","Learner","C#;C++","Less than a year","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;Vim;VS Code (with Ionide)","F# Weekly;F# bloggers","Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general","Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Units of measure","F# interactive console","F# books;F# bloggers;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","I feel that your previous question covered all of the choices","Not applicable. None of my F# code is used by other people","Utilities and tools;Text analysis/language parsing","Not doing data centric apps","Windows;Linux","I don't use F# at work","","Hiring: They worry about not being able to find F# developers","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 2:45:47 am CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;F#;Ocaml/SML;Scala","4 or more years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Vim;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development","Algebraic types (inc discriminated unions and tuples);Immutability by default;Quotations;The ""piping"" idiom;Type inference;Type providers;Units of measure","Agents (MailboxProcessor)","","Reading F# code written by experts","Theory first, to get a rigorous foundation","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More podcasts and other audio-only material","","Internal enterprise projects","Algorithm-heavy business applications (non-financial);Machine learning","NoSQL database;Textual & flat file data;Event store/logs/Kafka","Windows;Mac;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Efficiency/Performance;Better for solving complex problems","Too Microsoft-centric: They think it is too closely linked to Microsoft;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation","","","",""
"2017/05/02 3:12:32 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;C++;F#","Less than a year","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;Emacs;VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Agents (MailboxProcessor);Easy integration with other .NET libraries;Immutability by default;Interactive development;printf that is type checked;Quotations;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","","","F# books;F# bloggers;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","","","Internal enterprise projects","Utilities and tools;Commercial web site/app","SQL databases;Textual & flat file data","Windows;Javascript as a platform;Linux","It's used unofficially","Faster time to market;Efficiency/Performance","Training: They are worried about getting non-F# developers up to speed","","","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries","","",""
"2017/05/02 3:33:12 am CET","10 or more years","Enterprise development","No","Experienced","Java;Ruby;Scala","4 or more years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter;F# Weekly;Google groups","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Quotations;Static type constraints;Units of measure","Fake
Unquote
","F# books","Practical first, with theory introduced as needed","Books or longer articles explaining full context","","","Open source projects","Games;Other","Not doing data centric apps","Windows;Mac;Javascript as a platform","I don't use F# at work","","Established JVM shop","Ha! It would be really cool if F# could compile to JVM bytecode, but I imagine that's a pipe dream...","Installation process","Less sophisticated tools for refactoring, etc.;Old, broken versions of mono that I need to target","","",""
"2017/05/02 3:53:41 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#;Kotlin;Typescript","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time)","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;Object expressions;Simple ""one liner"" type definitions for records and DUs","Object-oriented compatibility;Quotations;Type providers;Units of measure","","","Theory first, to get a rigorous foundation","","","","Internal enterprise projects;Commercial products","Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications;Commercial web site/app;Data analysis/statistics","SQL databases","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers","F# <=> C# navigation in Visual Studio","","Not being part of the core .NET distribution;Working with C#-centric tooling;Performance issues","F# <=> C# navigation in Visual Studio","",""
"2017/05/02 4:12:45 am CET","10 or more years","Enterprise development","No","Intermediate","C#;F#","3-4 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Object expressions;Static type constraints;Units of measure","Ionide
Fake
Paket
Visual Studio F# support","MSDN;F# books;F# bloggers;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","Sample biz apps, with ""boring"" topics like database access, MVC web pages, REST services","Internal enterprise projects;Open source projects","Custom development/specialist markets;Mainstream business & enterprise applications;Data analysis/statistics","SQL databases;NoSQL database;Textual & flat file data;Analytics","Windows;Linux;Azure","It's used unofficially","Correctness: fewer bugs and less rework;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","Installation process;Not enough real-world code to learn from","Working with C#-centric tooling;Difficulty in troubleshooting problems;Cross-platform issues","Need more business apps in production.","",""
"2017/05/02 4:15:21 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#;Javascript;Typescript","I was using F# but have stopped","Lack of real Unity3d support","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Async workflows;Backtick naming;Computation expressions;Easy integration with other .NET libraries;Object-oriented features (inc. C# compatibility, conciseness)","Quotations","","Links and instructions from fsharp.org;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","","","Internal enterprise projects","Algorithm-heavy business applications (non-financial);Games;Machine learning","SQL databases;NoSQL database","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Efficiency/Performance;Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","","","",""
"2017/05/02 4:15:31 am CET","10 or more years","Enterprise development","Yes","Learner","C;C++;Java","Less than two months","","I use it for hobby or side projects","Windows","VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development","Computation expressions;Object expressions;Units of measure","","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Utilities and tools","Textual & flat file data;Event store/logs/Kafka","Windows;Azure","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors","Not being part of the core .NET distribution;Difficulty in troubleshooting problems","","",""
"2017/05/02 4:18:06 am CET","5-10 years","Commercial software/web development","Yes","Learner","C#","Less than a year","","Just tinkering","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites","Speed of development","Async workflows;Easy integration with other .NET libraries;Immutability by default","Active Patterns;Agents (MailboxProcessor);Integration with non-F# libraries","","Personal mentoring","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information","","Internal enterprise projects","Other","SQL databases","Azure","I don't use F# at work","More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Understanding how to think functionally.","","",""
"2017/05/02 4:22:37 am CET","5-10 years","Enterprise development","No","Learner","C#","1-2 years","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","","","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","","","","Not applicable. None of my F# code is used by other people","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app;Non-commercial web site/app;Research/Teaching;Data analysis/statistics;Text analysis/language parsing","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka;Read-only data sources such as feeds","","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Not enough real-world code to learn from","","","",""
"2017/05/02 4:24:00 am CET","5-10 years","Enterprise development","No","Intermediate","C#;Objective-C","Less than two months","","Just tinkering","Windows;Mac","Visual Studio 2015 or newer;LinqPad","F# bloggers","Conciseness of code (I can see more at a glance);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Type inference;Units of measure","Agents (MailboxProcessor);Async workflows","","Links and instructions from fsharp.org;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","","","Not applicable. None of my F# code is used by other people","None - Just playing around","","Windows;Mac","It's used unofficially","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 4:25:34 am CET","10 or more years","Consulting","No","Experienced","C;Javascript;Perl;PHP;Shell script","Less than two months","","Just tinkering","Windows","Visual Studio 2015 or newer;Emacs;VS Code (with Ionide)","Twitter;F# Weekly","Having fun again","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;Simple ""one liner"" type definitions for records and DUs;Type inference;Type providers","Agents (MailboxProcessor);Object expressions;Object-oriented compatibility;Quotations;Units of measure","fsharp.data
","F# books;F# bloggers","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Recorded talks from a conference or user group","","","Not applicable. None of my F# code is used by other people","None - Just playing around;Non-commercial web site/app","SQL databases","Windows;Linux","I don't use F# at work","","","","","","","",""
"2017/05/02 4:27:26 am CET","10 or more years","Enterprise development","No","Intermediate","C#;F#","2-3 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations;Static type constraints;Units of measure","","F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","Internal enterprise projects","Utilities and tools;Commercial web site/app","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 4:27:56 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#","4 or more years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter;F# Weekly","Great community;Having fun again;Speed of development","Interactive development;Type providers","Active Patterns;Agents (MailboxProcessor);Object expressions;Static type constraints;Units of measure","Paket
FAKE
Expecto","F# books;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material","Better and more unified IDE experience
","Internal enterprise projects;Open source projects","Utilities and tools;Custom development/specialist markets;Machine learning;Text analysis/language parsing","NoSQL database;Textual & flat file data","Windows","It's used unofficially","More productive with fewer developers;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","Installation process","Not being part of the core .NET distribution;Difficulty in troubleshooting problems;Performance issues","","",""
"2017/05/02 4:41:29 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","Ada;C;C#;C++;F#;Go;Java;Javascript;Python","Less than a year","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Correctness (no nulls, it works first time);Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Object expressions;Quotations","Agents (MailboxProcessor);Static type constraints;Units of measure","","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More short ""live coding"" videos","","Internal enterprise projects","Algorithm-heavy business applications (non-financial);Machine learning;Mainstream business & enterprise applications","NoSQL database;Not doing data centric apps","Windows;Mac;Linux;Amazon Web services;Raspberry Pi","It's officially endorsed in my team for non-critical/non-production code","More productive with fewer developers;Better for solving complex problems","Money: They worry that good F# developers will cost too much;Too Microsoft-centric: They think it is too closely linked to Microsoft","","I can't use my knowledge from C# or other imperative languages","Working with C#-centric tooling;Cross-platform issues","","",""
"2017/05/02 4:42:19 am CET","10 or more years","Academic, research, or related","Yes","Intermediate","C;C#;F#;Java;VHDL","1-2 years","","I use it for hobby or side projects","Windows;Mac;Linux","VS Code (with Ionide)","Twitter;fsharp channel on Slack;F# bloggers","Conciseness of code (I can see more at a glance);Great community;Speed of development","Algebraic types (inc discriminated unions and tuples);Interactive development;The ""piping"" idiom;Type inference","Quotations;Type providers","Ionide
The REPL
.NET Core support","F# books;F# bloggers;Writing code","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context","More material with in-depth tutorials","","Internal enterprise projects","None - Just playing around;Utilities and tools;Research/Teaching;Other","Textual & flat file data","Windows;Linux","It's used unofficially","More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","Installation process","","Complex tooling and legacy connection to MSFT/Windows makes it hard to attract developers from other communities.
Winning over C# developers is not the right strategy to increase popularity; the growth should come from other places, such as developers on JS or the JVM.","",""
"2017/05/02 4:43:07 am CET","10 or more years","Enterprise development","Yes","Intermediate","Ada;Go;Ruby","Less than a year","","I use it at work or for other commercial uses","Windows;Linux","VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom","Object-oriented compatibility;Units of measure","","F# books;F# bloggers;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Mainstream business & enterprise applications","SQL databases;Textual & flat file data","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","Technical reasons","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution","","",""
"2017/05/02 4:47:43 am CET","10 or more years","Enterprise development","Yes","Intermediate","C;C#;F#","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Backtick naming;Immutability by default;The ""piping"" idiom","Active Patterns;Agents (MailboxProcessor);Object-oriented compatibility;Quotations","Suave
Chiron
Ionide
Expecto","F# books;F# bloggers","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","I think getting the tooling set up is the biggest challenge. Better bootstrapping/getting-started docs to get people quickly into the happy path.","Internal enterprise projects","Utilities and tools;Mainstream business & enterprise applications","SQL databases;Event store/logs/Kafka","Windows","It's officially endorsed in my team for non-critical/non-production code","Correctness: fewer bugs and less rework;Faster time to market","Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","* Better logging/monitoring support (nxlog and statsd are standard at my workplace, and missing support proper afaict)
* Popularize F# ""enterprise architecture patterns"" or whatever the hell gets architects out of bed in the morning. Mark Seemann's doing work but it's not sufficiently disseminated
* Show the benefits of Forge/FAKE/Paket more broadly than ""cranks dissatisfied with VS""","Installation process","Working with C#-centric tooling","Lack of typeclasses + HKTs makes it pretty much inevitable that I'll end up in Haskell.

Related: a lot of the F# community seems to be punching up and down, ridiculing ""hardcore FP"" (Haskell, Idris, Agda, etc) as abstract nonsense and C#/VB/Java/etc as dangerous and irresponsible. I think this slows entry of good ideas from the first group and entry of good developers from the second group.","",""
"2017/05/02 4:53:52 am CET","10 or more years","Commercial software/web development","No","Experienced","F#;Swift","Less than a year","","I use it for hobby or side projects","Mac;Linux","Vim;VS Code (with Ionide)","Twitter;F# Weekly;IRC","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;No dependency cycles;The ""piping"" idiom;Type inference;Type providers","Object expressions","Ionide","F# bloggers;fsharpforfunandprofit","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","More public source code / real world examples.
","Not applicable. None of my F# code is used by other people;contracting","Non-commercial web site/app","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Linux","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;Too Windows-centric: They have concerns over cross-platform issues;No buy-in: There is lack of acceptance from other teams","More support with .NET Core","Don't understand the compiler errors;Not enough real-world code to learn from","Lack of F# friendly libraries","getting more momentum / blind spot.
Being seen as an academic language.","",""
"2017/05/02 4:57:12 am CET","1-2 years","Commercial software/web development","No","Intermediate","Javascript;Elm","I was using F# but have stopped","Though I very much enjoyed the language, I couldn't find a personal use case.","Just tinkering","Mac","VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","","FP practices in general
Automagical API types","MSDN;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight);Written, in-depth tutorials","More material with in-depth tutorials","My biggest problem while learning was integrating with dependencies. Perhaps just issues with my environment, but information on debugging dependency loading would have been helpful to me personally","Not applicable. None of my F# code is used by other people","None - Just playing around","Textual & flat file data;Analytics;Read-only data sources such as feeds","","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","I think the problem lies in a lack of general acceptance in functional languages. There is a perceived learning curve and mindset shift that is difficult to accept. I think this problem expands to most FP languages rather than just F#.","Lack of good tutorials/documentation;Installation process;Dependency management","Working with C#-centric tooling","","",""
"2017/05/02 5:25:38 am CET","5-10 years","Enterprise development","Yes","Intermediate","C#","Less than a year","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer","Twitter;F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance;I love FSharp","Active Patterns;Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);Quotations;The ""piping"" idiom;Type inference;Type providers;Units of measure","Active Patterns;Agents (MailboxProcessor);Async workflows;Computation expressions;Integration with non-F# libraries;Interactive development;Object expressions;Object-oriented compatibility;Quotations;Static type constraints;Type providers;Units of measure","","MSDN;F# books;F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","More Pluralsight videos, especially on F# with Xamarin 
More Sample projects on Github on F# + WebAPI + SQL server

","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Commercial web site/app;Mobile apps;Data analysis/statistics","SQL databases;Event store/logs/Kafka","Windows","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed","","Lack of good tutorials/documentation","Not being part of the core .NET distribution;Lack of F# friendly libraries;Working with C#-centric tooling","","",""
"2017/05/02 5:28:34 am CET","10 or more years","Enterprise development","No","Intermediate","C#;Java;Typescript;Delphi","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again","Active Patterns;Immutability by default;Interactive development;No dependency cycles;The ""piping"" idiom;Type inference;Units of measure","Integration with non-F# libraries;Object-oriented compatibility;Quotations;Type providers","","Links and instructions from fsharp.org;F# books;F# bloggers;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More interactive tutorials (e.g. like the F# Koans)","For beginners,  C# to F# translations.  Do you don't get lost in the huge difference in syntax for simple things.","Not applicable. None of my F# code is used by other people","Utilities and tools;Research/Teaching;Text analysis/language parsing","SQL databases;NoSQL database;Textual & flat file data","Windows","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Lazy minds","Keep preaching.  It does help to have people that can really articulate the benefits to average programmers.","Don't understand the compiler errors","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 5:31:56 am CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;F#;Go;Haskell","4 or more years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Great community;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Agents (MailboxProcessor);Async workflows;Computation expressions;Immutability by default;Quotations;Type inference;Type providers","Object expressions;Object-oriented compatibility","Vs Code
FSharp.Data
","F# books;Answers to Stack Overflow questions;Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: A talks at user groups;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Commercial products","Utilities and tools;Algorithm-heavy business applications (non-financial);Machine learning;Text analysis/language parsing","SQL databases;NoSQL database","Windows;Mac","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;More productive with fewer developers;Efficiency/Performance;Easy concurrency with async and agents","No buy-in: There is lack of acceptance from other teams;Technical reasons;Nothing. Everyone loves it.","is a coltural reason. Developers in my team see OOP as the only silver bullet ","Lack of good tutorials/documentation;Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Interop with .NET languages ","",""
"2017/05/02 5:35:48 am CET","5-10 years","Student","Yes","Learner","C#;Java;Python","Less than two months","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;JetBrains Rider","F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);printf that is type checked;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Async workflows;Object-oriented compatibility;Quotations;Type providers;Units of measure","","MSDN;F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with real-world examples and war stories;More podcasts and other audio-only material","I'm struggling to find complete, moderate-sized, real-world programs to learn by practise how to apply fsharp. I'm learning syntax and functional concepts, but I haven't found much information about how to fit it all together.","Not applicable. None of my F# code is used by other people","None - Just playing around;Utilities and tools","Not doing data centric apps","","It's used unofficially","","","","I can't use my knowledge from C# or other imperative languages;Not enough real-world code to learn from","Lack of F# friendly libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 5:37:30 am CET","2-5 years","Enterprise development","Yes","Learner","C#;Javascript;Typescript","Haven't really used it yet","","Just tinkering","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;VS Code (with Ionide)","HN, Reddit and other programming news sites","","Active Patterns;Agents (MailboxProcessor);Immutability by default;The ""piping"" idiom","","","MSDN;Links and instructions from fsharp.org","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More short ""live coding"" videos","","Not applicable. None of my F# code is used by other people","None - Just playing around","NoSQL database","Windows;Linux;Raspberry Pi","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed","","Lack of good tutorials/documentation","","","",""
"2017/05/02 5:53:26 am CET","10 or more years","Open source development","Yes","Experienced","C#;F#;Javascript;Python","1-2 years","","I use it for hobby or side projects","Linux","VS Code (with Ionide)","HN, Reddit and other programming news sites;F# bloggers;gitter.im groups for Fable, Paket, etc.","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Async workflows;Static type constraints","Paket
FAKE
ProjectScaffold
Ionide
FSharpx.Collections
Expecto
FsCheck
Suave
Fable
Canopy
Argu
JsonProvider
XmlProvider","Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts;fsharpforfunandprofit.com site","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","A newbie should be given a Git repo like ProjectScaffold to clone, with ""batteries included"": Paket, FAKE, and a unit testing library (I'd recommend Expecto), as well as instructions for how to switch to other unit testing libraries (edit paket.dependencies, re-run ""paket install""). And that repo should work whether they're using VS Code + Ionide on Linux, Project Rider on Mac, Visual Studio on Windows, or any other editor/OS combination.

If the first thing that an F# newbie encounters is frustration in setting up the IDE and tooling, it's going to turn a lot of people off. But if newbies are handed a good scaffolding repo with the right tools already set up, so that they can immediately start writing short functions and unit tests for those functions, they'll be able to learn without distractions.

Defaults matter.","Open source projects","Non-commercial web site/app;Data analysis/statistics;Text analysis/language parsing","Textual & flat file data","Windows;Mac;Javascript as a platform;Linux","I don't use F# at work... YET. Planning to introduce it soon.","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","Improve the documentation of the FAKE build tool; in particular, provide an index and more code examples. Right now I hesitate to introduce FAKE because I think people won't know how to use it, so we're stuck with a spectacularly ugly hacked-together MsBuild system for some of our largest code.","Lack of good tutorials/documentation;Installation process","Not being part of the core .NET distribution;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","Microsoft doesn't seem to realize the importance of F#. The F# team at Microsoft has great people in it, but there are too few of them, and other teams (.Net Core, ASP.Net) make decisions that hinder F# without ever seeming to realize it, and without (as far as I can tell) consulting with the F# team to see if a different approach would have been better.","",""
"2017/05/02 6:02:21 am CET","10 or more years","Commercial software/web development","No","Learner","C#;PowerShell","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Active Patterns;printf that is type checked;The ""piping"" idiom","Agents (MailboxProcessor);Quotations;Type providers;Units of measure","Ionide","F# books;F# bloggers;Links mentioned in F# Weekly;F# For Fun and Profit","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories","","Internal utilities ","Utilities and tools","Textual & flat file data;Analytics","","It's used unofficially","Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","","I can't use my knowledge from C# or other imperative languages","Working with C#-centric tooling","","",""
"2017/05/02 6:02:53 am CET","Less than a year","Enterprise development","No","Learner","C#;Java","Less than two months","","Just tinkering","Windows;Linux","Visual Studio 2015 or newer;MonoDevelop;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Conciseness of code (I can see more at a glance);Learning functional programming in general","Immutability by default;No dependency cycles;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Type providers","","F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories","More sensible defaults when it comes to libraries. Almost always C# knowledge is required to get something done. A working out of the box experience on Linux. Not several project generators with outdated scaffolds. And for god sake a default for accessing databases that is not a type provider with a lot of bugs and missing features. Thinking about Elixir and the mix tool. But that is not fair because a lot is missing there too.","Not applicable. None of my F# code is used by other people","Non-commercial web site/app;Text analysis/language parsing","SQL databases;Textual & flat file data","Windows;Linux","I don't use F# at work","","No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Installation process;Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","No clear answer to the question when to use OO features.

Not being hyped by Microsoft. F# was to windows centric for a long time so an important part of the community did not evolve. The ones that want to use F# and run it on Linux. Mono was just not good enough. So if the community did not start growing exponentially it is time for a big player to push F# really hard. ","",""
"2017/05/02 6:06:24 am CET","10 or more years","Commercial software/web development","Yes","Learner","C#","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Units of measure","Ionide, VsCode, Paket, Fake","Reading F# code written by experts","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information","","Commercial products","Commercial web site/app","Not doing data centric apps","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability","","Better, more intelligent (stable) tooling.  Where's my Resharper for F#?  :)","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.","Less sophisticated tools, less sophisticated libraries!","",""
"2017/05/02 6:09:17 am CET","10 or more years","Commercial software/web development","No","Intermediate","C#;F#;Javascript;Typescript","4 or more years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Backtick naming;Easy integration with other .NET libraries;Immutability by default;Interactive development;printf that is type checked;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Async workflows;Computation expressions;Object expressions;Object-oriented compatibility;Quotations;Static type constraints","","MSDN;F# books;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: A talks at user groups;In-person: Attending a talks as part of a conference","More material with short ""cookbook"" style information;More interactive tutorials (e.g. like the F# Koans)","","Commercial products;Open source projects","Utilities and tools","Textual & flat file data","Windows","It's used unofficially","Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Don't understand the compiler errors","Working with C#-centric tooling"," Sometimes I really miss little re-factoring/code transformation tools.  For example, it would be nice if I could click a lightbulb that would toggle my code between an if statement and a basic match statement. ","",""
"2017/05/02 6:15:31 am CET","10 or more years","Management","No","Intermediate","C#;F#","Less than a year","","hobby, scripts at work","Windows","VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;Quotations;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Units of measure","F# Interactive
Type providers
Ionide
Fable
FAKE
Packet
Chessie

","F# books;F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","Show real time coding and show the thinking way of application design. Sometimes I think that guru just doing concise code in 10 mins. I want to see how they are thinking and I want to understand what kind of knowledge I'm lack of. ","Internal enterprise projects","None - Just playing around;Utilities and tools;Mainstream business & enterprise applications","Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Faster time to market","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","Show benefits for developers and for customers of F# usage. I've seen a couple of stories about great performance of team, but it isn't enough. Maybe, people think that those teams are smart enough and we are working with other developers. ","I haven't such problems. It was easy and fun to learn, thanks to Scott W.","Less sophisticated tools for refactoring, etc.;Lack of knowledge common patterns in functional programming, especially in Enterprise.","Unstable development environment, i.e. Fable.","","Thanks for that survey, would like to see the results."
"2017/05/02 6:23:35 am CET","10 or more years","Enterprise development","Yes","Beginner","C#;Java;Typescript","Haven't really used it yet","","Just tinkering","Windows;Linux","Visual Studio 2015 or newer","","Better domain modelling with records and unions;Learning functional programming in general;Functional but can be tweaked to get high performance","Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom","","","MSDN;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials","","Internal enterprise projects","Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Mainstream business & enterprise applications;Non-commercial web site/app","","Windows;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable","Technical reasons","","I can't use my knowledge from C# or other imperative languages","Not being part of the core .NET distribution","Interoperability with .net core projects ","",""
"2017/05/02 6:27:07 am CET","10 or more years","Consulting","Yes","Experienced","C;C#;C++;F#;Javascript","4 or more years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Visual Studio 2015 or newer;Emacs","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;Type inference;Units of measure","Object-oriented compatibility;Quotations;Type providers","Chiron
","F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference","More material with in-depth tutorials;More material with short ""cookbook"" style information","","Internal enterprise projects","Algorithm-heavy business applications (non-financial);Financial services;Mainstream business & enterprise applications","SQL databases;NoSQL database;Textual & flat file data;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","","Installation process","Lack of F# friendly libraries","","",""
"2017/05/02 6:31:05 am CET","10 or more years","Enterprise development","No","Experienced","C#;Javascript;Typescript","Less than a year","Can't find a job where I could use it.","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide);Rider","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance)","Algebraic types (inc discriminated unions and tuples);Backtick naming;Easy integration with other .NET libraries;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom","Type providers","","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter","Practical first, with theory introduced as needed","","","","Open source projects","Utilities and tools","Not doing data centric apps","Windows;Mac;Linux","I don't use F# at work","","Hiring: They worry about not being able to find F# developers","","Lack of good tutorials/documentation","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 6:35:02 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Having fun again","Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;The ""piping"" idiom;Type inference","Computation expressions;Static type constraints;Type providers;Units of measure","","Links and instructions from fsharp.org;F# books;F# bloggers;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects;Open source projects","Utilities and tools;Financial services;Commercial web site/app;Non-commercial web site/app","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka","Windows;Mac;Javascript as a platform;Linux;Azure","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","","Not being part of the core .NET distribution;Lack of F# friendly libraries;Working with C#-centric tooling","","",""
"2017/05/02 6:39:36 am CET","5-10 years","Commercial software/web development","No","Intermediate","C#;F#","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Emacs;VS Code (with Ionide)","Twitter;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Backtick naming;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Interactive development;Quotations;Units of measure","","F# bloggers;Reading F# code written by experts","Practical first, with theory introduced as needed","","","","Commercial products","Commercial web site/app","NoSQL database;Event store/logs/Kafka","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Installation process;Don't understand the compiler errors","Working with C#-centric tooling;Difficulty in troubleshooting problems","","",""
"2017/05/02 6:42:29 am CET","2-5 years","Commercial software/web development","No","Learner","C#;F#;Javascript","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Object expressions;printf that is type checked;Quotations;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers;Units of measure","Active Patterns;Agents (MailboxProcessor);Async workflows;Computation expressions;Object expressions;Object-oriented compatibility;Quotations","","Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: Shorter workshops focused on a specific topic (1 day);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","None - Just playing around;Utilities and tools;Mobile apps","Event store/logs/Kafka","Windows;Javascript as a platform;iOS;Android;Azure","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams;Nothing. Everyone loves it.","","","Not being part of the core .NET distribution","","",""
"2017/05/02 6:42:47 am CET","5-10 years","Financial services or similar","Yes","Experienced","C#;F#;Python;R","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# bloggers","Conciseness of code (I can see more at a glance);Great community;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Immutability by default;Type inference;Units of measure","Active Patterns;Agents (MailboxProcessor);Object expressions;Type providers","","F# bloggers;Links posted on social media such as Twitter;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools;Financial services","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Nothing. Everyone loves it.","","","Not being part of the core .NET distribution;Lack of F# friendly libraries;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 6:43:31 am CET","10 or more years","Financial services or similar","No","Intermediate","C#;F#","3-4 years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general","Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs","Active Patterns;Interactive development;Quotations;Units of measure","FsCheck
Paket
Fake","MSDN;Links posted on social media such as Twitter","Practical only. I don't care about theory.","","More material with real-world examples and war stories","A good online tutorial with integrated exercises & compiler (codingame~like)","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Financial services;Non-commercial web site/app;Other","SQL databases;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","Force microsoft to have a correct integration in VS, showing commitment to the language","Not enough real-world code to learn from","Working with C#-centric tooling;VS bugs and bad F# support","Explicit file ordering","",""
"2017/05/02 6:46:39 am CET","10 or more years","Commercial software/web development","No","Intermediate","C#;Javascript","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default","Quotations;Type providers","Chessie
Suave","Links and instructions from fsharp.org;F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Recorded talks from a conference or user group","More material with real-world examples and war stories","","Commercial products","Commercial web site/app","NoSQL database","Windows;Linux;Docker","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Don't understand the compiler errors;Not enough real-world code to learn from","Difficulty in troubleshooting problems","","",""
"2017/05/02 6:47:04 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#;Typescript","1-2 years","Tooling is not as good as It could be.","Just tinkering","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general","Active Patterns;Async workflows;Immutability by default;No dependency cycles;Type inference","Agents (MailboxProcessor);Object expressions;Object-oriented compatibility;Quotations","","F# bloggers;Fsharpforfunandprofit","Practical first, with theory introduced as needed","In-person: A talks at user groups;Recorded talks from a conference or user group","More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Games;Data analysis/statistics","Not doing data centric apps","Mac","I don't use F# at work","","No need. C# has been very good for what we do. Using F# is not a goal. ","","Installation process","Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.","Tooling (managing solution in ionide is pretty much manual xml editing).","",""
"2017/05/02 6:49:05 am CET","5-10 years","Commercial software/web development","Yes","Intermediate","C;C#","Less than two months","","I use it for hobby or side projects","Windows;Linux","VS Code (with Ionide);LinqPad","Twitter","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","","","MSDN;F# books;F# bloggers","Practical first, with theory introduced as needed","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","","- Focus on new developers, without any experience, so that one can learn programming using F# instead of say Python.
- Make very easy to install a working F# environment. Single step install. Remove dependency on larger things.
- Make cross-platform default.
- Make simple editor + command line default instead of Visual Studio.","","","","","","","","","Installation process;Tutorials assume I am coming from other programming languages.","","","",""
"2017/05/02 6:53:12 am CET","5-10 years","Commercial software/web development","Yes","Experienced","F#;Haskell;Rust;Ur/Web","Less than a year","","I use it at work or for other commercial uses","Windows;Mac;Linux","Visual Studio 2015 or newer;Xamarin;Sublime Text;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers;Units of measure","Agents (MailboxProcessor);Interactive development;Quotations","","MSDN;F# bloggers;Links mentioned in F# Weekly","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","Better MSDN support","Not applicable. None of my F# code is used by other people","Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Other","SQL databases","Windows;Mac;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;Nothing. Everyone loves it.","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 6:55:41 am CET","5-10 years","Academic, research, or related","Yes","Experienced","C#;F#;Go;Javascript;PHP;Python","2-3 years","","I use it for student work","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Type providers;Units of measure","","MSDN;Links and instructions from fsharp.org;F# For Fun And Profit","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Open source projects","Other","Textual & flat file data","Windows;Mac","I don't use F# at work","Correctness: fewer bugs and less rework;Better for solving complex problems","","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution","Still feels like a 2nd class citizen in the .NET environment.","",""
"2017/05/02 7:01:11 am CET","2-5 years","Enterprise development","No","Learner","C#;F#;Java;Ruby","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Vim","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Learning functional programming in general;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Interactive development;Type inference","Agents (MailboxProcessor);Object expressions;Quotations","","F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","Linux","I don't use F# at work","Domain modelling: making illegal states unrepresentable","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Installation process;Don't understand the compiler errors","Lack of F# friendly libraries;Working with C#-centric tooling;Cross-platform issues","","",""
"2017/05/02 7:01:51 am CET","10 or more years","Advertisement","Yes","Experienced","F#","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Speed of development","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;No dependency cycles;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations","Paket
Fake
Argu","Links and instructions from fsharp.org;Links mentioned in F# Weekly;Reading F# code written by experts","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with short ""cookbook"" style information","","Internal enterprise projects","Custom development/specialist markets;Machine learning;Data analysis/statistics;Other","SQL databases;NoSQL database;Event store/logs/Kafka","Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","Nothing. Everyone loves it.","","Not enough real-world code to learn from","Performance issues","","",""
"2017/05/02 7:13:27 am CET","10 or more years","Enterprise development","No","Beginner","C#;F#;Javascript;Typescript","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Xamarin","Twitter;F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again","Active Patterns;Algebraic types (inc discriminated unions and tuples);No dependency cycles;Type providers","Agents (MailboxProcessor);Interactive development;Quotations","","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context","More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","None - Just playing around;Non-commercial web site/app","SQL databases","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries","","",""
"2017/05/02 7:15:22 am CET","5-10 years","Commercial software/web development","No","Learner","C#;F#;Javascript;R","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;Type providers","Agents (MailboxProcessor);Units of measure","","Links and instructions from fsharp.org;F# bloggers;Structured training/workshops","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days)","More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Open source projects","Utilities and tools;Data analysis/statistics","Textual & flat file data","Windows;Amazon Web services","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Installation process","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 7:21:33 am CET","Less than a year","Academic, research, or related","Yes","Learner","F#;Python;powershell","Less than a year","Why can discriminated union only accept tuples?
And why there is so many rec?","planning to use this as my main language","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Async workflows;Immutability by default;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);Type providers","Integration with non-F# libraries","","F# books;Videos (e.g. Community for F#)","Theory first, to get a rigorous foundation","Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;more about the thoery than talking about business every now and then.","","Open source projects","Utilities and tools;Research/Teaching;Text analysis/language parsing","SQL databases;Textual & flat file data","Windows;Javascript as a platform;Linux;Android;universal windows platform","I don't use F# at work","","","","Lack of good tutorials/documentation;typically fsharp tutorial lacks about theory, haskell did a good job have both theory and practice ","","","",""
"2017/05/02 7:25:51 am CET","10 or more years","Commercial software/web development","No","Experienced","C#;C++;F#;Haskell;Python","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Having fun again;Speed of development","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Object expressions;The ""piping"" idiom","Agents (MailboxProcessor)","FsCheck","","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context;Recorded talks from a conference or user group","More short ""live coding"" videos","","Not applicable. None of my F# code is used by other people","Utilities and tools;Games;Text analysis/language parsing","Not doing data centric apps","Windows;Azure","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Lack of higher-kinded types.
Too many ways to do things (due to CLR compatability).
Writing performant code means writing non-idiomatic code.","",""
"2017/05/02 7:28:32 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly;HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;printf that is type checked;The ""piping"" idiom","Active Patterns;Agents (MailboxProcessor);Static type constraints;Type providers;Units of measure","","F# books;http://fsharpforfunandprofit.com","Practical first, with theory introduced as needed","","","","Internal enterprise projects;Open source projects","Custom development/specialist markets","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;Efficiency/Performance;Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft;Technical reasons","","","Less sophisticated tools for refactoring, etc.;Performance issues","The absolute big issue is the extension ""Visual F# Power Tools"" for Visual Studio 2015 and the terrible support of F# in Visual Studio 2017. Once you reach a certain solution size everything become very slow and unresponsive. Sometimes Visual Studio (2015/2017) crashes for no reason (VS is always up to date). 

This doesn't appear when using C#.

The F# language is fine, its support in VS is a disaster.","",""
"2017/05/02 7:37:18 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Async workflows;Interactive development;Object expressions;Object-oriented compatibility;Type providers;Units of measure","","F# books;fsharpforfunandprofit.com","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Query parser that's part of a PAAS cloud service","Text analysis/language parsing;Other","Not doing data centric apps","Windows","Currently used unofficially, trying to make it official ","Correctness: fewer bugs and less rework;Better for solving complex problems;The code is so concise that it serves as documentation for the problem domain","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","Make a clearer case for why it's better to choose F# over C#, even if C# is ""good enough"".","Don't understand the compiler errors;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems;Performance issues","It's very easy to write code that creates a lot of GC pressure when using a purely functional style. Better tools for analyzing memory usage would help. ","",""
"2017/05/02 7:41:01 am CET","10 or more years","Consulting","No","Experienced","C#;F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers;Scripting; Currying","Agents (MailboxProcessor);Units of measure","FsCheck
Unquote
F# Power Tools
FSharp.Data","F# bloggers;Answers to Stack Overflow questions;http://fsharpforfunandprofit.com","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","","I think people need to see more real-world examples of full applications, showcasing how to architect programs with F#.","Internal enterprise projects;Open source projects;Example code","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app;Research/Teaching","Data integration and EAI","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Nothing. Everyone loves it.;Still a lot of C# legacy code around","More stable Visual Studio tools. F# Power Tools is great, but can be a tad unstable.","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;FSharp.Core versioning issues","That Microsoft seems to be (passively) trying to suppress the language.
Versioning issues with FSharp.Core.
Lack of higher-kinded types/TypeClasses.","",""
"2017/05/02 7:41:36 am CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;Typescript","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development","Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);Type inference;Units of measure","Active Patterns;Agents (MailboxProcessor);Computation expressions;Object expressions;Quotations;Type providers","","MSDN;Links and instructions from fsharp.org;F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Commercial products","Mainstream business & enterprise applications","Event store/logs/Kafka","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","Hiring: They worry about not being able to find F# developers","","Don't understand the compiler errors;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 7:42:13 am CET","10 or more years","Financial services or similar","No","Intermediate","OCaml","I was using F# but have stopped","","Just tinkering","","Vim","Twitter","","Algebraic types (inc discriminated unions and tuples);Backtick naming;Immutability by default;No dependency cycles;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Units of measure","Active Patterns;Integration with non-F# libraries;Object-oriented compatibility","","F# books","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","","None - Just playing around","","Windows;Mac","","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market","Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft;Technical reasons;No benefit over OCaml","","Lack of good tutorials/documentation;Unpleasant interactions with the community","Lack of F# friendly libraries","","",""
"2017/05/02 7:43:50 am CET","10 or more years","Commercial software/web development","Yes","Learner","C#;F#;Javascript","Less than a year","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;Sublime Text;Atom (with Ionide);VS Code (with Ionide)","Twitter;Gitter","Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Easy integration with other .NET libraries;The ""piping"" idiom","Active Patterns;Agents (MailboxProcessor)","Ionide
Fable
Rider
","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information","","Commercial products","Algorithm-heavy business applications (non-financial);Commercial web site/app;Other","SQL databases;NoSQL database","Windows;Mac;iOS;Android;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Nothing. Everyone loves it.","","Don't understand the compiler errors","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Debugging","",""
"2017/05/02 7:46:46 am CET","10 or more years","Enterprise development","No","Experienced","C#;F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Functional but can be tweaked to get high performance;esthetically beautiful code","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;No dependency cycles;Object expressions;Simple ""one liner"" type definitions for records and DUs;Type providers","Quotations;Static type constraints;Units of measure","visual studio
extcore
fsharp.data
","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Theory first, to get a rigorous foundation","Books or longer articles explaining full context","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Research/Teaching;Data analysis/statistics","SQL databases;NoSQL database;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries","","",""
"2017/05/02 7:47:40 am CET","5-10 years","Enterprise development","No","Intermediate","C#;F#;Javascript","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Backtick naming;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Units of measure","Agents (MailboxProcessor);Object expressions;Static type constraints","FsCheck
Unquote","F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Open source projects","Utilities and tools","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 7:52:04 am CET","10 or more years","Enterprise development","No","Intermediate","C#;F#;Javascript;Typescript","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;No dependency cycles;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;Type inference;Type providers","Agents (MailboxProcessor);Units of measure","Visual F# PowerTools
Ionide
Fake
Paket","MSDN;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Structured training/workshops;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories","","Internal enterprise projects","Custom development/specialist markets;Financial services;Mainstream business & enterprise applications","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","Nothing. Unfortunately it's not about community, it's about enterprises being constrained to things MS signed off (got better, but still :-()","Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Still second class citizen ","",""
"2017/05/02 7:52:51 am CET","10 or more years","Financial services or similar","No","Intermediate","C#;Java;Ruby","Less than a year","","Just tinkering","Mac","Vim;VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;The ""piping"" idiom;Type inference","","Ionide","F# books","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","","","I don't use F# at work","","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","","","","",""
"2017/05/02 7:59:52 am CET","10 or more years","Consulting","No","Learner","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Emacs;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Integration with non-F# libraries;Object-oriented compatibility;Quotations;Static type constraints;Type providers","Fake
Paket
Fable","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Personal mentoring;Structured training/workshops","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More interactive tutorials (e.g. like the F# Koans)","","Commercial products","Utilities and tools;Custom development/specialist markets;Financial services;Machine learning;Mainstream business & enterprise applications;Commercial web site/app;Data analysis/statistics","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka;Read-only data sources such as feeds","Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues","","","Not being part of the core .NET distribution;Working with C#-centric tooling;Cross-platform issues","","",""
"2017/05/02 8:02:22 am CET","10 or more years","Commercial software/web development","No","Learner","C#","1-2 years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again","Active Patterns;Backtick naming;Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs;Type providers;Units of measure","Agents (MailboxProcessor);Computation expressions;Quotations","","F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Practical only. I don't care about theory.","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","","Open source projects","Utilities and tools;Mobile apps","SQL databases;Textual & flat file data","Windows;iOS;Android","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Difficulty in troubleshooting problems;Cross-platform issues","","",""
"2017/05/02 8:08:41 am CET","10 or more years","Enterprise development","Yes","Learner","C#;Javascript","Less than two months","Inadequate staffing of several team at Microsoft.","Just tinkering","Windows;Mac;Linux","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","","Better domain modelling with records and unions;Learning functional programming in general","Immutability by default;The ""piping"" idiom","","","F# books;F# bloggers","Practical first, with theory introduced as needed","In-depth online courses (e.g. Pluralsight)","","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases","","I don't use F# at work","","","","Put some money into it Microsoft ","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.","Tooling is awful","",""
"2017/05/02 8:14:02 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;colleagues","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor)","FAKE
Paket
Suave
FSharp.Data

","Links and instructions from fsharp.org;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Personal mentoring;Structured training/workshops;Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Commercial products;Open source projects","Utilities and tools;Financial services;Commercial web site/app","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Easy concurrency with async and agents","Nothing. Everyone loves it.","","Installation process","Working with C#-centric tooling;no resharper support","","",""
"2017/05/02 8:18:57 am CET","10 or more years","Financial services or similar","Yes","Experienced","C;C#;F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Async workflows;Object expressions","","MSDN;F# bloggers","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference","","","Internal enterprise projects","Financial services;Data analysis/statistics","Textual & flat file data;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","Installation process","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/02 8:22:23 am CET","10 or more years","Enterprise development","Yes","Expert","C#;C++","Haven't really used it yet","","Just tinkering","Windows","Visual Studio 2015 or newer","HN, Reddit and other programming news sites;F# bloggers;Google+","Better domain modelling with records and unions","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Interactive development;No dependency cycles;Object expressions;Object-oriented features (inc. C# compatibility, conciseness)","Units of measure","","MSDN;F# books;F# bloggers","Practical only. I don't care about theory.","In-person: In-depth trainings (2 or 3 days)","More material with in-depth tutorials;More material with short ""cookbook"" style information","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases","Windows","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","","","","",""
"2017/05/02 8:30:06 am CET","10 or more years","Embedded software development","Yes","Intermediate","C;C#;F#;Python","1-2 years","","I use it at work or for other commercial uses","Windows","VS Code (with Ionide)","HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Units of measure","Agents (MailboxProcessor);Async workflows;Quotations;Type providers","","F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Automation scripts","Utilities and tools;Data analysis/statistics","SQL databases;Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","","","","",""
"2017/05/02 8:32:48 am CET","10 or more years","Enterprise development","No","Learner","C#;Visual Basic","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom","Integration with non-F# libraries;Object-oriented compatibility","","F# books;Links mentioned in F# Weekly;Reading F# code written by experts","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Textual & flat file data","Windows","I don't use F# at work","","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries","","",""
"2017/05/02 8:37:54 am CET","10 or more years","Enterprise development","No","Learner","C#","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Computation expressions;Quotations;Units of measure","","Links and instructions from fsharp.org;F# bloggers;Reading F# code written by experts;fsharpforfunandprofit","Practical first, with theory introduced as needed","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","Not applicable. None of my F# code is used by other people","None - Just playing around;Utilities and tools","SQL databases;NoSQL database","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Technical reasons","","Not enough real-world code to learn from","Lack of F# friendly libraries","","",""
"2017/05/02 8:43:56 am CET","5-10 years","Commercial software/web development","Yes","Intermediate","C#;F#;Javascript","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Backtick naming;Immutability by default;Object expressions;The ""piping"" idiom","Agents (MailboxProcessor)","Reactive
AsyncSeq
Power Tools","F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos","Better tooling and parity with c#, anon types, implicit interface members, covariant generics","Commercial products","Custom development/specialist markets","Event store/logs/Kafka","Windows;Amazon Web services","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Technical reasons;Nothing. Everyone loves it.","Better/more tools, and language featurea","Lack of good tutorials/documentation;Don't understand the compiler errors;Broken Tooling ","Lack of F# friendly libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Tooling","Tell me more about the community, can I fix anything. Are my answers leading to any outcomes?",""
"2017/05/02 8:48:23 am CET","10 or more years","Consulting","No","Experienced","Erlang;F#;Haskell;Javascript","4 or more years","I haven't stopped, but I've cut back. That's a mix of external (pressures from running businesses, etc.) and F# specific. The F# specific is around the greater cost to stay current recently with churn/chaos around netcore.","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Emacs;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;Type inference","Agents (MailboxProcessor);Interactive development;Object expressions;Object-oriented compatibility;Quotations;Type providers;Units of measure","FParsec
","MSDN;F# books;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","","","Open source projects","Utilities and tools;Commercial web site/app;Non-commercial web site/app;Text analysis/language parsing","Not doing data centric apps","Linux","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Too Microsoft-centric: They think it is too closely linked to Microsoft","","Lack of good tutorials/documentation","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Cross-platform issues","","",""
"2017/05/02 8:51:28 am CET","10 or more years","Enterprise development","No","Learner","C#","1-2 years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Agents (MailboxProcessor);Immutability by default;The ""piping"" idiom;Type providers","Integration with non-F# libraries;Object-oriented compatibility;Quotations;Units of measure","","F# books;F# bloggers","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories;More podcasts and other audio-only material","","Not applicable. None of my F# code is used by other people","Non-commercial web site/app","Read-only data sources such as feeds","Windows;Mac","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Working with C#-centric tooling","","",""
"2017/05/02 9:02:05 am CET","10 or more years","Financial services or similar","Yes","Experienced","C#;F#","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development","Algebraic types (inc discriminated unions and tuples);Computation expressions;No dependency cycles;The ""piping"" idiom;Type inference","Units of measure","","F# books;F# bloggers;Links posted on social media such as Twitter","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with real-world examples and war stories","","Internal enterprise projects","Financial services","SQL databases;Textual & flat file data;Event store/logs/Kafka","Windows","You would have to ask for permission to use anything else","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","Nothing. Everyone loves it.","","Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 9:08:58 am CET","10 or more years","Academic, research, or related","Yes","Expert","C#;F#;Racket","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Vim","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;No dependency cycles;printf that is type checked;The ""piping"" idiom;Type inference;first-class functions","Agents (MailboxProcessor);Async workflows;Interactive development;Quotations;Type providers","","MSDN;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","","","Commercial products","Games","Not doing data centric apps","Windows;Mac;Linux","","","","","","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.","Lack of core support in VS.","","Any chance of ML/OCaml style modules/functors?"
"2017/05/02 9:11:17 am CET","2-5 years","Enterprise development","Yes","Learner","C#;F#;Typescript","1-2 years","","I use it for hobby or side projects","Windows","VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Great community;Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Type inference","Quotations","","F# books;F# bloggers;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with in-depth tutorials","","Not applicable. None of my F# code is used by other people","Utilities and tools;Machine learning;Data analysis/statistics;Text analysis/language parsing","NoSQL database","Windows;Linux;Azure","It's used unofficially","Domain modelling: making illegal states unrepresentable;More productive with fewer developers;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","","Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","Microsoft","",""
"2017/05/02 9:13:20 am CET","2-5 years","Enterprise development","No","Experienced","C#;Javascript","Less than a year","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;Vim;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time)","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;Type inference;Type providers","Agents (MailboxProcessor)","","Reading F# code written by experts","Practical first, with theory introduced as needed","","","","Not applicable. None of my F# code is used by other people","None - Just playing around","NoSQL database","Windows;Linux;Azure","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","","Not enough real-world code to learn from","Not being part of the core .NET distribution","","",""
"2017/05/02 9:15:51 am CET","5-10 years","Commercial software/web development","No","Learner","C#;F#;Javascript;PHP","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Computation expressions;Interactive development;Units of measure","","MSDN;Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More interactive tutorials (e.g. like the F# Koans)","","Commercial products","Mainstream business & enterprise applications;Commercial web site/app","Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","","Lack of good tutorials/documentation","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 9:16:57 am CET","5-10 years","Enterprise development","No","Experienced","C#;C++;F#;Java","I was using F# but have stopped","Corporate resistance to f#.  While I love the language culturally it was difficult to change and means resistance at every stage to production. Every failure is blamed on the language and there is less forgiveness of any issue or setback. There is some use still in production but they are scaling it back and removing .net as an option for the backend which is a shame. Noticed the productivity hit now that we have switched to another tech but there's safety in the herd.","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;MonoDevelop;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Interactive development;Type inference;Static generics and duck typing","Quotations","Suave was useful. Needs performance work though.","F# books;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories;More short ""live coding"" videos","Common scenarios made easy, better ways to do patterns typical in ok, emphasise optional type signatures where type inference makes sense, techniques to navigate around duck typed function s as dependencies.","Internal enterprise projects","Financial services","SQL databases;Textual & flat file data","Linux","Was used in production but all F# will now be rolled back","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams;Performance concerns","Too late for us but if performance was acceptable of messaging and other factors (such as f# Map). Idiomatic code should be faster. Using functions for dependency injection is fine but code navigation suffers, techniques to make code readable and navigatable.

More than that needs to keep us with features since c#, c++ are seen as having or getting features and catching up well to f# even though I don't think that's the case. Critical mass and success stories are required. ","Not enough real-world code to learn from","Not being part of the core .NET distribution;Performance issues;Cultural resistance","Critical mass and success stores from big name companies. Catch 22 I know. Also features need to be added to add expressiveness (e.g protocols, type classes, whatever).","Static type constraints is a feature that is quite nifty, put it on the list.","I hope f# gains more and more traction. It's the best language I've used thus far balancing power with conceptual simplicity. Despite the .net platform features don't feel bolted on."
"2017/05/02 9:20:17 am CET","10 or more years","Commercial software/web development","No","Experienced","F#","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference;Type providers;Railway Oriented Programming","Agents (MailboxProcessor);Object-oriented compatibility;Units of measure","Suave
FAKE
Paket
FSharp.Data","F# books;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;F# for Fun and Profit (of course!! :))","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","Internal enterprise projects;Commercial products;Open source projects","Mainstream business & enterprise applications;Commercial web site/app;Non-commercial web site/app","SQL databases;NoSQL database;Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","Show that F# rocks and is at least same good as C# (even if we know that F# is much better, wink wink)","Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Working with C#-centric tooling","Tooling in Visual Studio
New fsproj should be available at the very same time as new csproj was","",""
"2017/05/02 9:20:29 am CET","2-5 years","Commercial software/web development","No","Learner","C#","Less than a year","","Just tinkering","Windows","VS Code (with Ionide)","F# Weekly","Learning functional programming in general","Immutability by default;Interactive development;The ""piping"" idiom","","","","Practical first, with theory introduced as needed","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","","","","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Lack of good tutorials/documentation;Not enough real-world code to learn from","","","",""
"2017/05/02 9:21:19 am CET","10 or more years","Enterprise development","No","Intermediate","C#;F#;Java;Scala","Less than a year","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Easy integration with other .NET libraries;Interactive development;printf that is type checked;The ""piping"" idiom;Type inference","","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: Attending a talks as part of a conference","","","Utilities and scripts","None - Just playing around;Utilities and tools","SQL databases","Windows;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;Too Microsoft-centric: They think it is too closely linked to Microsoft","Provide material for F# evangelists to use to provide a selling point of moving from for example C# to F#. What are the best way of getting a C# developer in to F#","Lack of good IDE support like C# has","Less sophisticated tools for refactoring, etc.","Lack of 1st class support from Micrsosoft . Would be nice with top notch ide support. That is comming but i wish that Microsoft would back it even more and make sure that vs 2017 suppported F# as a 1st class citizen. It is really good that Rider gets F# support. ","","Thanks"
"2017/05/02 9:22:33 am CET","10 or more years","Commercial software/web development","No","Experienced","C#;F#;Java;Javascript;Scala;Typescript;SQL","4 or more years","","I use it for research or academic work","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers;Russian Telegram group and Telegram news channel about F#","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Active Patterns;Backtick naming;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type providers;Units of measure","Agents (MailboxProcessor);Interactive development","FParsec
XML Provider","MSDN;F# books;Answers to Stack Overflow questions;Personal mentoring;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","","Open source projects;Scientific simulation programs, programs to integrate with measurement hardware","Utilities and tools;Non-commercial web site/app;Research/Teaching","SQL databases;XML files of 3D modeling software; Kitware VTK files","Windows;Linux","don't use in my official outsorce work, but officialy use at the research because nobody cares what language I'm using","Correctness: fewer bugs and less rework;More productive with fewer developers","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","Enhance tooling and interoperation with mainstream software (e.g. Entity Framework, ASP.NET, IIS, Visual Studio). Main troubles today are: EF and .NET Core + Visual Studio).","Lack of good tutorials/documentation;Not enough real-world code to learn from","Difficulty in troubleshooting problems;Cross-platform issues","Type Provider internals and community experience with writing them.","",""
"2017/05/02 9:29:19 am CET","5-10 years","Enterprise development","No","Intermediate","C#;F#","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers;FSharping meetup in Prague and our slack channel","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;Type inference;Type providers","Active Patterns;Units of measure","","F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts;F# for fun and profit by Scott Wlaschin","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Commercial products","Other","NoSQL database;Textual & flat file data;Event store/logs/Kafka;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","","I can't use my knowledge from C# or other imperative languages;Don't understand the compiler errors;Not enough real-world code to learn from","Working with C#-centric tooling;Difficulty in troubleshooting problems","","",""
"2017/05/02 9:29:30 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#","3-4 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Having fun again","Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;Type providers","Agents (MailboxProcessor);Units of measure","FsCheck
FSharp.Data","Links posted on social media such as Twitter;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with real-world examples and war stories","","Internal enterprise projects;Open source projects","Utilities and tools","NoSQL database;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for non-critical/non-production code","More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Installation process","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.","beginners get frustrated with syntax (like relevant white-space) especially since Visual Studio without power tools is of little help","",""
"2017/05/02 9:30:48 am CET","10 or more years","Consulting","No","Experienced","C#;F#;Go;Javascript","4 or more years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Immutability by default;Simple ""one liner"" type definitions for records and DUs","Agents (MailboxProcessor);Units of measure","","Links posted on social media such as Twitter;Reading F# code written by experts","Practical first, with theory introduced as needed","","","","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Data analysis/statistics","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","","","","",""
"2017/05/02 9:39:58 am CET","5-10 years","Enterprise development","Yes","Learner","C#;Javascript;Visual Basic","Less than two months","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites","Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom","","FAKE and Paket
Fable and Fable Elmish
","F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","Describing the many many many pitfalls one has when setting a project up - and the solutions to the vague error messages one often gets.","Internal enterprise projects","Utilities and tools","SQL databases;Textual & flat file data","Javascript as a platform","It's used unofficially","Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Installation process;Don't understand the compiler errors;Not enough real-world code to learn from","Difficulty in troubleshooting problems","The instability of the eco system - started a side project with Fable 0.7, tutorials where all for Fable 1.0. Upgraded to Fable 1.0 - other libraries stopped working. Had to tweak the project file manually to get it to work (and still have to tweak it again and again after every ""paket install"")","",""
"2017/05/02 9:40:19 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;Typescript","3-4 years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Static type constraints;Units of measure","Paket, FAKE, FParsec","Links and instructions from fsharp.org;F# books;F# bloggers;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories","I quite like it the way it is now!","Open source projects","Utilities and tools;Text analysis/language parsing","Textual & flat file data;Event store/logs/Kafka;Read-only data sources such as feeds","Windows;Mac","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Efficiency/Performance;Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","Get Microsoft to start marketing F# more as a real, first-class option","I can't use my knowledge from C# or other imperative languages","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","The lack of official endorsement from Microsoft. Tooling is largely being worked on by the community. With a more strong backing by Microsoft, those heroic open-source people working on F# would likely feel more appreciated.","",""
"2017/05/02 9:40:39 am CET","5-10 years","Commercial software/web development","No","Intermediate","F#;Haskell;Javascript;Ruby","1-2 years","","I use it at work or for other commercial uses","Linux","Emacs","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;Object expressions;Type inference;Units of measure","","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: Attending a talks as part of a conference;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects","Custom development/specialist markets","Data integration and EAI;Sensors","Windows;Javascript as a platform;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Efficiency/Performance;Easy concurrency with async and agents","Nothing. Everyone loves it.","","Lack of good tutorials/documentation","Not being part of the core .NET distribution","","",""
"2017/05/02 9:52:00 am CET","5-10 years","Commercial software/web development","Yes","Intermediate","C#;F#","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Object expressions;Quotations","FSharp.Data
FParsec","MSDN;F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app;Data analysis/statistics;Text analysis/language parsing","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;Lack of IDE features across C# and F# projects (find all references, go to definition etc)","","","Not being part of the core .NET distribution;Working with C#-centric tooling","","",""
"2017/05/02 9:53:43 am CET","2-5 years","Enterprise development","Yes","Learner","C#;F#;Typescript","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Computation expressions;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type providers","Agents (MailboxProcessor);Async workflows","","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Open source projects","Utilities and tools","SQL databases;Read-only data sources such as feeds","Windows;Azure","It's officially endorsed in my team for non-critical/non-production code","Correctness: fewer bugs and less rework;Faster time to market;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams;Technical reasons","","Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/02 9:55:16 am CET","5-10 years","Commercial software/web development","Yes","Experienced","C#;F#;Java;Javascript;PHP","1-2 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;Emacs;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Conciseness of code (I can see more at a glance);Great community;Learning functional programming in general;Speed of development","Active Patterns;Computation expressions;Immutability by default;The ""piping"" idiom;Type providers","Units of measure","","Links and instructions from fsharp.org;F# books;F# bloggers;Links mentioned in F# Weekly;Personal mentoring","Practical only. I don't care about theory.","Books or longer articles explaining full context;Recorded talks from a conference or user group","More short ""live coding"" videos","","Commercial products;Open source projects","Commercial web site/app","SQL databases","Javascript as a platform;Linux","I don't use F# at work","","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation","Lack of good wrappers for non-F# libraries","","",""
"2017/05/02 9:55:54 am CET","10 or more years","Commercial software/web development","Yes","Expert","C;Go;Ocaml/SML;Scheme/CL","1-2 years","","I use it for hobby or side projects","Mac;Linux","Emacs;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time)","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;The ""piping"" idiom;Type inference","Active Patterns;Integration with non-F# libraries;Object expressions;Object-oriented compatibility","","F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials","","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Data analysis/statistics","Textual & flat file data","","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","","","Installation process;Build environment and tooling is poorly documented for someone not from a .NET background","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Lack of a full module system means that code must be very differently structured between F# and OCaml or SML. This makes code sharing almost impossible, despite the very similar core language (wrt OCaml).

Even without code sharing, it's difficult to structure code idiomatically for someone who knows SML. It's not obvious what language features to use in place of functors for, for example, recursion schemas.","",""
"2017/05/02 9:57:54 am CET","5-10 years","Commercial software/web development","Yes","Intermediate","C;C#;C++","Less than a year","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);printf that is type checked;The ""piping"" idiom","","","Links and instructions from fsharp.org;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Open source projects","Non-commercial web site/app;Mobile apps","Event store/logs/Kafka","Windows;iOS;Android","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Lack of good tutorials/documentation;Don't understand the compiler errors;Not enough real-world code to learn from","Difficulty in troubleshooting problems","","",""
"2017/05/02 9:59:04 am CET","2-5 years","Commercial software/web development","No","Learner","C#","Less than a year","","Just tinkering","Windows","Visual Studio 2015 or newer","Twitter","Better domain modelling with records and unions;Having fun again;Learning functional programming in general","Async workflows;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type inference","","","MSDN;F# books;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories","","Commercial products","None - Just playing around","SQL databases;NoSQL database;Textual & flat file data","Windows;Azure","I don't use F# at work","","","","Lack of good tutorials/documentation;I can't use my knowledge from C# or other imperative languages","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems;Performance issues;Cross-platform issues","It needs significantly more support from Microsoft. UWP, .NET Core, .NET Native, proper documentation, better compatibility with C# (which actually means that they should evolve C# to match F# and not the other way around).

With the F# 4.1 there is .NET Core support finally, so maybe something great can finally start now, as the whole stack the runtime, the framework and the language are all open source and cross platform.","",""
"2017/05/02 10:03:00 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom","Active Patterns;Agents (MailboxProcessor);Computation expressions;Object expressions;Object-oriented compatibility;Quotations;Type providers","","F# books;F# bloggers","Theory first, to get a rigorous foundation","Books or longer articles explaining full context","More material with in-depth tutorials","","Internal enterprise projects;Open source projects","Utilities and tools;Custom development/specialist markets;Text analysis/language parsing","SQL databases;NoSQL database;Textual & flat file data","Windows;Azure","It's used unofficially","Domain modelling: making illegal states unrepresentable","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors","Lack of good wrappers for non-F# libraries","","",""
"2017/05/02 10:03:35 am CET","10 or more years","Consulting","No","Intermediate","C#;Javascript","2-3 years","","I use it for hobby or side projects","Windows;Mac;Linux","Sublime Text;VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Interactive development;Simple ""one liner"" type definitions for records and DUs;Type inference","Quotations;Units of measure","","F# books;F# bloggers;Links posted on social media such as Twitter","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools","NoSQL database;Textual & flat file data;Event store/logs/Kafka","Windows;Javascript as a platform;Linux;Amazon Web services","It's used unofficially","Domain modelling: making illegal states unrepresentable;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability","","Don't understand the compiler errors;Not enough real-world code to learn from","Difficulty in troubleshooting problems","","",""
"2017/05/02 10:06:14 am CET","10 or more years","Science or related","Yes","Intermediate","C#;F#;Python;R","4 or more years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Agents (MailboxProcessor);Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type inference","Quotations;Static type constraints;Units of measure","","MSDN;Links and instructions from fsharp.org;F# books;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Commercial products","Utilities and tools;Mainstream business & enterprise applications;Research/Teaching","SQL databases","Windows","It's used unofficially","Correctness: fewer bugs and less rework;Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft;No buy-in: There is lack of acceptance from other teams","","Better tooling, eg dotnet core","Working with C#-centric tooling","","",""
"2017/05/02 10:10:59 am CET","5-10 years","Consulting","No","Intermediate","C#;F#","3-4 years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Immutability by default;Quotations;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom","Object-oriented compatibility","Ionide, MBrace","Links posted on social media such as Twitter;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Data analysis/statistics","SQL databases;NoSQL database;Textual & flat file data","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","Nothing. Everyone loves it.","","Not enough real-world code to learn from","Not being part of the core .NET distribution","","",""
"2017/05/02 10:15:01 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;Javascript;Typescript","I was using F# but have stopped","Tooling for .NET Core wasn't ready.","I use it for hobby or side projects","Windows;Linux","VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Learning functional programming in general","Computation expressions;Immutability by default","Active Patterns;Agents (MailboxProcessor);Quotations","Not sure","MSDN;F# books;F# bloggers","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials","Don't know.","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases;Textual & flat file data","Windows;Mac;Linux","I don't use F# at work","","Hiring: They worry about not being able to find F# developers","Grow","Lack of good tutorials/documentation;Keep up with the rest of .NET","Not being part of the core .NET distribution;Difficulty in troubleshooting problems","","",""
"2017/05/02 10:19:14 am CET","5-10 years","Commercial software/web development","Yes","Intermediate","C#;F#;Javascript","1-2 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide);OmniSharp","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Backtick naming;Computation expressions;Immutability by default;printf that is type checked;Quotations;The ""piping"" idiom;Type providers;Units of measure","Active Patterns;Interactive development;Object expressions;Object-oriented compatibility","Type providers
Suave
FSharp.Data
Sqlprovider
","Structured training/workshops;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","Internal enterprise projects","Commercial web site/app;Non-commercial web site/app","SQL databases;NoSQL database;Textual & flat file data","Windows;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;Too Microsoft-centric: They think it is too closely linked to Microsoft;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Don't understand the compiler errors;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 10:23:58 am CET","5-10 years","Consulting","Yes","Experienced","C#;F#;Javascript;Typescript;Elm","2-3 years","","I use it for hobby or side projects","Linux","VS Code (with Ionide);Rider","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Type inference","Active Patterns;Interactive development","","Links and instructions from fsharp.org;F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More short ""live coding"" videos;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","Open source projects","Utilities and tools;Games;Commercial web site/app;Non-commercial web site/app","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka","Windows;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","I can't use my knowledge from C# or other imperative languages","Working with C#-centric tooling","","",""
"2017/05/02 10:24:57 am CET","10 or more years","Financial services or similar","Yes","Experienced","C#;F#","4 or more years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom","Agents (MailboxProcessor);Quotations;Units of measure","Forge 
Ionide 
Paket","Write code","Practical only. I don't care about theory.","Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information","","Internal enterprise projects","Custom development/specialist markets;Financial services;Data analysis/statistics","SQL databases;NoSQL database;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.","Tooling too closely linked to MS visual studio. Always trailing C# in Microsoft priorities. ","",""
"2017/05/02 10:25:05 am CET","5-10 years","Enterprise development","Yes","Learner","C#;C++;F#","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# bloggers","Having fun again;Learning functional programming in general","Agents (MailboxProcessor);Async workflows;Immutability by default;The ""piping"" idiom;Type inference;Type providers","Interactive development;Units of measure","Suave","F# bloggers;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Commercial products","Other","Event store/logs/Kafka;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","","Difficulty in troubleshooting problems","","",""
"2017/05/02 10:32:28 am CET","10 or more years","Enterprise development","Yes","Learner","C#","Less than a year","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;The ""piping"" idiom;Units of measure","Quotations","","F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around;Utilities and tools","Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable","No buy-in: There is lack of acceptance from other teams;Programmers only know C#","","Don't understand the compiler errors;Ordering of files","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","C# is not so much worse than F#","",""
"2017/05/02 10:32:30 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#;Haskell;PureScript","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;Type inference","Quotations;Type providers;Units of measure","","MSDN;Links and instructions from fsharp.org","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials","","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications","","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","","","","Less sophisticated tools for refactoring, etc.","No type classes andhigher-kindes types.","",""
"2017/05/02 10:41:31 am CET","2-5 years","Consulting","No","Intermediate","C#;F#;Javascript","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Object expressions;Static type constraints","Visual Studio
FSI
Script files
Paket","F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","Something like F# Koans running in a browser would be great for new learners because there would be no set-up barrier.

Googling for ""try f# online"", the first site is tryfsharp.org, which requires Silverlight, so basically it is not available for most people to use. This site should be updated to run without Silverlight or taken down. The second site is tryfs.net which doesn't seem to work at the moment. These search give a bad first impression of the language and make it look like it's been abandoned!","Internal enterprise projects;Commercial products;Open source projects","Mainstream business & enterprise applications;Commercial web site/app","SQL databases;Textual & flat file data","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market","Nothing. Everyone loves it.","","","Difficulty in troubleshooting problems","F#'s online presence makes it seem a bit abandoned. It's hard to try it out in your browser. The main website and first Google result for ""F#"", fsharp.org, is not the best source of information about the language, unlike with Clojure, Elm and Go. And compared to those sites, it lacks polish.

This non-Microsoft presence of F# would need to be improved if people are to trust that it's a valid option outside of the MS ecosystem, which is where it has the biggest potential for growth.","",""
"2017/05/02 10:41:32 am CET","10 or more years","Commercial software/web development","Yes","Expert","F#","4 or more years","","I use it at work or for other commercial uses","Windows;Mac;Linux;Android, iOS (","Visual Studio 2015 or newer;Emacs;Cloudsharper","Twitter;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs;Type inference;Type providers","Units of measure","","","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Custom development/specialist markets;Commercial web site/app;Non-commercial web site/app;Mobile apps","SQL databases;NoSQL database;Textual & flat file data;Read-only data sources such as feeds","Windows;Mac;Javascript as a platform;Linux;iOS;Android;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","Nothing. Everyone loves it.","","Lack of good tutorials/documentation","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/02 10:42:52 am CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;F#;Haskell","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development;Functional but can be tweaked to get high performance;good tools: debugging, refactoring, etc.","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Backtick naming;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Object expressions;printf that is type checked;Quotations;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Units of measure","","MSDN;F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Mainstream business & enterprise applications;Research/Teaching;Text analysis/language parsing","Textual & flat file data;Not doing data centric apps","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","Stronger marketing message from Microsoft itself would probable have the most important impact.","","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;lack of higher-kinded types","lack of higher-kinded types","",""
"2017/05/02 10:45:57 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;Go;Javascript","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Vim","HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;printf that is type checked;The ""piping"" idiom;Type inference;Type providers","Units of measure","","MSDN;Links and instructions from fsharp.org;F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information","","Internal enterprise projects","Utilities and tools","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","","Not being part of the core .NET distribution","","",""
"2017/05/02 11:00:04 am CET","5-10 years","Enterprise development","Yes","Learner","C#;Typescript","Less than two months","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","none yet","Active Patterns;Async workflows;Easy integration with other .NET libraries;Units of measure","Type providers","","F# books;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","more realworld examples (bigger apps) instead of showing how short you can make a fib function","Not enough real-world code to learn from","","showing realword apps in f#. showing how f#, can improve c# apps","",""
"2017/05/02 11:00:44 am CET","5-10 years","Data or analytics related","Yes","Intermediate","C#;F#;Java;Scala","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Interactive development;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Async workflows;Units of measure","","MSDN;Answers to Stack Overflow questions","Theory first, to get a rigorous foundation","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Games","","Windows;Mac","I don't use F# at work","","","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 11:03:00 am CET","2-5 years","Enterprise development","Yes","Learner","C#","Less than two months","","I use it for hobby or side projects","Mac","VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Backtick naming;Immutability by default;Interactive development;The ""piping"" idiom;Type inference;Type providers","","Ionide","Links and instructions from fsharp.org;F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","Not applicable. None of my F# code is used by other people","None - Just playing around;Commercial web site/app;Non-commercial web site/app","SQL databases","Azure","I don't use F# at work","","","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Lack of F# friendly libraries;Difficulty in troubleshooting problems","Having to move files up and down in VS code.","",""
"2017/05/02 11:09:31 am CET","10 or more years","Commercial software/web development","No","Intermediate","F#","4 or more years","","I use it at work or for other commercial uses","Windows;Mac","VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Type inference","Quotations;Static type constraints","FSharp.Data","F# books;F# bloggers;Links posted on social media such as Twitter","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day)","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Commercial products;Open source projects","Utilities and tools;Commercial web site/app","SQL databases;NoSQL database","Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Easy concurrency with async and agents;Better for solving complex problems","Nothing. Everyone loves it.","","I can't use my knowledge from C# or other imperative languages","Lack of F# friendly libraries;Working with C#-centric tooling","","",""
"2017/05/02 11:12:14 am CET","5-10 years","engineering","Yes","Learner","F#;Python","Less than two months","programming is not needed in my day to day job and it's more like a hobby. currently am too busy with other work and life in general .. no time to do coding.","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;F# bloggers","Conciseness of code (I can see more at a glance);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Interactive development;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Async workflows;Computation expressions;Quotations","","F# books;F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","None - Just playing around;Utilities and tools;Data analysis/statistics;Text analysis/language parsing","SQL databases;Textual & flat file data","Windows","It's used unofficially","Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Not enough real-world code to learn from","Not being part of the core .NET distribution","","",""
"2017/05/02 11:13:12 am CET","10 or more years","Commercial software/web development","Yes","Learner","C#;Python","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide);JetBrains Rider","Twitter;fsharp channel on Slack","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again","Computation expressions;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness)","Agents (MailboxProcessor);Units of measure","","F# books;F# bloggers","Practical first, with theory introduced as needed","","More interactive tutorials (e.g. like the F# Koans)","","Open source projects","Non-commercial web site/app;Other","NoSQL database","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","","Installation process","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Lack of .NET Core and UWP support","No UWP support - I want to write ModernUI apps in F#!","",""
"2017/05/02 11:15:55 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#;Javascript;Rust","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Vim;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type providers","Agents (MailboxProcessor);Interactive development;Quotations;Units of measure","websharper
fable
","Links and instructions from fsharp.org;F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information","","","Custom development/specialist markets;Mainstream business & enterprise applications;Commercial web site/app","SQL databases;SharePoint","Windows;Javascript as a platform","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","I can't use my knowledge from C# or other imperative languages;Don't understand the compiler errors","Not being part of the core .NET distribution","","",""
"2017/05/02 11:16:26 am CET","10 or more years","Commercial software/web development","No","Learner","C#;Typescript","Less than a year","","I use it for hobby or side projects","Windows","VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Async workflows;Computation expressions;Immutability by default;Interactive development;Type inference;Type providers","Agents (MailboxProcessor);Integration with non-F# libraries;Quotations","","F# books;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Utilities and tools;Algorithm-heavy business applications (non-financial);Financial services;Machine learning;Mainstream business & enterprise applications;Data analysis/statistics;Text analysis/language parsing","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka","Windows","I don't use F# at work","","Technical reasons","","Not enough real-world code to learn from","","","",""
"2017/05/02 11:19:10 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;Swift","2-3 years","","I use it for hobby or side projects","Windows;Mac;Linux","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Immutability by default;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Async workflows;Computation expressions;Integration with non-F# libraries;Quotations;Type providers","","F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Personal mentoring;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","Open source projects","Utilities and tools;Text analysis/language parsing","Not doing data centric apps","Windows;Mac;Linux;Azure;Amazon Web services","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 11:25:31 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;Javascript","Less than a year","","Just tinkering","Windows;Linux","Visual Studio 2015 or newer","HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Active Patterns;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom","Agents (MailboxProcessor);Integration with non-F# libraries;Object-oriented compatibility","","Links and instructions from fsharp.org;F# bloggers;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information","","","None - Just playing around","Not doing data centric apps","Windows;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 11:25:54 am CET","5-10 years","Commercial software/web development","No","Learner","C#;F#;Javascript","2-3 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations;Units of measure","Suave
Ionide
Paket
Fake","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects","Mainstream business & enterprise applications","SQL databases","Windows","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","","Difficulty in troubleshooting problems","","",""
"2017/05/02 11:41:24 am CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;F#","3-4 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Units of measure","Quotations","ExtCore
Paket
FAKE
FsCheck
Deedle
FsLab","F# bloggers;Answers to Stack Overflow questions;Writing F# code","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More podcasts and other audio-only material","Installation, building, package dependency that ""just works"" on all platforms.","Commercial products;Open source projects","None - Just playing around;Utilities and tools;Algorithm-heavy business applications (non-financial);Non-commercial web site/app;Data analysis/statistics","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems;Programmer happiness","No buy-in: There is lack of acceptance from other teams;benefits vs. cost to rewrite","Comparison of C# and F# web stacks (ASP.NET + EntityFramework + WCF vs. Fable + Suave/Freya + ???).
Go-to definition, find-all support across C#-F# projects in Visual Studio.","Installation process;Build system, package issues.","Lack of good wrappers for non-F# libraries;Difficulty in troubleshooting problems;Cross-platform issues","Too much reliance on Microsoft build system.
Problems with FSharp.Core library and other packages (missing binding redirects problems).
Too much focus on compatibility with C# and rest of .NET when considering new features.","",""
"2017/05/02 11:44:30 am CET","10 or more years","Commercial software/web development","No","Intermediate","C#;F#;Javascript","4 or more years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Object expressions;Type inference;Type providers","Static type constraints;Units of measure","FSharp.Data
FSharp.Data.TypeProviders
FsCheck
Visual F# PowerTools","Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app;Text analysis/language parsing","SQL databases;NoSQL database;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Difficulty in troubleshooting problems","","",""
"2017/05/02 11:48:50 am CET","10 or more years","Enterprise development","No","Learner","C#","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Async workflows;Backtick naming;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference;Type providers;Units of measure","","","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","","","","Not applicable. None of my F# code is used by other people","Utilities and tools","SQL databases;Textual & flat file data","Windows","It's used unofficially","Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","","","",""
"2017/05/02 11:56:41 am CET","10 or more years","Commercial software/web development","No","Expert","C#;F#;Typescript","Less than a year","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers;Units of measure","Agents (MailboxProcessor);Units of measure","Chessie
FsCheck
Paket","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Personal mentoring;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Commercial products","Games","Event store/logs/Kafka;Data integration and EAI","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages","Add better tooling support","","","tooling","",""
"2017/05/02 11:56:50 am CET","5-10 years","Commercial software/web development","Yes","Intermediate","C#","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Easy integration with other .NET libraries;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;Type inference","Active Patterns;Agents (MailboxProcessor);Async workflows;Computation expressions;Quotations;Static type constraints;Units of measure","","F# bloggers;Links posted on social media such as Twitter","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools","SQL databases;NoSQL database","Windows;Linux","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","","Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 12:02:38 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;F#;Javascript;Perl","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Xamarin;Atom (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;Type inference;Units of measure","Active Patterns;Agents (MailboxProcessor);Object expressions;Object-oriented compatibility;Quotations;Static type constraints;Type providers","","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","Focusing more on the elementary. Thinks like recursion, data-types, immutability and how to separate side-effects. Often it is enough to introduce basic concepts like map, apply, bind and fold.

Those basics are often enough and really flexible, and often already a lot more useful as a lot of OO concepts that people learned (or didn't learned) in comparison.","Not applicable. None of my F# code is used by other people","Utilities and tools;Games","Textual & flat file data","Windows;Linux","I don't use F# at work","","","","Lack of good tutorials/documentation","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries","The idea of .Net to create a single platform for all kind of languages doesn't really work. You theoretically can use any kind of library not written in F# like C# and so on. But working in this OO style with mutability, null and exceptions feels alien in F#. 

So in practice you either want to use an F# library or you must write an F# wrapper. The same is true in reverse. To use F# code from C# you also must provide OO wrappers.

Its better to write a wrapper instead of having no library available and rewrite a whole library, but it is still a different ecosystem that might lack support.","",""
"2017/05/02 12:03:18 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;F#;Java;Visual Basic","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Speed of development","Active Patterns;Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);Type providers","Static type constraints","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Personal mentoring","Theory first, to get a rigorous foundation","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","The documentation of F# should be more detail and concise, but it should have more sample codes.","Commercial products;Open source projects","Financial services;Mainstream business & enterprise applications","SQL databases;Read-only data sources such as feeds","Windows;Android","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;Faster time to market;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","Please stop evangelizing F# with wrong impression that F# is only for finance/mathematical problems","Lack of good tutorials/documentation;Installation process","Not being part of the core .NET distribution;Lack of F# friendly libraries;not part of .NET Native","No support for covariance/contravariance","This survey is enough.","Please improve documentations and brings more code samples"
"2017/05/02 12:05:06 pm CET","10 or more years","Consulting","No","Intermediate","F#;Javascript;R","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2012 or 2013","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Backtick naming;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Async workflows;Object expressions;Units of measure","FSharp.Data","F# books;F# bloggers","","","","","","","","","","","","","","","","",""
"2017/05/02 12:05:21 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#;Javascript","I was using F# but have stopped","","I use it for hobby or side projects","Windows;Mac;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Backtick naming;Computation expressions;Immutability by default;Object expressions;Quotations;The ""piping"" idiom;Type inference;Type providers;Units of measure","","","F# books;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Personal mentoring","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","","","Open source projects","Utilities and tools","SQL databases;NoSQL database;Textual & flat file data","Windows;Mac;Linux;Azure","I don't use F# at work","","","","Installation process","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 12:07:24 pm CET","5-10 years","Commercial software/web development","Yes","Beginner","C#;Javascript;PHP;Typescript","Less than two months","I am using other languages for both my primary job and side projects, so I guess I didn't have enough free time to use it.","Just tinkering","Windows","Visual Studio 2015 or newer","Twitter","Having fun again;Learning functional programming in general","Computation expressions;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom","","","Links and instructions from fsharp.org;F# books;Links posted on social media such as Twitter;Videos (e.g. Community for F#)","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases;Textual & flat file data","","I don't use F# at work","","Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","","I can't use my knowledge from C# or other imperative languages","","","",""
"2017/05/02 12:07:40 pm CET","5-10 years","Commercial software/web development","Yes","Experienced","C#;F#;Javascript;Typescript","3-4 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;Jetbrains Rider <3","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community","Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Computation expressions;Object expressions;Quotations;Units of measure","","MSDN;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Theory first, to get a rigorous foundation","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","Commercial products;Open source projects","Utilities and tools;Commercial web site/app","SQL databases;Event store/logs/Kafka","Windows;Javascript as a platform","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams;idiots.","","Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Getting over FP thinking","","",""
"2017/05/02 12:20:04 pm CET","10 or more years","Enterprise development","Yes","Learner","C#;Javascript;Typescript;Visual Basic","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;VS Code (with Ionide)","F# Weekly;fsharp channel on Slack;F# bloggers;Google+","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions","Object expressions;Object-oriented compatibility","Deedle
Ionide
Paket
FsReveal","F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Games;Data analysis/statistics;Text analysis/language parsing","SQL databases","Windows;Javascript as a platform","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed","","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Tooling","",""
"2017/05/02 12:39:55 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#","2-3 years","","I use it at work or for other commercial uses","Windows;Linux","VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;Simple ""one liner"" type definitions for records and DUs;Type inference","Agents (MailboxProcessor);Interactive development;Type providers","Ionide","","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with real-world examples and war stories","","Internal enterprise projects;Open source projects","Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications;Data analysis/statistics","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka","Javascript as a platform;Linux;Google Cloud","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors","Lack of F# friendly libraries;Less sophisticated tools for refactoring, etc.;Performance issues","","",""
"2017/05/02 12:49:54 pm CET","10 or more years","Commercial software/web development","No","Learner","Javascript;Python","Less than a year","","Just tinkering","Windows","Visual Studio 2015 or newer","Twitter","Great community;Having fun again","The ""piping"" idiom","","","Links posted on social media such as Twitter;Answers to Stack Overflow questions;Personal mentoring","Practical first, with theory introduced as needed","","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","Less use of buzzwords","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","Lack of support from Microsoft","",""
"2017/05/02 12:53:04 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows","VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","","Fable","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","Not applicable. None of my F# code is used by other people","Commercial web site/app;Data analysis/statistics","SQL databases;NoSQL database;Textual & flat file data","Azure","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed","","Don't understand the compiler errors;Unpleasant interactions with the community","Working with C#-centric tooling;Difficulty in troubleshooting problems","","",""
"2017/05/02 12:55:12 pm CET","5-10 years","Commercial software/web development","No","Learner","C#;Python;R","Less than a year","Tooling is nowhere near as good as C# or Python.","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Type providers;Units of measure","Quotations","Does F# notebooks count?","F# books","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","Tutorials discussing more practical matters, probably ones that produce work products that reflect what a ""regular"" developer would produce.","Internal enterprise projects;Commercial products","Utilities and tools;Commercial web site/app","SQL databases;NoSQL database;Analytics","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;Tooling is lacking","Better tooling would be awesome. Sure we can do things ""manually"", but tools like Resharper in C# may have rotted our brains but it does make us many times more productive.

Most developers are lazy.","Lack of good tutorials/documentation;Don't understand the compiler errors;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 12:55:59 pm CET","10 or more years","Data or analytics related","No","Learner","C#;Java;PHP","Less than a year","","I use it for hobby or side projects","Windows","VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type inference;Units of measure","Quotations;Type providers","","Links and instructions from fsharp.org;F# books;F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products","Mainstream business & enterprise applications;Commercial web site/app;Mobile apps;Data analysis/statistics","SQL databases;NoSQL database;Event store/logs/Kafka;Data integration and EAI","Windows;Linux;iOS;Android","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Fad: They have concerns over long term language viability","","Installation process;Not enough real-world code to learn from","Working with C#-centric tooling;Difficulty in troubleshooting problems","","",""
"2017/05/02 1:04:44 pm CET","2-5 years","Enterprise development","Yes","Intermediate","C#;Javascript;Typescript","Less than a year","","Just tinkering","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Interactive development;The ""piping"" idiom;Type inference;Type providers;Units of measure","Quotations","Ionide
Vscide","MSDN;Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly","Theory first, to get a rigorous foundation","Books or longer articles explaining full context","More material with in-depth tutorials","Having a getting started with F# showing the configuration required to run cross platform and deployment would be a nice start.","Not applicable. None of my F# code is used by other people","Utilities and tools","Textual & flat file data","Windows;Mac;Linux;iOS;Android;Azure;Raspberry Pi","It's used unofficially","More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed","","Installation process","Not being part of the core .NET distribution;Working with C#-centric tooling","Being functional is both a strength and a weakness since most people are afraid of functional programming.","",""
"2017/05/02 1:05:23 pm CET","5-10 years","Enterprise development","No","Experienced","C#;F#;Python","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Vim","Twitter;F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Active Patterns;Immutability by default;The ""piping"" idiom","Object-oriented compatibility;Quotations","FAKE
Paket","F# books;F# bloggers;Links mentioned in F# Weekly;Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material","","Internal enterprise projects;Commercial products","Custom development/specialist markets;Games","SQL databases;NoSQL database;Event store/logs/Kafka","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","Promote the language more.
Show more success stories.
Show more examples of conversions from C# to F#.","Don't understand the compiler errors","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","For targeting C# developers, need to improve the tooling to be close to the C# one.","",""
"2017/05/02 1:09:15 pm CET","5-10 years","Enterprise development","Yes","Experienced","C#;F#;Java;Javascript;Objective-C;Swift","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Atom (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;No dependency cycles;Object expressions;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom","Active Patterns;Agents (MailboxProcessor);Quotations;Type providers;Units of measure","FsCheck
Suave
Fable","F# books;F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts;fsharpforfunandprofit","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with real-world examples and war stories","","Internal enterprise projects;Commercial products","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka","Windows;Azure;Amazon Web services","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","Nothing. Everyone loves it.","","Installation process;Don't understand the compiler errors;Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems;Performance issues","","",""
"2017/05/02 1:21:20 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;F#;Javascript","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;VS Code (with Ionide)","Twitter;F# Weekly","Learning functional programming in general","Easy integration with other .NET libraries;Interactive development;The ""piping"" idiom","Units of measure","Fake","F# books","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","step through real world examples","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial)","SQL databases;Textual & flat file data","Windows","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Working with C#-centric tooling","","",""
"2017/05/02 1:25:35 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;Visual Basic","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type providers","Units of measure","","F# books;F# bloggers;Structured training/workshops;fsharpforfunandprofit","Practical first, with theory introduced as needed","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Algorithm-heavy business applications (non-financial);Financial services","SQL databases;NoSQL database","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 1:27:17 pm CET","5-10 years","Commercial software/web development","No","Learner","C#;F#","Less than a year","Please refer my post here https://dsaravanan.wordpress.com/2017/05/02/my-views-on-f/","I am using it for my project but not at a greater level, some reusable components alone","Windows","Visual Studio 2015 or newer","Twitter","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general;Speed of development","Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom","Async workflows;Quotations;Units of measure","Database providers","MSDN;F# bloggers","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","More real world samples as we have in C#","Internal enterprise projects;Commercial products","Utilities and tools","Textual & flat file data","Windows","It's used unofficially","Correctness: fewer bugs and less rework;More productive with fewer developers;Efficiency/Performance","Training: They are worried about getting non-F# developers up to speed","If there are some groups in Chennai( India), I can participate, unfortunately I am not born in USA 
:(","Don't understand the compiler errors;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems;Cross-platform issues","","Thanks for getting my views, with little help, I think I can shine and do better. We don't have many/ any company that uses F# in their mainstream",""
"2017/05/02 1:34:25 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;Javascript","1-2 years","","Just tinkering","Windows;Mac","Visual Studio 2012 or 2013;VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Async workflows;Computation expressions;Integration with non-F# libraries;Object expressions;Object-oriented compatibility;Quotations;Static type constraints;Units of measure","Fake
","F# bloggers;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Not applicable. None of my F# code is used by other people","Utilities and tools","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","","Don't understand the compiler errors;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems;Cross-platform issues","","",""
"2017/05/02 1:39:47 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#;Javascript;Ruby;Typescript","Less than a year","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;No dependency cycles;The ""piping"" idiom;Type inference;Type providers","","","Answers to Stack Overflow questions;Personal mentoring","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials","","Internal enterprise projects;Commercial products","Algorithm-heavy business applications (non-financial)","SQL databases;Textual & flat file data","Windows;Mac;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Efficiency/Performance;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Broken .NET Core ecosystem","","Lack of good tutorials/documentation","Not being part of the core .NET distribution","","",""
"2017/05/02 1:51:54 pm CET","10 or more years","Commercial software/web development","","Expert","F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development","Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;Quotations;Type inference","Agents (MailboxProcessor);Interactive development;Units of measure","","F# books;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","","","Commercial products","Utilities and tools;Mainstream business & enterprise applications","SQL databases","Windows;Mac;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market","Nothing. Everyone loves it.","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling","","",""
"2017/05/02 1:54:43 pm CET","10 or more years","Enterprise development","Yes","Experienced","C;C#;C++;F#;Java;Ruby","3-4 years","","some part at work is F#, and oss for hobby","Windows;Linux","Visual Studio 2015 or newer;Vim;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community","Algebraic types (inc discriminated unions and tuples);Async workflows;Backtick naming;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference;Units of measure","Agents (MailboxProcessor);Quotations","Argu
FSharp.Data
","Personal mentoring;writing code","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More short ""live coding"" videos","Up to date docs about install scenario in various os
Some docs about common scenario (console app, lib)
Up to date templates
Docs about current state of the art in .NET ecosystem
Docs about where are we going, so what's next and status","Internal enterprise projects;Open source projects","Utilities and tools;Custom development/specialist markets","SQL databases;Textual & flat file data","Windows;Mac;Linux","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability;Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","Dunno, probably things should work ootb after install in common scenario at least","Installation process","Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Cross-platform issues","install and is too focused on windows VS scenario.
","",""
"2017/05/02 2:05:25 pm CET","5-10 years","Commercial software/web development","Yes","Intermediate","C#;F#;Javascript","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type providers","Object expressions","","Links and instructions from fsharp.org;F# books;F# bloggers;Structured training/workshops","","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Utilities and tools;Commercial web site/app;Non-commercial web site/app","SQL databases;Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed","","","Not being part of the core .NET distribution;Working with C#-centric tooling","","",""
"2017/05/02 2:11:18 pm CET","10 or more years","Financial services or similar","No","Learner","C;F#;Haskell;Ocaml/SML;Mathematica","Less than a year","","I use it for hobby or side projects","Windows;Android","Visual Studio 2015 or newer;Xamarin;Vim","F# Weekly;HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Units of measure","Agents (MailboxProcessor)","","MSDN;Links and instructions from fsharp.org;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information","Converting C# examples in MSDN to F# (mostly inexistent)","Not applicable. None of my F# code is used by other people","Financial services;Mobile apps;Research/Teaching","SQL databases;Textual & flat file data","Windows;Android","It's used unofficially","Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","","","Don't understand the compiler errors;Not enough real-world code to learn from","Working with C#-centric tooling","Not having enough attention of MS/Xamarin (tools have bugs that only show with F#)","",""
"2017/05/02 2:13:46 pm CET","10 or more years","Enterprise development","Yes","Experienced","F#;Pascal","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;fsharp channel on Slack;Github","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance;Very fast time to market ","Immutability by default;Interactive development;The ""piping"" idiom;Type inference","Active Patterns;Object-oriented compatibility;Quotations","Fable 
Elmish","F# books;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Theory first, to get a rigorous foundation","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","MOOCs","Show more elmish","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Custom development/specialist markets;Mainstream business & enterprise applications;Mobile apps","SQL databases;NoSQL database","Windows;Mac;Javascript as a platform;Linux;iOS;Android;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","","","Installation process;Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling","","",""
"2017/05/02 2:22:17 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;C++;F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Quotations;Static type constraints;Units of measure","Visual F# Power Tools
Ionide","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos","Stop people learning object oriented in the first place, it twists your mind into a limited way of thinking.","Commercial products","Utilities and tools;Custom development/specialist markets;Mainstream business & enterprise applications","Textual & flat file data;Not doing data centric apps","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","Better visual studio tooling, having Visual Studio install it by default with other .net languages.  Microsoft using it themselves a bit more and telling people.","Don't understand the compiler errors","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/02 2:24:36 pm CET","10 or more years","Operation research analyst","Yes","Intermediate","F#;SQL/SAS","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Interactive development;The ""piping"" idiom;Type inference;Units of measure;No need to compile after code change with REPL","Object expressions;Object-oriented compatibility","F# interactive
Fsharp charting
Xplot
Mant numeric","F# books;Fsharp for fun and profit","Theory first, to get a rigorous foundation","Books or longer articles explaining full context","More material with real-world examples and war stories","Have operation reaserch (linear programming) example.
have a good algorithmic, graph theory librairies","Internal enterprise projects","Algorithm-heavy business applications (non-financial);Data analysis/statistics","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","Have a visibility as Python or R.","","Lack of good wrappers for non-F# libraries","Not endorse enought by Microsoft for math/algorithmic application.","",""
"2017/05/02 2:45:24 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;Javascript","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Object-oriented features (inc. C# compatibility, conciseness);printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type providers","Active Patterns;Agents (MailboxProcessor);Async workflows;Computation expressions;Interactive development;Units of measure","","F# bloggers;Links posted on social media such as Twitter","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","","","Open source projects","Games;Non-commercial web site/app","Textual & flat file data","Windows","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","too much empasize on math","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Working with complex data structures + immutability generates a lot of boilerplate code - lenses need to be included in future versions of F#. Also expression for arguments declaration and lambda declaration is simpler in C#.","",""
"2017/05/02 2:50:06 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;F#;Javascript;Typescript","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general","Immutability by default;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor)","FSharp.Data
Paket
Suave","F# books;F# bloggers;Links posted on social media such as Twitter","Theory first, to get a rigorous foundation","In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Utilities and tools;Machine learning","SQL databases;Textual & flat file data","Windows","It's used unofficially","","Hiring: They worry about not being able to find F# developers","","Lack of good tutorials/documentation","Working with C#-centric tooling","","",""
"2017/05/02 2:52:13 pm CET","10 or more years","Enterprise development","Yes","Learner","C#","Less than two months","","Just tinkering","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;The ""piping"" idiom","Agents (MailboxProcessor);Integration with non-F# libraries","ionide","","Practical first, with theory introduced as needed","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","Better tooling and clarity around project management: I have lots of doubts regarding things like fake/paket/nuget, json/fsproj project/.net core together with vs code/atom/visual studio decisions. Some things work great in vs code, some with full visual studio etc.","Not applicable. None of my F# code is used by other people","Utilities and tools;Text analysis/language parsing","SQL databases","Windows;Linux;Raspberry Pi","I don't use F# at work","Domain modelling: making illegal states unrepresentable;More productive with fewer developers;Better for solving complex problems","Nothing. Everyone loves it.","","Not enough real-world code to learn from","Not being part of the core .NET distribution;.net core have f# after c#","There is already lots of code written in c#... In other words the models already exist and f# main advantage is around building great business models","",""
"2017/05/02 3:30:20 pm CET","10 or more years","Commercial software/web development","No","Experienced","C#;F#","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Speed of development;Scriptability","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;Interactive development;Object expressions;Type inference;Type providers;Units of measure","","Fsharp.data
Fake
Paket
Sql type providers (easy to migrate existing apps)","F# bloggers;Personal mentoring;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with real-world examples and war stories;More short ""live coding"" videos","I don't know","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Data analysis/statistics;Text analysis/language parsing","SQL databases;NoSQL database;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Faster time to market;Efficiency/Performance;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much","Not telling that f# is better than csharp... Just demonstrate how it is easy to do it!","Docs is accessible but a quite obsolete","Working with C#-centric tooling;Stacktrace with computation expression","","",""
"2017/05/02 3:31:31 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","F#;Python","Less than a year","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;Emacs","HN, Reddit and other programming news sites","Correctness (no nulls, it works first time)","Computation expressions","Agents (MailboxProcessor);Async workflows;Quotations;Units of measure","","F# books;Personal mentoring","Theory first, to get a rigorous foundation","Books or longer articles explaining full context","More material with real-world examples and war stories","","Internal enterprise projects","Mainstream business & enterprise applications;Commercial web site/app","SQL databases;Textual & flat file data","Windows;Azure","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework","Nothing. Everyone loves it.","","Not all libraries are cross platform.","Cross-platform issues","","",""
"2017/05/02 3:51:03 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","C;C#;C++;F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations","","F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions","Practical only. I don't care about theory.","","","","Commercial products","Custom development/specialist markets","Not doing data centric apps","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers","","Don't understand the compiler errors;Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 3:57:38 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows;Mac;Linux;Android and iOS","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;printf that is type checked;The ""piping"" idiom;Type inference","Quotations","","F# books;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories","","Commercial products;Open source projects","Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications","SQL databases;NoSQL database;Event store/logs/Kafka","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents","Nothing. Everyone loves it.","","Tooling was awful but getting better and better :)","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","F# is great as well as the community. MS should put more focus on it as a first class citizen. Lots of people put equals sign between .NET and C# and that's bad. Unfortunately MS is not helping to change this.","",""
"2017/05/02 4:12:12 pm CET","10 or more years","Enterprise development","No","Beginner","C#;Javascript","1-2 years","","I use it for hobby or side projects","Windows;Mac;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Async workflows;Type providers;Units of measure","Funscript/Fable
Ionide

","F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","I think first there should be easily accessible catalogs of books/articles with real life examples dedicated to people without CS degree/poor programming knowledge along with similar material for people with background. Links to these catalogs should be right where people download tools like dotnet core sdk/visual studio. Also it would be nice to have more practical video tutorials with tool usage (e.g. VS Code). Also there is website: f# for fun and profit. I really liked it. Materials like the ones there should be easily accessible for people with C# experience.","Not applicable. None of my F# code is used by other people","Utilities and tools;Other","SQL databases;Read-only data sources such as feeds","Windows;Mac;Javascript as a platform;Linux","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","I think the greatest issue is lack of newcomers which like languages like F#. As for me the main issue is much lower popularity in comparison with C#/Java. What really can community do is to show practical benefits. Teach people how to solve real issues with F# easily. Including the ones which do not math/finance/data related. E.g. UI, games, building APIs.","Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.",".net community is obsessed with C#. C# blindly copies some features from F#. Lots of people want fearures like record types in C# instead of using F# right now. It means that we have lots of libraries designed for C# only. Once i had issue with NancyFx framework due to dynamics, had to add some nuget package manually. It is sad that authors haven't initially thought about possibility of such use case, etc.","",""
"2017/05/02 4:12:36 pm CET","5-10 years","Commercial software/web development","No","Beginner","C#","Haven't really used it yet","","Just tinkering","Windows","Visual Studio 2015 or newer","","Having fun again","Easy integration with other .NET libraries","","","Structured training/workshops;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","Not enough real-world code to learn from","Working with C#-centric tooling","","",""
"2017/05/02 4:20:44 pm CET","5-10 years","Consulting","No","Learner","C#","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;Interactive development;No dependency cycles;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Integration with non-F# libraries;Object expressions;Object-oriented compatibility;Quotations;Type providers;Units of measure","WebSharper
Ionide
FsUnit

","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts;F# for fun and profit","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","More real-life ""business"" implementations available to convince people F# is not about maths only.","Not applicable. None of my F# code is used by other people","None - Just playing around","Textual & flat file data","Windows;Linux;Azure","Data & API exploration ","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;lack of information about tooling for large scale products ","More communication about large scale products built with F#","Not enough real-world code to learn from;lack of unified tooling ?","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Lack of real-life samples to look at.","-","-"
"2017/05/02 4:22:26 pm CET","5-10 years","Commercial software/web development","No","Experienced","C#;F#","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor)","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","","","Internal enterprise projects;Open source projects","Utilities and tools;Non-commercial web site/app","Textual & flat file data;Read-only data sources such as feeds","Windows;Javascript as a platform;Azure;Amazon Web services","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","","","","","","",""
"2017/05/02 4:34:48 pm CET","10 or more years","Consulting","Yes","Experienced","C#;F#;Python","4 or more years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Visual Studio 2015 or newer;Xamarin;Emacs","Twitter;F# bloggers","Better domain modelling with records and unions;Great community","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Type inference;Type providers","","","MSDN;F# books;Links posted on social media such as Twitter;Personal mentoring;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications;Commercial web site/app;Non-commercial web site/app;Research/Teaching;Data analysis/statistics;Text analysis/language parsing","Event store/logs/Kafka;Lucene.net","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market","Nothing. Everyone loves it.","","Don't understand the compiler errors","Not being part of the core .NET distribution","","",""
"2017/05/02 4:39:40 pm CET","5-10 years","Commercial software/web development","Yes","Intermediate","C#;Javascript;PHP","1-2 years","","I want to use it for my company but im not confident enough in MS / OSS / Tooling ","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;printf that is type checked;The ""piping"" idiom;Type inference;Type providers","Units of measure","","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","","","","","","","","","","","","","","","",""
"2017/05/02 4:40:06 pm CET","10 or more years","Academic, research, or related","Yes","Beginner","C#;Javascript","Haven't really used it yet","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Learning functional programming in general","Type inference;Units of measure","","FAKE","F# books;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: A talks at user groups","More material with in-depth tutorials;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Research/Teaching;Data analysis/statistics","Textual & flat file data","Windows","It's used unofficially","Correctness: fewer bugs and less rework","No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Don't understand the compiler errors","Not being part of the core .NET distribution;Working with C#-centric tooling","","",""
"2017/05/02 4:44:02 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;No dependency cycles;Type inference;Type providers","Agents (MailboxProcessor);Integration with non-F# libraries;Static type constraints","FSharp.Data
FSharp.Management
","F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Commercial products","Utilities and tools;Custom development/specialist markets;Financial services;Commercial web site/app","SQL databases","Windows;Javascript as a platform;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","Technical reasons","","Don't understand the compiler errors;Strange and unusual errors","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","There are just too many ways of doing the same thing which makes things quite confusing at times.","",""
"2017/05/02 4:45:33 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;Javascript;Typescript","3-4 years","","I use it for hobby or side projects","Windows","VS Code (with Ionide)","Twitter","Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Backtick naming;Easy integration with other .NET libraries;Immutability by default;Interactive development;printf that is type checked;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Object-oriented compatibility","","MSDN;F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More short ""live coding"" videos","","Internal enterprise projects","Financial services","Not doing data centric apps","Windows","It's used unofficially","Correctness: fewer bugs and less rework;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","","Lack of F# friendly libraries","","",""
"2017/05/02 4:46:52 pm CET","10 or more years","Academic, research, or related","No","Intermediate","C#;F#;Perl;Python","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013","Twitter;F# Weekly;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development","Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type inference;Units of measure","","","Links and instructions from fsharp.org;F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Utilities and tools;Machine learning;Data analysis/statistics;Text analysis/language parsing","Textual & flat file data","Windows","It's used unofficially","Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","It needs buy-in at a level higher than me. ","Not enough real-world code to learn from","Not being part of the core .NET distribution","","",""
"2017/05/02 4:46:54 pm CET","10 or more years","Academic, research, or related","Yes","Expert","F#;Python","4 or more years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer","Twitter;F# Weekly;F# bloggers","Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general;Speed of development","Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs","Agents (MailboxProcessor);Quotations;Units of measure","","Links and instructions from fsharp.org;F# books;F# bloggers;Links mentioned in F# Weekly;Reading F# code written by experts","Theory first, to get a rigorous foundation","","More material with in-depth tutorials","","Commercial products;Open source projects","Machine learning;Research/Teaching;Text analysis/language parsing","SQL databases;NoSQL database;Textual & flat file data","Windows;Linux","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;I can't use my knowledge from C# or other imperative languages;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Working with C#-centric tooling","","",""
"2017/05/02 4:47:59 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","","FSharp.Data
Fake
Suave
FsCheck
Ionide
","F# books;F# bloggers;Links posted on social media such as Twitter;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Attending a talks as part of a conference;Books or longer articles explaining full context","More material with in-depth tutorials;More interactive tutorials (e.g. like the F# Koans)","","Commercial products","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka;Analytics","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Nothing. Everyone loves it.","","Installation process","Not being part of the core .NET distribution","","",""
"2017/05/02 4:48:29 pm CET","10 or more years","Open source development","No","Intermediate","C#;F#;Javascript;R;Typescript","1-2 years","","I use it at work or for other commercial uses","Mac","Xamarin;VS Code (with Ionide)","","Correctness (no nulls, it works first time);Great community;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Units of measure","Agents (MailboxProcessor);Async workflows;Computation expressions;Quotations;Type providers","FAKE","MSDN;Answers to Stack Overflow questions;Personal mentoring;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","Better compiler error messages on syntax errors ... it can get confusing *real quick* when you're just learning the language, to figure out what is causing a syntax break.","Internal enterprise projects;Open source projects","Utilities and tools;Commercial web site/app;Mobile apps","Textual & flat file data;Read-only data sources such as feeds","Windows;Mac","It's officially endorsed in my team for non-critical/non-production code","Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","Keep spreading the gospel ... make it more visible to non-F# developers","Lack of good tutorials/documentation;Don't understand the compiler errors","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/02 4:48:55 pm CET","5-10 years","Financial services or similar","No","Intermediate","C#;F#;Typescript","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type providers","Active Patterns;Agents (MailboxProcessor);Units of measure","","F# bloggers;Personal mentoring","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products","Utilities and tools;Financial services","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Better for solving complex problems","Nothing. Everyone loves it.","","Don't understand the compiler errors;Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/02 4:52:16 pm CET","10 or more years","Consulting","Yes","Experienced","F#;Haskell;Typescript;Elm","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Vim","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Immutability by default;Type inference","Agents (MailboxProcessor);Integration with non-F# libraries;Object-oriented compatibility;Units of measure","Paket
FsPickler","F# books","Theory first, to get a rigorous foundation","Books or longer articles explaining full context","More material with in-depth tutorials","It would be easier if programmers already knew more than OOP. Stuff like algebraic data types is not F# specific but with only an OOP background, that stuff needs to be learnt at the same time.","Commercial products","Commercial web site/app","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework","Nothing. Everyone loves it.","","","Working with C#-centric tooling","I use the REPL/FSI and it is great. What I really miss from F# is something like Haskell's GHCI where I can reload almost instantly a whole project and run it, like stack ghci. When I have used FSI to include many *.fsx, I've found it to be very slow.","",""
"2017/05/02 4:54:50 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;F#;Javascript","Less than a year","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Async workflows;Object-oriented compatibility","","F# bloggers;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts;Pluralsight","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories","Information on tying the various patterns together. 

How example code tires into one or more functional paradigms","Not applicable. None of my F# code is used by other people","Utilities and tools;Financial services;Non-commercial web site/app","Event store/logs/Kafka;Read-only data sources such as feeds","Windows;Mac;Azure","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market","Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams;Technical reasons","","Thinking functionally","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/02 4:55:57 pm CET","10 or more years","Data or analytics related","No","Intermediate","C#;F#;Javascript","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;Type providers","Units of measure","","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter","Practical only. I don't care about theory.","Books or longer articles explaining full context","More material with in-depth tutorials","There a lot of small samples but no real world large applications to draw from","Commercial products","Algorithm-heavy business applications (non-financial);Games;Mobile apps","SQL databases;Textual & flat file data","Windows;Android","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","Technical reasons;Tooling with dotnet core and VS 2017","","Installation process;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 4:57:48 pm CET","10 or more years","Consulting","Yes","Experienced","C#;F#;Javascript;Python;Scala","4 or more years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Emacs","Twitter;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Great community","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Object-oriented compatibility;Units of measure","","Reading F# code written by experts","Theory first, to get a rigorous foundation","","","","Commercial products;Open source projects","Mainstream business & enterprise applications;Commercial web site/app","SQL databases;NoSQL database;Textual & flat file data","Windows;Mac;Linux;Amazon Web services","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers;Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","","Lack of good tutorials/documentation;Installation process","Lack of F# friendly libraries;Cross-platform issues","","",""
"2017/05/02 4:58:23 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;C++;F#;Javascript;Typescript","4 or more years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom","Agents (MailboxProcessor);Units of measure","","F# books;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products","Utilities and tools;Custom development/specialist markets;Machine learning;Commercial web site/app;Mobile apps;Text analysis/language parsing","SQL databases;Textual & flat file data","Windows;Linux;Azure","It's used unofficially","Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Unpleasant interactions with the community","Not being part of the core .NET distribution;Working with C#-centric tooling;Performance issues","Tooling","",""
"2017/05/02 4:59:30 pm CET","2-5 years","Commercial software/web development","No","Learner","C#;F#","2-3 years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2012 or 2013;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;No dependency cycles;The ""piping"" idiom;Type inference","Quotations","","F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Recorded talks from a conference or user group","More material with real-world examples and war stories","","Commercial products;Open source projects","Utilities and tools;Commercial web site/app","Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","","","","","","",""
"2017/05/02 5:09:40 pm CET","5-10 years","Science or related","No","Experienced","F#;Python","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Quotations;Units of measure","","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","","","","Not applicable. None of my F# code is used by other people","Utilities and tools;Algorithm-heavy business applications (non-financial)","Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","","","Installation process;Poor buggy  tooling","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/02 5:11:13 pm CET","10 or more years","Enterprise development","Yes","Learner","C#;Javascript;Typescript","I was using F# but have stopped","Not enough time to get productive in it after-hours.","Just tinkering","Windows","Visual Studio 2015 or newer;Sublime Text;VS Code (with Ionide)","HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Computation expressions;Integration with non-F# libraries;Object-oriented compatibility;Units of measure","","MSDN;F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;Short and highly-practical videos of FSI sessions","More material with in-depth tutorials;More short ""live coding"" videos;Short and highly-practical videos of FSI sessions","Fix problem of referencing libraries from FSI.  Having to specify the full path EVERY SESSION is a problem, and a big part of the reason I haven't fully embraced type providers.","Internal enterprise POC for moving financial calculations out of the database and into managed code","None - Just playing around","Not doing data centric apps","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Installation process;Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","Living in the .NET framework is both a blessing and a curse.  I understand the blessings, and embrace them - as a C# enterprise developer in a C# enterprise shop, F# would be relatively easy to make interoperable.

But this interoperability comes at a very high price - having a language with a lot of ""surface area"" to learn, which makes F# a very difficult language to SELL.  Not only must I convince other developers to learn functional programming and a very different type system, I must also convince them to RE-learn object-oriented programming just to work with existing .net assemblies.  Object-oriented programming is purposefully the hard path in F#.  And while I like the functional approaches, I can't help but feel like INTEROP was made harder than it should have been.

I would say that one benefit of F# over ""pure"" functional languages is that F# - both the language and the community - seems better able to use the right tool for the job.  If immutable data isn't a good fit, F# makes it relatively easy to use .NET mutable data structures.  If an imperative looping construct makes more sense than recursion, F# makes such constructs available.  So the difficulty of interop - the ""strain"", so to speak, of having to consume C# from F# and vice versa - is a glaring weakness.","",""
"2017/05/02 5:17:39 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#;Javascript;Typescript","4 or more years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2012 or 2013;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Having fun again","Active Patterns;Immutability by default;The ""piping"" idiom;Type inference","Units of measure","","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Open source projects","Custom development/specialist markets;Financial services","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows;Mac;Javascript as a platform;Amazon Web services","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","","Installation process","Not being part of the core .NET distribution","Feels like the community tooling is diverging from the ""official"" Microsoft tools","",""
"2017/05/02 5:20:50 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;The ""piping"" idiom;Type providers","Active Patterns;Agents (MailboxProcessor);Quotations;Units of measure","FsCheck 
Ionide 
TickSpec ","MSDN;F# books;F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Mainstream business & enterprise applications","SQL databases;Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","Hiring: They worry about not being able to find F# developers","","","Lack of F# friendly libraries;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 5:35:34 pm CET","10 or more years","Financial services or similar","Yes","Experienced","C;C#;C++;F#;Javascript;Ruby;Scala;Scheme/CL","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Backtick naming;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Type inference;Type providers","Agents (MailboxProcessor);Object-oriented compatibility;Quotations","","MSDN;F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Commercial products","Financial services;Research/Teaching","SQL databases;Event store/logs/Kafka","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","","I can't use my knowledge from C# or other imperative languages;Don't understand the compiler errors","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","Lack of promotion/support from Microsoft
Anti-Microsoft language community ","",""
"2017/05/02 5:44:34 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;Javascript","I was using F# but have stopped","Doing productive work in F# is rarely pure, and doing non-pure F# is rarely well documented. As a result, I rarely feel like it is a worthwhile tool for the job.","Just tinkering","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter","Learning functional programming in general","Easy integration with other .NET libraries","Active Patterns;Agents (MailboxProcessor);Async workflows;Computation expressions;Interactive development;Object expressions;Quotations;Static type constraints;Type providers;Units of measure","","F# books;F# bloggers;Links posted on social media such as Twitter","Practical only. I don't care about theory.","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;Blog posts","More material with short ""cookbook"" style information;More material with real-world examples and war stories","Stop encouraging poor instructors to keep teaching others just because they are well-known.","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","Windows;Mac;iOS;Android;Azure;Raspberry Pi","I don't use F# at work","No benefits yet","No perceived benefits: They don't understand what benefits F# has over C# or other languages","Get some real-world developers to put together educational material, resources, and examples, instead of people with predominantly theoretical backgrounds.","Lack of good tutorials/documentation;Don't understand the compiler errors;Unpleasant interactions with the community;Not enough real-world code to learn from","Difficulty in troubleshooting problems","Inhospitable community","",""
"2017/05/02 5:45:25 pm CET","5-10 years","Enterprise development","Yes","Learner","C#;F#;Java","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Object-oriented features (inc. C# compatibility, conciseness);Units of measure","Active Patterns;Quotations","","Links and instructions from fsharp.org","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with real-world examples and war stories;More short ""live coding"" videos","","Internal enterprise projects","Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents","No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 6:04:20 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;Clojure;F#;Haskell;Javascript;Typescript","1-2 years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community","Algebraic types (inc discriminated unions and tuples);Async workflows;Backtick naming;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;printf that is type checked;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Units of measure","","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: A talks at user groups;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","","","Internal enterprise projects;Commercial products","Mainstream business & enterprise applications;Commercial web site/app;Data analysis/statistics","SQL databases;Textual & flat file data","Windows;Javascript as a platform","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation","Not being part of the core .NET distribution;Working with C#-centric tooling","","",""
"2017/05/02 6:05:50 pm CET","10 or more years","Consulting","No","Learner","C#;Ruby","Haven't really used it yet","","I use it for hobby or side projects","Windows;Mac;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Backtick naming;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Async workflows;Integration with non-F# libraries","","Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Personal mentoring","Practical first, with theory introduced as needed","","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More podcasts and other audio-only material","","","","","Windows;Mac;Linux","","","","","","","","",""
"2017/05/02 6:08:18 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;Go;Ruby","2-3 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Async workflows;Backtick naming;Computation expressions;Easy integration with other .NET libraries;Immutability by default;printf that is type checked;The ""piping"" idiom;Type providers","Agents (MailboxProcessor);Object expressions;Units of measure","","F# books;F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Commercial products;Open source projects","Utilities and tools;Mobile apps;Data analysis/statistics","SQL databases;Textual & flat file data;Event store/logs/Kafka","Windows;Linux;Android;Amazon Web services","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;More productive with fewer developers;Efficiency/Performance","Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed","","Installation process;Don't understand the compiler errors","Not being part of the core .NET distribution;Lack of F# friendly libraries;Working with C#-centric tooling","","",""
"2017/05/02 6:12:14 pm CET","10 or more years","Open source development","Yes","Experienced","C;F#;Ocaml/SML;Rust;Scala","4 or more years","","I use it at work or for other commercial uses","Windows;Linux","Emacs","Twitter;F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development;Functional but can be tweaked to get high performance","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Piping again!","Active Patterns;Type providers","","F# books;Reading F# code written by experts","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials","","Internal enterprise projects;Commercial products;Open source projects","Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Data analysis/statistics;Text analysis/language parsing","SQL databases;Event store/logs/Kafka","Windows;Javascript as a platform;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Fad: They have concerns over long term language viability;Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","","Installation process;Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Cross-platform issues","rudimentary type system","","Thank you for the great language."
"2017/05/02 6:24:34 pm CET","10 or more years","sysadmin","Yes","Experienced","F#;Go;Ocaml/SML","2-3 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;Emacs","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Async workflows;Immutability by default;Interactive development;printf that is type checked;The ""piping"" idiom;Type inference","Object expressions;Static type constraints;Type providers;Units of measure","","F# books","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More podcasts and other audio-only material","","Open source projects;Not applicable. None of my F# code is used by other people","Algorithm-heavy business applications (non-financial);Mobile apps","SQL databases;Textual & flat file data","Windows;Linux;Android","I don't use F# at work","","No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Lack of F# friendly libraries;Cross-platform issues","","",""
"2017/05/02 6:34:21 pm CET","2-5 years","Commercial software/web development","Yes","Intermediate","C#","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;Type inference;Type providers","Object-oriented compatibility;Units of measure","","F# books;F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Utilities and tools;Machine learning","SQL databases","Windows;Raspberry Pi","It's used unofficially","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Performance issues","","",""
"2017/05/02 6:46:25 pm CET","10 or more years","Academic, research, or related","Yes","Experienced","F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);No dependency cycles;Object-oriented features (inc. C# compatibility, conciseness);Type inference;Type providers","Agents (MailboxProcessor);Object expressions;Units of measure","FsXaml
Gjallarhorn","F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Theory first, to get a rigorous foundation","In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More interactive tutorials (e.g. like the F# Koans)","","Commercial products","Mobile apps;Research/Teaching","SQL databases","Windows;iOS;Android","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","","","Installation process","Exclusion from UWP","Cannot target UWP","",""
"2017/05/02 6:47:14 pm CET","10 or more years","Financial services or similar","Yes","Intermediate","C#;F#;Java;Perl","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance)","Active Patterns;Async workflows;Computation expressions;Easy integration with other .NET libraries;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type providers","Agents (MailboxProcessor);Units of measure","","MSDN;Links and instructions from fsharp.org;F# books;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More short ""live coding"" videos","","Internal enterprise projects","Financial services","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;More productive with fewer developers;Faster time to market","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","","Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Performance issues","","",""
"2017/05/02 6:53:04 pm CET","5-10 years","Enterprise development","Yes","Experienced","C#;Java;Scala","Less than two months","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","","Conciseness of code (I can see more at a glance);Great community;Functional but can be tweaked to get high performance","Computation expressions;Easy integration with other .NET libraries;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;Units of measure","","","MSDN;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Commercial products","Mainstream business & enterprise applications;Commercial web site/app;Mobile apps","SQL databases","Android;Azure","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Don't understand the compiler errors;Not enough real-world code to learn from","Not being part of the core .NET distribution;Difficulty in troubleshooting problems","","",""
"2017/05/02 6:58:58 pm CET","5-10 years","Enterprise development","No","Intermediate","Javascript","Less than a year","","I use it for hobby or side projects","Windows;Mac;Linux","VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Learning functional programming in general","Active Patterns;Immutability by default;No dependency cycles;Type inference","Agents (MailboxProcessor);Integration with non-F# libraries;Object-oriented compatibility","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","Azure","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Don't understand the compiler errors;Not enough real-world code to learn from","Difficulty in troubleshooting problems;Cross-platform issues","","",""
"2017/05/02 7:05:42 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#","Less than a year","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer","F# Weekly;Reddit","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Integration with non-F# libraries;Quotations","","F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","","","Open source projects","Games;Non-commercial web site/app;Text analysis/language parsing","SQL databases;NoSQL database","Windows;Mac;Azure","It's used unofficially","More productive with fewer developers;Efficiency/Performance","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","","Working with C#-centric tooling;Cross-platform issues","","",""
"2017/05/02 7:05:50 pm CET","5-10 years","Commercial software/web development","Yes","Experienced","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Object expressions;Object-oriented compatibility;Quotations;Static type constraints;Units of measure","Fake
Paket","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Commercial products","Algorithm-heavy business applications (non-financial)","Textual & flat file data","Windows;Linux;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.","People don't think it can be a replacement for C# and Microsoft uses lots of energy adding more and more F# features into C# instead of promoting F#.","","F# is great and fun!"
"2017/05/02 7:06:17 pm CET","10 or more years","Enterprise development","Yes","Learner","C#","1-2 years","Syntax. Spaces/tabs (indenting) are sometimes obscure. Scope often not clear. The highly compacted code does mean ""easy to understand"" nor ""easy to maintain"".
Hard to debug. 
Hard to get away from imperative thinking (that's a personal problem though)","build script","Windows;Mac;Linux","Visual Studio 2015 or newer;Vim;VS Code (with Ionide)","Twitter","Learning functional programming in general","Immutability by default","Agents (MailboxProcessor);Async workflows;Integration with non-F# libraries;Type providers","paket
fake","F# books;Personal mentoring;Structured training/workshops;Reading F# code written by experts","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","","","Not applicable. None of my F# code is used by other people","Utilities and tools","Textual & flat file data","Windows;Mac;Linux;Raspberry Pi","It's officially endorsed in my team for non-critical/non-production code","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","I can't use my knowledge from C# or other imperative languages;Don't understand the compiler errors;Not enough real-world code to learn from;OCaml syntax","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems;Typos like missing space(s) / wrong indention","- missing WPF examples / templates (no kidding; desktop GUI applications still exist)
- too many competitors (e.g. elm for web apps)","",""
"2017/05/02 7:10:31 pm CET","2-5 years","Commercial software/web development","No","Intermediate","C#;Javascript","Less than two months","","Just tinkering","Mac;Linux","VS Code (with Ionide)","HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;Simple ""one liner"" type definitions for records and DUs;Type inference","Agents (MailboxProcessor);Async workflows;Units of measure","","F# books;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","Video tutorial which create a simple applications. But more advanced than a hello world, more like an application which includes networking, database access and error handling.","Not applicable. None of my F# code is used by other people","None - Just playing around","Textual & flat file data;Not doing data centric apps","Linux","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of good wrappers for non-F# libraries;Cross-platform issues","","",""
"2017/05/02 7:11:04 pm CET","10 or more years","Financial services or similar","Yes","Intermediate","C#;F#;Typescript","3-4 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Functional but can be tweaked to get high performance","Active Patterns;Async workflows;Computation expressions;Immutability by default;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Units of measure","","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Attending a talks as part of a conference;Books or longer articles explaining full context","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools;Financial services","Textual & flat file data","Windows","It's used unofficially","Correctness: fewer bugs and less rework;Faster time to market","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/02 7:16:06 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#;Javascript;Typescript","2-3 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;MonoDevelop","F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Active Patterns;Computation expressions;Immutability by default;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Async workflows;Quotations;Units of measure","Type Providers
","F# books;F# bloggers;Answers to Stack Overflow questions;Personal mentoring","Practical first, with theory introduced as needed","Books or longer articles explaining full context","","","Internal enterprise projects;Commercial products","Custom development/specialist markets;Mainstream business & enterprise applications;Commercial web site/app","SQL databases;Textual & flat file data","Windows;Linux;Azure","It's used unofficially","Correctness: fewer bugs and less rework;Better for solving complex problems","","","Lack of good tutorials/documentation","Working with C#-centric tooling","","",""
"2017/05/02 7:21:50 pm CET","5-10 years","Financial services or similar","No","Intermediate","C#;F#;Java;Javascript","3-4 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs","Agents (MailboxProcessor);Interactive development;Quotations;Static type constraints;Type providers;Units of measure","","MSDN;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","","Open source projects","Utilities and tools;Text analysis/language parsing","Not doing data centric apps","Windows;Mac;Linux","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability;Too Windows-centric: They have concerns over cross-platform issues","Dotnet core and tooling on par with c#","","Working with C#-centric tooling","Dotnet core","",""
"2017/05/02 7:57:54 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;C++;F#","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"2017/05/02 8:00:37 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#;Javascript","2-3 years","","I use it at work or for other commercial uses","Windows","VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again","Active Patterns;Easy integration with other .NET libraries;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Units of measure","","F# bloggers;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Commercial products","Utilities and tools;Machine learning;Data analysis/statistics","SQL databases;NoSQL database;Textual & flat file data","Windows;Mac","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Training: They are worried about getting non-F# developers up to speed","","Installation process;Don't understand the compiler errors","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems;Cross-platform issues","","",""
"2017/05/02 8:01:15 pm CET","5-10 years","Commercial software/web development","Yes","Intermediate","C#;Javascript;Scala;Typescript","I was using F# but have stopped","Syntax too hard, tooling not good enough.","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Type inference","","","MSDN;Links and instructions from fsharp.org;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials","","","","","","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Lack of F# friendly libraries;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 8:08:17 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","C++;F#;Python","4 or more years","","I use it at work or for other commercial uses","Mac","Atom (with Ionide)","Twitter","Better domain modelling with records and unions;Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;printf that is type checked;Type inference","Computation expressions;Object expressions;Quotations;Type providers;Units of measure","","F# books;F# bloggers","Theory first, to get a rigorous foundation","In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials","Simplify tooling. 
Avoid confusion in setup and deployment. 
Make ""just coding"" work immediately, and NOT through a browser -- come on, we all know in-browser F# snippet coding is just a toy, we want real development.
","Commercial products;mobile apps","Utilities and tools;Games;Mobile apps","NoSQL database","Mac;iOS;Android","I don't use F# at work","","","","can't answer this since I already learned F#","Sorry, compiler speed. Can it be more slow?","Why don't you include ""compiler speed"" above :-/

Seriously, I love F# and more so the community, which is amazing!

Unfortunately there are a few things (some are hard to fix) that F# lacks or doesn't do right, which make it less perfect. 

* Compiler speed. It's too slow (esp. in Mac). Have you tried to work with a code base that is both large and has very careful dependency management by breaking into lots of small libraries -- like 100+ compilation targets? F# compiler takes a lot of time resolving dependency, restarting the compiler binary, and linking the assemblies. This has massively decreased our productivity and more importantly makes development in F# feels *painful*. It made us seriously consider abandoning F# all together. 

* Interactive development story is lacking. I'm not talking about using FSI, but more like the process and experience when developing in Python or Javascript (Typescript) where you instantaneously see the errors by just running the code (without a separate compilation phase), and you can even hot-reload your code into the running app, so that you don't have to restart the app.

I hope F# could do something like this. We kind of have a home-grown way by building a tool that live-compiles code and injecting the assembly into the running app through an HTTP daemon, like the ""continuous"" app. So we are much happier now (and have decided not abandoning F# for mobile app development). But the tool is still too limited and hacky (this is why we don't release it). I hope we can have something like this supported in standard F#. Or at least, please really really seriously consider the development experience -- it's 2017 now and it's not good to still thinking in ""coding, compiling, running"" like the 90's.

* The tooling is lacking, e.g., ionide F# cannot resolve the F# projects when we don't put the source code in the same directory of project files (See https://github.com/ionide/ionide-atom-fsharp/issues/49). So yes we use atom and ionide but really there is only syntax coloring and nothing else. (But yeah we have lived with it). 

For the language side. F# was an amazing language in the forefront of all programming languages back in 2007. In 2017 now it's still a great language but no longer outstanding because 

(1) other languages have caught up with the unique features in F#, like Go, Typescript, Swift. (I'm not counting C#. There is no point using C# if you can use F#). 

(2) those languages are still evolving rapidly. See Typescript.

Yet F#, understandably due to lack of supports (hack, we have gone so far most by the community so few supports in big corp), its core language features can only evolve slowly (if any). Besides the lack of resources, I feel there are other technical issues:

(1) The language has already grown big with its own warts. Type Providers, Quotations, unit-of-measure, maybe computation-expressions, all are good (not bad) but have made the language complex and difficult to change. If we could start over I'm not sure we want to put them in, or at least in the current form. Especially the type-providers and quotations, probably some redesign is needed (since they are limited and hard to use). Unit-of-measure is cool but not terse enough and also too limited and weird (mostly due to type erasure). Computation-expression is really smart, but the practical usages seem to be just seq {} and async {} (and perhaps also maybe {}, but it's not as clean as the ""?"" operator in Swift).

If we could do it again I would try macros and more fundamental way to open up the compiler to enable custom syntax.

(2) Compatibility with C# -- interop with C# is good, letting C# code consume F# library is not. For a C# user, consuming F# library is never as native as consuming a C# library. And it turns out not to be an effective way to lure C# coder into F#.

The late F# evolvement has been affected by the C# roadmap. Not necessarily a bad thing (there is definitely very good reasons to do so), but it's already dragging F# and limiting its design space.

Finally, there are also limitations in .NET that makes F# less perfect, e.g., Object.Equals(). But this is just unfortunate. 

(3) there were a few bad design decisions in F# language and core library that is hard to fix now. But this is just life.

(4) We don't have a high-performance immutable hash table in FSharp.Core. We really should.

Saying all these, F# is still my favorite language, and thank you for all your great contributions to the world. Keep up the great work!!","",""
"2017/05/02 8:09:13 pm CET","2-5 years","Commercial software/web development","","Intermediate","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Quotations","","F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More short ""live coding"" videos","","Commercial products","Commercial web site/app","NoSQL database;Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Nothing. Everyone loves it.","","Installation process;Project system, CLI tools, etc.","Cross-platform issues","Needs to have a set of simple commands to execute across platforms (Rust is basically the model for this).","",""
"2017/05/02 8:22:57 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Sublime Text;VS Code (with Ionide)","F# Weekly;F# bloggers","Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Quotations;Units of measure","The FSharp.Data.SqlClient type provider has revolutionized SQL data access for me.","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","Introduce the more advanced, esoteric material later on to avoid scaring off newbies.","Internal enterprise projects","Utilities and tools;Commercial web site/app","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Many existing team-members haven't taken the time to learn it yet","","Don't understand the compiler errors;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Many of my bugs have been from forgetting () when calling a method with no parameters that needs to be evaluated each time.

","",""
"2017/05/02 8:36:13 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;Javascript","Less than a year","","Just tinkering","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Backtick naming;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor)","F# Toolkit","Links and instructions from fsharp.org;F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Open source projects","Custom development/specialist markets;Machine learning","Data integration and EAI","Windows","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","More real-world examples of business success and endorsement from Microsoft during public events.","Don't understand the compiler errors;Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Tooling. I hope that the switch to Roslyn will help bring some parity to C# on the refactoring and qualimetric fronts.","",""
"2017/05/02 8:43:00 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#;Typescript","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;Object expressions;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations;Static type constraints;Type providers;Units of measure","","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More podcasts and other audio-only material","","Internal enterprise projects","Mainstream business & enterprise applications","Not doing data centric apps","Windows;Azure","It's used unofficially","More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","Not community - More clean support from Microsoft as top-priority language","Not enough real-world code to learn from","","Didn't work in VS2017 RTM","",""
"2017/05/02 9:00:00 pm CET","10 or more years","Consulting","Yes","Experienced","C#;F#","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development","Easy integration with other .NET libraries;Immutability by default;Type inference","Agents (MailboxProcessor);Units of measure","","MSDN;Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools;Custom development/specialist markets;Mainstream business & enterprise applications;Data analysis/statistics","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Nothing. Everyone loves it.","","Lack of good tutorials/documentation;Not enough real-world code to learn from","User Interface development","","",""
"2017/05/02 9:01:52 pm CET","10 or more years","Enterprise development","No","Learner","C#;Javascript","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Interactive development;Type inference;Type providers","","","F# books;F# bloggers","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-depth online courses (e.g. Pluralsight)","","","Internal enterprise projects;Commercial products","Commercial web site/app","Not doing data centric apps","Windows;Azure","It's used unofficially","Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/02 9:08:24 pm CET","5-10 years","Commercial software/web development","Yes","Experienced","Javascript","Less than a year","","I use it for hobby or side projects","Mac","VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;No dependency cycles;Type inference","Integration with non-F# libraries;Object-oriented compatibility;Quotations;Units of measure","","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","Javascript as a platform;Linux","I don't use F# at work","","Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","Better documentation / tutorials.","Lack of good tutorials/documentation","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries","","",""
"2017/05/02 9:12:24 pm CET","10 or more years","Enterprise development","No","Learner","C#;F#;Python","Less than a year","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Learning functional programming in general","Active Patterns;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations;Type providers","","F# books;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More short ""live coding"" videos","","Not applicable. None of my F# code is used by other people","None - Just playing around","","","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed","","","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/02 9:36:08 pm CET","10 or more years","Commercial software/web development","Yes","Learner","F#;Python","Less than a year","","I use it at work or for other commercial uses","Mac;Linux","VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type providers","","","MSDN;Links and instructions from fsharp.org;F# books;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools;Data analysis/statistics;Other","SQL databases;NoSQL database;Data integration and EAI;Read-only data sources such as feeds","Linux;Raspberry Pi","It's officially endorsed in my team for critical/production areas","More productive with fewer developers;Faster time to market","Nothing. Everyone loves it.","","Not enough real-world code to learn from","Working with C#-centric tooling","","",""
"2017/05/02 9:39:32 pm CET","2-5 years","Financial services or similar","Yes","Intermediate","F#","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development","Computation expressions;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Async workflows;Quotations;Type providers;Units of measure","","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools;Financial services;Data analysis/statistics","Textual & flat file data;Event store/logs/Kafka;Analytics","Windows;Linux","It's officially endorsed in my team for critical/production areas","Better for solving complex problems","No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Don't understand the compiler errors;Not enough real-world code to learn from","Working with C#-centric tooling","","",""
"2017/05/02 9:54:32 pm CET","10 or more years","Consulting","Yes","Experienced","C#;F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Interactive development;The ""piping"" idiom","Object expressions;Quotations;Static type constraints","FSharp.Data
FParsec
Paket
DiffSharp
XPlot","F# books;F# bloggers","Practical first, with theory introduced as needed","","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","Providing a reference list of learning resources
Reviving TryFSharp","Internal enterprise projects;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Machine learning;Mainstream business & enterprise applications;Data analysis/statistics","SQL databases;NoSQL database;Textual & flat file data;Read-only data sources such as feeds","Windows;Azure;Azure Functions","It's officially endorsed in my team for critical/production areas","More productive with fewer developers;Faster time to market;Better for solving complex problems","Nothing. Everyone loves it.","","","","","","The F# community would benefit from changing its discourse, and providing resources for developers who are not starting from developing C# on Windows with Visual Studio. I think presenting F# as an alternative to Python, or to Scala, would help attracting new people to the language."
"2017/05/02 10:03:57 pm CET","10 or more years","Academic, research, or related","Yes","Intermediate","C;Java","Less than two months","","Just tinkering","Linux","VS Code (with Ionide)","Twitter","Correctness (no nulls, it works first time);Great community","Algebraic types (inc discriminated unions and tuples);Object-oriented features (inc. C# compatibility, conciseness)","","","Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","","","Not applicable. None of my F# code is used by other people","Research/Teaching","Textual & flat file data","Linux","It's used unofficially","Correctness: fewer bugs and less rework","Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","","Not enough real-world code to learn from","Performance issues","","",""
"2017/05/02 10:07:47 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;Clojure;Javascript","Less than a year","","Just tinkering","Mac;Linux","Vim","Twitter","Conciseness of code (I can see more at a glance);Having fun again;Functional but can be tweaked to get high performance","Async workflows;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type providers","","","Links posted on social media such as Twitter;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases;Textual & flat file data","Linux","I don't use F# at work","","","","","Not being part of the core .NET distribution","","",""
"2017/05/02 10:13:11 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#;Javascript;Scala","1-2 years","Not enough Linux support. Too complex environment setup","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Simple solutions for complex tasks","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Interactive development;The ""piping"" idiom;Type inference","Integration with non-F# libraries;Object expressions;Object-oriented compatibility","Paket
FAKE
SqlProvider","F# bloggers;Links mentioned in F# Weekly","Practical only. I don't care about theory.","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More interactive tutorials (e.g. like the F# Koans)","Easier bootstrap of development environment","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial)","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka;MS Excel","Windows;Linux","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Faster time to market","Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","Split Visual Studio from F# Compier, make it truly portable. One or two steps to setup should be enough. Look at rustup or go","Installation process;Weak analyze and refactoring tools","Less sophisticated tools for refactoring, etc.;Performance issues;Cross-platform issues","Microsoft","",""
"2017/05/02 10:15:12 pm CET","2-5 years","Commercial software/web development","Yes","Learner","Javascript;Python;Typescript","Less than two months","","I use it for hobby or side projects","Linux","VS Code (with Ionide)","Twitter","Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Type inference;Type providers","","","fsharpforfunandprofit.com","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials","The beat way to promote learning will be to make a good quality free MOOC, similar  Scala's coursera courses. ","Not applicable. None of my F# code is used by other people","None - Just playing around;Machine learning;Text analysis/language parsing","","Linux","I don't use F# at work","Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents","Training: They are worried about getting non-F# developers up to speed;Too Windows-centric: They have concerns over cross-platform issues;Didn't find a good official resource yet that explains developing production grade apps on Linux.  Very unclear how to use it with  .net core","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Cross-platform issues","","",""
"2017/05/02 10:16:30 pm CET","10 or more years","Enterprise development","No","","C#;F#;Java;Scala","2-3 years","I am using it less because I am not using .net in work. ","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Emacs;VS Code (with Ionide)","","Great community;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Interactive development;No dependency cycles;Object-oriented features (inc. C# compatibility, conciseness)","Quotations","FAKE
FAKE
FAKE
FsCheck
Compiler services","F# books;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;j","complete code bases ","more jobs using F#, if there are more people using the language, this fixes itself","Commercial products","","","Windows","i use it for my own little tools but can't use it really","","Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft;they are heavily invested on the jvm","","","",".net and the .net core fiasco (sorry,  it's been too long, it might be getting better but it's been a complete mess)","",""
"2017/05/02 10:18:06 pm CET","10 or more years","Commercial software/web development","No","Learner","Javascript;PHP","Less than two months","","I use it for hobby or side projects","Linux","VS Code (with Ionide)","HN, Reddit and other programming news sites","Correctness (no nulls, it works first time);Learning functional programming in general","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;No dependency cycles;The ""piping"" idiom;Units of measure","Active Patterns;Async workflows;Interactive development;Type providers","","MSDN;Links and instructions from fsharp.org;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Games","Textual & flat file data","","I don't use F# at work","","","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Cross-platform issues","","",""
"2017/05/02 10:53:21 pm CET","10 or more years","Commercial software/web development","No","Intermediate","F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Object expressions","NCrunch","F# books;F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","","","Commercial products","Custom development/specialist markets","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","Nothing. Everyone loves it.","","","Working with C#-centric tooling","","",""
"2017/05/02 10:54:32 pm CET","10 or more years","Enterprise development","Yes","Learner","C#","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Units of measure","Ionide 
FAKE 
","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context","More material with real-world examples and war stories","If I could use it day-to-day at work that would really help. I don't have the time every day to spend that I would like to. ","Internal enterprise projects","Utilities and tools;Data analysis/statistics","Textual & flat file data","Windows","It's used unofficially","Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Not having the time to focus on it","Difficulty in troubleshooting problems","","",""
"2017/05/03 1:15:41 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#;Javascript","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Async workflows;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type providers","Active Patterns;Agents (MailboxProcessor)","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Utilities and tools;Custom development/specialist markets;Mainstream business & enterprise applications;Non-commercial web site/app;Research/Teaching;Data analysis/statistics;Text analysis/language parsing","SQL databases;NoSQL database;Read-only data sources such as feeds","Windows;Javascript as a platform;Linux;Raspberry Pi","It's used unofficially","","Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed;Too Microsoft-centric: They think it is too closely linked to Microsoft;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Having a hard time making it part of my every day job, this making it harder to ""learn on the job""","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 1:16:05 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#;Javascript","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Async workflows;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type providers","Active Patterns;Agents (MailboxProcessor)","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Utilities and tools;Custom development/specialist markets;Mainstream business & enterprise applications;Non-commercial web site/app;Research/Teaching;Data analysis/statistics;Text analysis/language parsing","SQL databases;NoSQL database;Read-only data sources such as feeds","Windows;Javascript as a platform;Linux;Raspberry Pi","It's used unofficially","","Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed;Too Microsoft-centric: They think it is too closely linked to Microsoft;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Having a hard time making it part of my every day job, this making it harder to ""learn on the job""","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 1:20:35 am CET","10 or more years","Data or analytics related","Yes","Experienced","F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Object expressions","FSharp.Data.SqlClient
Argu
Expecto
FsCheck","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Theory first, to get a rigorous foundation","Reference works or documentation with API listings or short tutorials","more complete documentation","examples of more use cases with code snippets ","Internal enterprise projects;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Data analysis/statistics","SQL databases;Textual & flat file data","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","Nothing. Everyone loves it.","","Installation process","Not being part of the core .NET distribution","","",""
"2017/05/03 1:28:44 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#;Delphi","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Great community;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Type inference;Type providers;Units of measure","Object expressions;Object-oriented compatibility","Fake
Paket
Fsharp.Data
Suave
SQLProvider
Websharper
","Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Commercial products","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Mobile apps;Data analysis/statistics;Text analysis/language parsing","SQL databases;NoSQL database;Textual & flat file data;Analytics;Read-only data sources such as feeds","Windows;iOS;Android","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Easy concurrency with async and agents;Better for solving complex problems","Nothing. Everyone loves it.","Community has helped a lot.
Promote it in schools for the new generation of programmers.","Nothing","Lack of good wrappers for non-F# libraries","","",""
"2017/05/03 1:36:37 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;Elixir;Go","Less than a year","","Just tinkering","Mac","fsharpi","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Immutability by default;No dependency cycles;Type inference;Type providers","Object expressions;Object-oriented compatibility","","fsharpforfunandprofit","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","","","Not applicable. None of my F# code is used by other people","None - Just playing around","Textual & flat file data","Mac","I don't use F# at work","","Hiring: They worry about not being able to find F# developers","","Installation process","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.;Weak Mac/Linux support","","",""
"2017/05/03 1:44:21 am CET","10 or more years","Financial services or similar","Yes","Intermediate","C#","3-4 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;LinqPad","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations;Units of measure","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Reading F# code written by experts;fsharpforfunandprofit","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","More choose-your-own-adventure how-tos","Not applicable. None of my F# code is used by other people","Financial services","Textual & flat file data;Event store/logs/Kafka;Read-only data sources such as feeds","","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market","Training: They are worried about getting non-F# developers up to speed;Too Windows-centric: They have concerns over cross-platform issues","","Not enough real-world code to learn from","Lack of F# friendly libraries;Less sophisticated tools for refactoring, etc.","Lack of libraries","",""
"2017/05/03 1:48:09 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#","I was using F# but have stopped","Earlier it was stand alone language,  difficult to convince seniors that we should use it. So I tried few personal project mostly console. 
Now I can see lot of places like xamarin forms where I can use it.
And more importantly,I am senior now ☺ 
","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Xamarin","Twitter","Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Object-oriented features (inc. C# compatibility, conciseness)","","","MSDN;Links and instructions from fsharp.org;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Attending a talks as part of a conference","More material with in-depth tutorials;More short ""live coding"" videos","","Not applicable. None of my F# code is used by other people","Utilities and tools;Mobile apps","Not doing data centric apps","Windows;Azure;Amazon Web services","It's used unofficially","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","","","","","",""
"2017/05/03 2:10:51 am CET","2-5 years","Commercial software/web development","Yes","Intermediate","F#;Elm","1-2 years","","I use it at work or for other commercial uses","Windows","VS Code (with Ionide)","Twitter;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;No dependency cycles;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Integration with non-F# libraries;Object expressions;Object-oriented compatibility;Quotations;Type providers;Units of measure","","F# books;Links posted on social media such as Twitter;Answers to Stack Overflow questions","","In-depth online courses (e.g. Pluralsight)","More podcasts and other audio-only material","PluralSight courses and an F# podcast!","Commercial products","Commercial web site/app","NoSQL database","Windows","Startup","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Nothing. Everyone loves it.","","F# podcast!","","","",""
"2017/05/03 2:11:10 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;F# bloggers;Coworkers","Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general","Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Units of measure","F# Data
Paket","MSDN;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Personal mentoring;F# for fun and profit","Practical first, with theory introduced as needed","In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Commercial products","Commercial web site/app","SQL databases;Textual & flat file data","Windows;Amazon Web services","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;Recruiting - it's a desirable language","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed","","I can't use my knowledge from C# or other imperative languages;Don't understand the compiler errors","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Tooling, still feels like Microsoft treats it as second-class to C#","",""
"2017/05/03 2:19:26 am CET","5-10 years","Commercial software/web development","No","Experienced","Clojure;Elixir;F#","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Object expressions;Object-oriented features (inc. C# compatibility, conciseness)","Agents (MailboxProcessor);Async workflows;Computation expressions;Quotations;Static type constraints;Type providers","FParsec
","MSDN;F# books","Practical only. I don't care about theory.","","More podcasts and other audio-only material","","Internal enterprise projects;Commercial products","Utilities and tools;Financial services;Commercial web site/app","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","Technical reasons","Enable metaprogramming","","Lack of metaprogramming features","Bad metaprogramming support","More free form questions, less checkboxes.",""
"2017/05/03 2:53:53 am CET","5-10 years","Open source development","No","Learner","C#;Elixir;PHP;Typescript","Less than two months","","Just tinkering","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter","","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);The ""piping"" idiom;Type inference","Active Patterns;Quotations","","MSDN;F# books;F# bloggers;Links posted on social media such as Twitter","Practical first, with theory introduced as needed","","More material with in-depth tutorials;More short ""live coding"" videos","","Open source projects","Utilities and tools","Textual & flat file data;Read-only data sources such as feeds","Windows;Mac;Azure","I don't use F# at work","","","","","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","most .net tooling is focused on c#, especially with .net core and net standard","",""
"2017/05/03 3:25:55 am CET","10 or more years","Enterprise development","Yes","Learner","C#","Less than two months","","I use it for student work","Windows","Visual Studio 2015 or newer","Twitter","Having fun again;Learning functional programming in general","Active Patterns;Computation expressions","Object-oriented compatibility","","MSDN;F# bloggers","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days)","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Lack of good tutorials/documentation","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 3:27:16 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#;Javascript;Typescript","4 or more years","","Just tinkering","Windows","Visual Studio 2015 or newer","Twitter","Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Custom operators","Agents (MailboxProcessor);Async workflows;Quotations;Static type constraints","FParsec","MSDN;F# books;F# bloggers;Links posted on social media such as Twitter","Practical first, with theory introduced as needed","In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials","","Commercial products","Utilities and tools;Custom development/specialist markets;Text analysis/language parsing","Not doing data centric apps","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed","","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/03 3:28:05 am CET","10 or more years","Consulting","No","Experienced","C#;F#","4 or more years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development","Async workflows;Interactive development;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Quotations;Units of measure","","F# bloggers;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Machine learning;Mainstream business & enterprise applications;Data analysis/statistics;Text analysis/language parsing","SQL databases;Textual & flat file data;Not doing data centric apps","Windows;Azure","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","vs tooling","Lack of F# friendly libraries;Working with C#-centric tooling","","",""
"2017/05/03 4:20:03 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;Clojure;F#;Java;Javascript;Scala;Typescript","3-4 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);No class hierarchy, fewer private fns ","Immutability by default;Object expressions;Quotations;Simple ""one liner"" type definitions for records and DUs","Active Patterns;Interactive development;Type providers;Units of measure","","F# books","","Books or longer articles explaining full context","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Commercial products","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app","SQL databases","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Fscheck ","","","","Less sophisticated tools for refactoring, etc.","Ownership","",""
"2017/05/03 4:23:37 am CET","5-10 years","Enterprise development","Yes","Learner","C#;Javascript;Python;M","Less than a year","","I use it for hobby or side projects","Linux","MonoDevelop;VS Code (with Ionide)","","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Active Patterns;Immutability by default;No dependency cycles;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Async workflows;Interactive development;Object-oriented compatibility;Units of measure","FSharp.Data","MSDN;F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Utilities and tools;Non-commercial web site/app","SQL databases;Textual & flat file data","Windows;Linux","It's used unofficially","Correctness: fewer bugs and less rework","No buy-in: There is lack of acceptance from other teams","They can't really. The company is giant and slow moving, only recently adopting C# officially. Adding more to the build process won't happen easily.","Lack of good tutorials/documentation;Not enough real-world code to learn from","","","",""
"2017/05/03 4:33:30 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#;Python;Visual Basic","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013","Twitter;F# Weekly;Google groups","Conciseness of code (I can see more at a glance);Having fun again","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Computation expressions;Quotations;Units of measure","suave.io
FSharp.Data","F# books;F# bloggers;Links posted on social media such as Twitter","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More interactive tutorials (e.g. like the F# Koans)","no complaints. plenty of quality material available.","Internal enterprise projects","Utilities and tools;Mainstream business & enterprise applications","SQL databases;Textual & flat file data","Windows","It's used unofficially","Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","i wish i knew :)","Don't understand the compiler errors","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","some of the type-mismatch errors can be hard to decipher. ","","greatly looking forward to Scott Wlaschin's book"
"2017/05/03 5:09:07 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#;Javascript","2-3 years","","I use it for hobby or side projects","Windows","VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;The ""piping"" idiom;Type providers","Object-oriented compatibility;Quotations;Units of measure","Ionide","F# books;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material","","Not applicable. None of my F# code is used by other people","Financial services;Commercial web site/app","SQL databases;NoSQL database;Event store/logs/Kafka;Data integration and EAI","Windows;Javascript as a platform;Linux;Azure","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","","","","",""
"2017/05/03 5:43:34 am CET","2-5 years","Commercial software/web development","No","Intermediate","F#;Java;Javascript;Python","Less than a year","","I use it for hobby or side projects","Mac","VS Code (with Ionide)","F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Ease of refactoring","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Interactive development;Object expressions;Type providers;Units of measure","Ionide
Fable","MSDN;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Fsharp for fun and profit","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials","","Commercial products","Utilities and tools;Commercial web site/app","SQL databases;Textual & flat file data","Mac","I don't use F# at work","","","","","Less sophisticated tools for refactoring, etc.;Cross-platform issues","","",""
"2017/05/03 6:01:14 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#","4 or more years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Functional but can be tweaked to get high performance;It can be beautiful","Algebraic types (inc discriminated unions and tuples);Computation expressions;Object expressions;The ""piping"" idiom;Type inference;Units of measure","Agents (MailboxProcessor);Interactive development;Quotations;Type providers","","MSDN;F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Utilities and tools;Algorithm-heavy business applications (non-financial);Data analysis/statistics;Text analysis/language parsing;Other","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka;Analytics;Read-only data sources such as feeds","Windows;Linux;Azure","It's used unofficially","Domain modelling: making illegal states unrepresentable;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors","Lack of F# friendly libraries;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","It doesn't take good advantage of some c# centric libs and primatives like Task<>, ValueTask, ValueTuple and would love to see tech like TPL dataflow and channels(corefxlab) gain good support. 

In addition I would LOVE a breaking syntax reset. F# has grown alot and could use a culling of some cruftier syntaxes","",""
"2017/05/03 6:19:23 am CET","","","","","","","","","","","","","","","","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More podcasts and other audio-only material","","Internal enterprise projects;Commercial products","Algorithm-heavy business applications (non-financial);Commercial web site/app;Data analysis/statistics","SQL databases;Textual & flat file data;Event store/logs/Kafka","Windows;Linux;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 6:42:53 am CET","10 or more years","Commercial software/web development","Yes","Experienced","C++;Javascript;Scala","4 or more years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions","","","F# books","Practical first, with theory introduced as needed","Books or longer articles explaining full context","","","Internal enterprise projects","Other","Textual & flat file data;Event store/logs/Kafka","Javascript as a platform;Linux","Accepted for prototypes","More productive with fewer developers","Fad: They have concerns over long term language viability;Too Windows-centric: They have concerns over cross-platform issues","F# is perceived as a Microsoft thing that not even Microsoft is supporting, this doesn't help. I doubt it would be possible to change people perception about F# being a Microsoft technology so what would be good would be some clear and non ambiguous support to the language from Microsoft.
Also a F# to native would be superb a bit like Scala Native. ","","Cross-platform issues","","",""
"2017/05/03 7:02:36 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#","3-4 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development","Algebraic types (inc discriminated unions and tuples);Backtick naming;Immutability by default;Interactive development;The ""piping"" idiom;Type inference","Integration with non-F# libraries;Quotations;Units of measure","Ionide
Fake
Visual F# power tools
Websharper","F# books;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories;More podcasts and other audio-only material","Extra attention to software architecture, plus the statefull parts of an application. Anyone can learn the syntax, but no one knows where to start. I've met C# devs with F# interest who cannot imagine how to build a simple CRUD service in F#. No performance requirements.","Open source projects","Utilities and tools;Games","Not doing data centric apps","Windows;Linux;Raspberry Pi","I don't use F# at work","","No jobs, we're a contracting company","Let it grow.","","Less sophisticated tools for refactoring, etc.","F# targets devs with high standards. Although no one will admit it, the .Net community in Enterprise land has much lower standards. People are (still) lazy, 'If Microsoft doesn't solve the problem then I can't help you'. Aaron Stanard (akka.net) wrote a blog about this. Even though F# code reduces work, there is no WPF, WF, ASP.Net, ie visual tools, for F#. Visual things look easy, so they help to convince.","Don't promise 10 mins",""
"2017/05/03 7:19:37 am CET","5-10 years","Commercial software/web development","Yes","Intermediate","C#","4 or more years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Quotations;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Object-oriented compatibility;Static type constraints","FAKE
Paket
Ionide","F# books;F# bloggers;Links posted on social media such as Twitter;Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Open source projects","None - Just playing around;Utilities and tools","Textual & flat file data;Read-only data sources such as feeds","Windows;Linux","I don't use F# at work","","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 7:40:34 am CET","10 or more years","Commercial software/web development","Yes","Beginner","C;Python","Haven't really used it yet","","Just tinkering","Mac","VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites","","","","","F# books","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days)","More material with short ""cookbook"" style information","","Not applicable. None of my F# code is used by other people","Text analysis/language parsing","Textual & flat file data","Linux","I don't use F# at work","","","","Not enough real-world code to learn from;Need momentum","Momentum","","",""
"2017/05/03 7:44:13 am CET","10 or more years","Enterprise development","No","Intermediate","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly","Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general","Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Async workflows;Units of measure","","F# books;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","","More material with in-depth tutorials;More short ""live coding"" videos","","Internal enterprise projects","Commercial web site/app;Data analysis/statistics","SQL databases","Windows","It's used unofficially","Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams;Technical reasons","","Not enough real-world code to learn from","Not being part of the core .NET distribution","","",""
"2017/05/03 7:54:42 am CET","2-5 years","Consulting","No","Learner","F#;Javascript;Kotlin;Ocaml/SML","Less than a year"," tooling support Unix OS's ","I use it at work or for other commercial uses","Mac;Linux","VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Backtick naming;Computation expressions;Immutability by default;No dependency cycles;Type inference;Type providers;Units of measure","Agents (MailboxProcessor);Integration with non-F# libraries","VScode 
","F# books;F# bloggers;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More podcasts and other audio-only material","More dotnet core guides. ","Commercial products;Open source projects","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app;Non-commercial web site/app;Mobile apps","SQL databases;NoSQL database","Javascript as a platform;Linux;iOS;Android","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","More focus on C# interoperability ","Installation process","Lack of F# friendly libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Cross-platform issues","","",""
"2017/05/03 7:59:03 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;Python","Haven't really used it yet","","I use it for student work","Windows","Visual Studio 2015 or newer","HN, Reddit and other programming news sites","Speed of development","Type inference","Object-oriented compatibility","","F# bloggers","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials","","Not applicable. None of my F# code is used by other people","Research/Teaching","Textual & flat file data","Windows;Linux","I don't use F# at work","","Technical reasons","","","","","",""
"2017/05/03 8:04:58 am CET","10 or more years","Enterprise development","Yes","Learner","C;C#;C++","Less than two months","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","","Visual Studio 2017
VSCODE","MSDN;Links and instructions from fsharp.org;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;Videos","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material","","Open source projects","None - Just playing around;Utilities and tools","Textual & flat file data","Windows;Mac;Linux","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Ordered source files and inability of using folders in a project.","",""
"2017/05/03 8:17:47 am CET","5-10 years","Commercial software/web development","No","Intermediate","C#;F#;Javascript;Typescript","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;The ""piping"" idiom","Active Patterns;Computation expressions;Interactive development;Quotations","","F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical only. I don't care about theory.","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More short ""live coding"" videos","","Internal enterprise projects","Custom development/specialist markets;Mainstream business & enterprise applications;Data analysis/statistics","SQL databases","Windows;Azure;Raspberry Pi","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Hiring: They worry about not being able to find F# developers","","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/03 8:50:23 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide);LINQPad","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers;Google+;company slack","relearning to struggle","Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations","fake
paket
VSCode","MSDN;Links and instructions from fsharp.org;F# books;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Utilities and tools;Text analysis/language parsing;Other","SQL databases;Event store/logs/Kafka;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable","Training: They are worried about getting non-F# developers up to speed","0) make up-to-date documentation rank on google, no one likes your neat solution does not work with the current toolset (also looking at you, charting tutorials which neither work in linqpad nor in VS)
1) tooling and integration (ide support: refactorings, class-/domain-/function-diagrams/codemap, how about making debugging/stepping F# easier?, typos kill type inference - how about fuzzy suggestions of types that would be correct)
2) no binding redirect fuckups (now its 0.0.0.0-999.999.999.999 to FSharp.Core 4.4.0.0, tomorrow it's the next version - good luck in mixed environments (4.3.0.0 anyone?))
3) works-out-of-the-box-experience (we're far from that one)
4) prevent dependency confusion with .net, .net core, .net standard
5) remove those nasty obstacles hindering us from getting productive

","Installation process;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","lack of polished tools (with constant change not making things easier)","",""
"2017/05/03 9:00:59 am CET","10 or more years","Enterprise development","Yes","Expert","F#;Javascript;Ruby","4 or more years","","I use it at work or for other commercial uses","Mac","VS Code (with Ionide)","Twitter;F# Weekly","Functional but can be tweaked to get high performance","Hopac","Agents (MailboxProcessor);Static type constraints;Units of measure","Suave
Expecto
Logary
& internal libraries","Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day)","More podcasts and other audio-only material","","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Financial services;Machine learning;Mainstream business & enterprise applications;Commercial web site/app;Mobile apps;Data analysis/statistics;Text analysis/language parsing","Event store/logs/Kafka;Read-only data sources such as feeds","Linux;docker/kubernetes","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","Nothing. Everyone loves it.","","Lack of good tutorials/documentation;Installation process","Not being part of the core .NET distribution;Cross-platform issues","Not available on homebrew for .Net Core.","",""
"2017/05/03 9:22:36 am CET","10 or more years","Data or analytics related","No","Experienced","F#;Go;Javascript;R","3-4 years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Visual Studio 2015 or newer;Xamarin;Vim;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Backtick naming;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;printf that is type checked;The ""piping"" idiom;Type providers","Object-oriented compatibility;Quotations;Units of measure","FsRandom","MSDN;Links and instructions from fsharp.org;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with real-world examples and war stories","I have no idea.","Internal enterprise projects;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Machine learning;Data analysis/statistics","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka;Analytics;Read-only data sources such as feeds","Windows;Mac;Javascript as a platform;Linux;Azure;Amazon Web services","It's used unofficially","Domain modelling: making illegal states unrepresentable;Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages","I have no idea.","Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Performance issues","Performance issues, typically slower than C#.","",""
"2017/05/03 9:53:54 am CET","10 or more years","Financial services or similar","Yes","Expert","F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;Simple ""one liner"" type definitions for records and DUs;Type inference","Active Patterns;Units of measure","","F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products;Open source projects","Financial services","SQL databases;Textual & flat file data;Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","Hiring: They worry about not being able to find F# developers","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.","Small team at Microsoft","",""
"2017/05/03 10:01:46 am CET","5-10 years","Commercial software/web development","No","Learner","C;C#;Clojure;F#;Java;Perl;Python","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Emacs;VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;The ""piping"" idiom;Type inference;Type providers;Units of measure","Agents (MailboxProcessor);Async workflows","","MSDN;Links and instructions from fsharp.org;F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Analytics;Read-only data sources such as feeds","Windows;Azure","I don't use F# at work","Correctness: fewer bugs and less rework;More productive with fewer developers;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 10:04:16 am CET","5-10 years","Consulting","Yes","Learner","C#;F#;Javascript;Elm","1-2 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Type inference","","Ionide
Suave
","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Recorded talks from a conference or user group","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Utilities and tools;Data analysis/statistics","SQL databases;ElasticSearch","Windows;Mac;Linux;Azure","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Too Windows-centric: They have concerns over cross-platform issues","","Lack of good tutorials/documentation","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Cross-platform issues","","",""
"2017/05/03 10:32:36 am CET","10 or more years","Commercial software/web development","No","Intermediate","F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Xamarin","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Backtick naming;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Quotations;Units of measure","VFPT. This helps too much to write code on Visual Studio.","F# books;F# bloggers;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with short ""cookbook"" style information;More material with real-world examples and war stories","Lots of code's sample with some explanations.
Sample with Azure notebooks may be helpful.","Commercial products","Financial services;Commercial web site/app;Mobile apps","SQL databases;NoSQL database;Textual & flat file data","Windows;Javascript as a platform;iOS;Android;Azure","It's officially endorsed in my team for critical/production areas","More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages","Provides informations how F# is superior than C#.","Lack of good tutorials/documentation","Working with C#-centric tooling","Lack of tools like ReSharper or OzCode.
Environments F# can work is limited. Like .NET Native or Unity.","In some questions, I can't understand  I should check one or more.",""
"2017/05/03 10:43:47 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Backtick naming;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;Type inference;Type providers","Integration with non-F# libraries;Static type constraints;Units of measure","Paket,
Ionide,
Fake,
Sql Type Provider","MSDN;F# books;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Structured training/workshops;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories;More podcasts and other audio-only material","Most libraries lack of good examples. It is often hard to find the right examples needed to go forward.","Commercial products;Open source projects","Custom development/specialist markets;Non-commercial web site/app;Mobile apps","SQL databases;Event store/logs/Kafka;Read-only data sources such as feeds","Windows;Linux;Android;Raspberry Pi","It's officially endorsed in my team for non-critical/non-production code","Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","No idea.","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","When using libraries it is often hard to find out how to use it. There are lots examples out there but often they are outdated or just for simple use cases. ","",""
"2017/05/03 12:43:38 pm CET","2-5 years","Enterprise development","No","Experienced","C#;F#","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Object expressions;Object-oriented compatibility;Quotations;Static type constraints;Units of measure","","F# books;fsharpforfunandprofit","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More podcasts and other audio-only material","","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Research/Teaching;Text analysis/language parsing","SQL databases;Textual & flat file data","Windows;Azure","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Don't understand the compiler errors;Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems;Cross-platform issues","","",""
"2017/05/03 1:35:18 pm CET","10 or more years","Consulting","No","Intermediate","Java;Swift","3-4 years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Agents (MailboxProcessor);Async workflows;Computation expressions;Immutability by default;Type inference","Object expressions;Quotations;Type providers","ionide
suave
fable","Links and instructions from fsharp.org;F# books;Links posted on social media such as Twitter;Personal mentoring","Practical only. I don't care about theory.","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Books or longer articles explaining full context","More material with in-depth tutorials;More material with short ""cookbook"" style information","","Open source projects","Utilities and tools;Custom development/specialist markets;Non-commercial web site/app;Research/Teaching;Data analysis/statistics","SQL databases;NoSQL database;Event store/logs/Kafka","Windows;Mac;Javascript as a platform;Linux;Azure;Amazon Web services","It's officially endorsed in my team for non-critical/non-production code","Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents","Fad: They have concerns over long term language viability;Too Microsoft-centric: They think it is too closely linked to Microsoft","","Lack of good tutorials/documentation","Not being part of the core .NET distribution;Lack of F# friendly libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 1:47:07 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C;F#;Python;LabVIEW","1-2 years","","I use it at work or for other commercial uses","Windows;Linux","VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Conciseness of code (I can see more at a glance);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;No dependency cycles;printf that is type checked;The ""piping"" idiom;Type inference","Object-oriented compatibility;Quotations","fable
fable-elmish
aether","F# books;F# bloggers;Reading F# code written by experts","Theory first, to get a rigorous foundation","In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories","","Commercial products","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Commercial web site/app","NoSQL database","Windows;Mac;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance","Training: They are worried about getting non-F# developers up to speed","","Not enough real-world code to learn from","Lack of good wrappers for non-F# libraries","ad-hoc polymorphism via library support.... breaks ionide; makes VS chug.","",""
"2017/05/03 1:47:37 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C;C#;F#;Javascript","1-2 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Agents (MailboxProcessor);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers;Units of measure","","","MSDN;Links and instructions from fsharp.org;Answers to Stack Overflow questions;Personal mentoring","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Machine learning;Commercial web site/app;Non-commercial web site/app;Mobile apps;Research/Teaching;Data analysis/statistics","NoSQL database","Windows;Javascript as a platform;Linux;Amazon Web services","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Nothing. Everyone loves it.","","","Cross-platform issues","","",""
"2017/05/03 1:56:25 pm CET","10 or more years","Commercial software/web development","No","Experienced","F#","2-3 years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Visual Studio 2015 or newer;Xamarin;Vim;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;Google+","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;Type inference","","Ionide, Fable","F# bloggers;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Commercial web site/app","NoSQL database;RMQ","Linux","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market","Nothing. Everyone loves it.","","","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Difficulty in troubleshooting problems;Cross-platform issues","Lack of ML modules: For a functional-first language, to promote OOP as the answer to many problems means we're back in the territory of patterns & practices (ie, vague and poorly understood wizardry).","",""
"2017/05/03 2:03:49 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C;C#;C++;F#","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# bloggers;StackOverflow chat","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;Interactive development;No dependency cycles;The ""piping"" idiom;Type inference;Units of measure","Object expressions;Object-oriented compatibility;Type providers","","F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","","","Commercial products","Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Mainstream business & enterprise applications;Commercial web site/app","NoSQL database","Windows;Linux","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Easy concurrency with async and agents;Better for solving complex problems","Nothing. Everyone loves it.","","Don't understand the compiler errors","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries","","",""
"2017/05/03 2:09:16 pm CET","10 or more years","Commercial software/web development","No","Learner","C#;F#;Javascript","4 or more years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom","Active Patterns;Computation expressions","F# Power Tools","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories","Real world examples of the more functional features like active patterns and computational expressions. ","Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Commercial web site/app","SQL databases;NoSQL database;Event store/logs/Kafka","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Efficiency/Performance","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","Convince the other stubborn developers that it is great!","None","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.","Tooling. C# has amazing tooling and F# is not at the same level.","",""
"2017/05/03 2:09:42 pm CET","2-5 years","Enterprise development","Yes","Intermediate","C#;F#;SQL","1-2 years","N/A","Tinkering and some work uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Interactive development;printf that is type checked;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Quotations;Units of measure","FSharp.Data
Paket
Ionide
FsCheck
FAKE","F# bloggers;Videos (e.g. Community for F#);Reading F# code written by experts;fsharpforfunandprofit.com","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Reference works or documentation with API listings or short tutorials","More material with real-world examples and war stories;More short ""live coding"" videos","","Internal enterprise projects","Utilities and tools;Custom development/specialist markets","SQL databases;Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Faster time to market;Using SqlCommandProvider for type-safe scripts and transforming output straight into API calls with no CSV intermediate","Training: They are worried about getting non-F# developers up to speed","Not sure. There are many solid resources showing how F# can interop with C# and how to approach F# as a C#-first developer. I think more real-world examples and/or ""war stories"" would help inspire people to use F# more.","Installation process","Working with C#-centric tooling","Appearance that Microsoft does not endorse F#. MS is not actively against F# to my knowledge, but MS does not seem to be actively for F# either. It could be MS is for F#, but the enthusiasm for C# is so much stronger/public that it completely overshadows F#.","",""
"2017/05/03 2:24:08 pm CET","Less than a year","Enterprise development","Yes","Beginner","C#;C++","Less than two months","","Just tinkering","Mac","VS Code (with Ionide)","Twitter","","Immutability by default;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Async workflows","","MSDN;Links and instructions from fsharp.org;F# bloggers","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day)","More material with real-world examples and war stories","","Open source projects","Utilities and tools","Textual & flat file data","Windows","I don't use F# at work","","","","Lack of good tutorials/documentation;Don't understand the compiler errors","","","",""
"2017/05/03 2:44:05 pm CET","10 or more years","Commercial software/web development","Yes","Expert","C;C#;C++;F#;Python;R;Scala","4 or more years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Visual Studio 2015 or newer","Twitter;F# bloggers;StackOverflow chat","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Interactive development;Quotations;Type inference","Type providers","Alea GPU
","F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","","","Better integration with Jupyter
Better plotting, visualization
Similar ecosystem as Python  ","Internal enterprise projects;Commercial products;Open source projects","Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Financial services;Machine learning;Research/Teaching;Data analysis/statistics","NoSQL database;Textual & flat file data;Event store/logs/Kafka;Analytics;Read-only data sources such as feeds","Windows;Linux;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","Technical reasons","Ecosystem as flexible as Python","","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries","","",""
"2017/05/03 2:45:34 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;Javascript","2-3 years","","Just tinkering","Windows","Visual Studio 2015 or newer","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;The ""piping"" idiom;Type inference","Quotations;Units of measure","","Links and instructions from fsharp.org;F# bloggers;Links mentioned in F# Weekly","Theory first, to get a rigorous foundation","Books or longer articles explaining full context","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases","Windows;Linux","It's used unofficially","Correctness: fewer bugs and less rework","Training: They are worried about getting non-F# developers up to speed","","Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 2:48:36 pm CET","10 or more years","Consulting","No","Experienced","F#","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Quotations;Static type constraints;Units of measure","* Visual Studio and more recently, VSCode (but not Atom ;-))
* All the usual type providers
* ","Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Structured training/workshops;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Recorded talks from a conference or user group","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","Showing more and more ""real-world"" applications of F#.","Internal enterprise projects;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Mainstream business & enterprise applications;Commercial web site/app;Research/Teaching;Data analysis/statistics","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka;Analytics;Data integration and EAI;Read-only data sources such as feeds","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance","Nothing. Everyone loves it.","","","Cross-platform issues","","",""
"2017/05/03 2:49:42 pm CET","5-10 years","Commercial software/web development","No","Intermediate","C#;F#;Javascript;Typescript","2-3 years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;printf that is type checked;Type inference","Interactive development;Quotations;Type providers;Units of measure","fparsec
","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter","Practical first, with theory introduced as needed","In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials","More material with real-world examples and war stories","Easier to reference modules written in F# in C# code. Occasionally issues around FSharp.Core crop up (do we reference the nuget package in our C# project for example)","Internal enterprise projects;Open source projects","Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications;Text analysis/language parsing","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams;Technical reasons","","Don't understand the compiler errors;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","Lacking a comprehensive SQL story. The type provider either can't do certain things or lacks the documentation on them (eg, inherited types, no referential integrity & other things found in legacy databases).

Many existing C# APIs are difficult to use in F# (NHibernate).","",""
"2017/05/03 3:02:37 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C;C#;C++;Elixir;Ruby","1-2 years","","Just tinkering","Mac","Xamarin;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Having fun again","Algebraic types (inc discriminated unions and tuples);The ""piping"" idiom;Type inference","Type providers;Units of measure","Xamarin and Fable","Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","","Mobile apps","Not doing data centric apps","Javascript as a platform;iOS;Android","I don't use F# at work","","","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries","","",""
"2017/05/03 3:04:15 pm CET","2-5 years","Open source development","No","Intermediate","C#;F#;Javascript;Typescript","1-2 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;Vim;VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Quotations;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Async workflows;Computation expressions;Units of measure","FSharp.Data.TypeProviders
FAKE
","Links posted on social media such as Twitter;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context","some recommended real-world codebase to read; more time to read them all :P","","internal utilities","Utilities and tools;Data analysis/statistics","SQL databases;NoSQL database;Textual & flat file data;Read-only data sources such as feeds","Windows;Javascript as a platform;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams;performance","We all hate the whitespace sensitivity. And some of my colleagueses don't like Functional Programming :(","","Less sophisticated tools for refactoring, etc.;Performance issues","Whitespace sensitivity and scary syntax for newbies","","Anyway thank you for doing a both cool and practical language. Although the IDE could be improved (a lot) F# is still best-tooled cool language I know."
"2017/05/03 3:04:57 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;Javascript","I was using F# but have stopped","Waiting for corefx/standard stabilization","Just tinkering","Windows","Visual Studio 2015 or newer","fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;Type inference","Active Patterns;Agents (MailboxProcessor);Type providers;Units of measure","FsCheck
Freya
Chiron","F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with real-world examples and war stories;More podcasts and other audio-only material","Better cross-platform tooling","Internal enterprise projects;Open source projects","Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications","SQL databases;NoSQL database;Textual & flat file data;Data integration and EAI;Read-only data sources such as feeds","Windows","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Better for solving complex problems","No buy-in: There is lack of acceptance from other teams","","Installation process;Unpleasant interactions with the community","Cross-platform issues","","",""
"2017/05/03 3:13:18 pm CET","10 or more years","Financial services or similar","Yes","Experienced","C#;F#;Haskell;Javascript;Typescript","1-2 years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Emacs;Visual Studio for Mac","Twitter;F# Weekly;IRC","Better domain modelling with records and unions;Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Type providers","Object-oriented compatibility;Units of measure","FSharp.Data","Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","","","Internal enterprise projects","Utilities and tools;Financial services;Mobile apps","SQL databases;Textual & flat file data","Windows;Javascript as a platform;iOS;Android","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","","Lack of good wrappers for non-F# libraries","Lack of Higher-Kinded Types
Lack of purity / modeling effects","",""
"2017/05/03 3:14:45 pm CET","5-10 years","Financial services or similar","Yes","Intermediate","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Backtick naming;Easy integration with other .NET libraries;Immutability by default;Interactive development;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Quotations;Units of measure","","MSDN;Links and instructions from fsharp.org;F# bloggers;Links mentioned in F# Weekly","Theory first, to get a rigorous foundation","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with real-world examples and war stories;More short ""live coding"" videos","","Internal enterprise projects","Financial services;Data analysis/statistics","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 3:20:52 pm CET","5-10 years","Commercial software/web development","Yes","Experienced","C#;F#;Java;Javascript;Objective-C;Swift;Typescript","2-3 years","Not enough paying jobs searching specifically for F#, even though they list it as a requirement and then make you write Scala >:(","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Backtick naming;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type providers","Agents (MailboxProcessor);Units of measure","Ionide
Fake
Fable","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Personal mentoring;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases","Azure","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Not being part of the core .NET distribution","","","I still <3 F#"
"2017/05/03 4:10:19 pm CET","2-5 years","Student","No","Intermediate","C;C#;C++;F#;Python","Less than a year","","I use it for hobby or side projects","Linux","MonoDevelop;VS Code (with Ionide)","Twitter","Conciseness of code (I can see more at a glance);Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Object expressions;Quotations;Units of measure","Suave
FSharp.Data","F# bloggers;Links posted on social media such as Twitter;F# for fun and profit","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More podcasts and other audio-only material","","Open source projects","Games;Non-commercial web site/app","SQL databases;Textual & flat file data","Windows;Linux;Azure","I don't use F# at work","","","","Not enough real-world code to learn from","Working with C#-centric tooling;FSharp.Core library/nuget versioning","","",""
"2017/05/03 4:23:23 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;Javascript;Typescript","2-3 years","","Just tinkering","Windows;Mac;Linux","Visual Studio 2015 or newer;Xamarin;Atom (with Ionide);VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Great community;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Computation expressions;Quotations","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;https://fsharpforfunandprofit.com/","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Utilities and tools;Commercial web site/app","SQL databases","Windows;.net core","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","Existing code in C#","","","Not being part of the core .NET distribution;Working with C#-centric tooling","","",""
"2017/05/03 4:52:29 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Atom (with Ionide);VS Code (with Ionide);Cloudsharper","Twitter;F# Weekly;F# bloggers;FPish","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Type providers","Quotations;Units of measure","Paket
WebSharper
FSharp.Formatting
","MSDN;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","Internal enterprise projects;Commercial products;Open source projects","Custom development/specialist markets;Commercial web site/app;Mobile apps;Research/Teaching","SQL databases;Analytics","Windows;Javascript as a platform;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","Nothing. Everyone loves it.","","Unpleasant interactions with the community","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Painfully slow compiler
","",""
"2017/05/03 4:56:54 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","C;C#;C++;F#;Python;Typescript","4 or more years","","I use it at work or for other commercial uses","Mac","Xamarin;MonoDevelop;VS Code (with Ionide)","Twitter","Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations;Static type constraints;Type providers","FSI in XS","F# books;Reading F# code written by experts","Practical only. I don't care about theory.","In-person: In-depth trainings (2 or 3 days);Recorded talks from a conference or user group","More material with real-world examples and war stories","","Commercial products","Commercial web site/app;Mobile apps","SQL databases;Textual & flat file data","Mac;iOS;Raspberry Pi","It's officially endorsed in my team for critical/production areas","More productive with fewer developers","Technical reasons;Low quality of tooling. Bugs everywhere and slow. ","","Tooling is buggy and slow.","Less sophisticated tools for refactoring, etc.;Performance issues;Cross-platform issues","F#s tooling is flaky. I often cannot reference PCLs because Core is incompatible. Or if I add a PCL my Core gets upgraded and now the compiler rejects it. 

It's impossible to share F# libraries that work anywhere but windows because of this. 

Single stepping in the debugger has lots of bad sequence points making the experience annoying. 

VSCode F# dances around the screen as it tries and fails to display type information. 

Tooling tooling tooling. Who cares how good the language is when the tools get so little attention or thought or care. ","",""
"2017/05/03 4:57:03 pm CET","2-5 years","Data or analytics related","No","Intermediate","C#;F#","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Speed of development","Async workflows;Immutability by default;Interactive development;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations","Ionide
FSharp.Data
","F# books;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More interactive tutorials (e.g. like the F# Koans)","I think discussions of how F# makes you more effective would be useful.  To that end, I think much of the work of Scott Wlaschin is invaluable--he tends to show the big picture of where you're going very, very well.  I'd really like to see training/a book wrapped around his work.","Not applicable. None of my F# code is used by other people","Utilities and tools;Financial services;Data analysis/statistics;Text analysis/language parsing","SQL databases;NoSQL database;Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents","We are more of a Java shop; I'm on a bit of an island","Get it running in .NET Core","It was just a mind-shift--once I crossed that, it was fine","Working with C#-centric tooling;Difficulty in troubleshooting problems","I think it is a great language with a great community.  I wonder if something like Haskell's IO system would be useful/possible but I don't have enough experience with language design/.NET integration to have a real opinion on that.","",""
"2017/05/03 5:16:36 pm CET","1-2 years","Commercial software/web development","Yes","Experienced","Ada;F#","1-2 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;Vim;Emacs;Sublime Text;Atom (with Ionide);VS Code (with Ionide);Cloudsharper","Twitter;F# Weekly;Fpish","Conciseness of code (I can see more at a glance);Great community;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","","WebSharper","Structured training/workshops","Theory first, to get a rigorous foundation","","","","Commercial products;Open source projects","Commercial web site/app;Non-commercial web site/app;Mobile apps","SQL databases","Windows;Javascript as a platform;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents","Nothing. Everyone loves it.","","","","","",""
"2017/05/03 5:41:32 pm CET","5-10 years","Consulting","No","Intermediate","C#;F#;Javascript;Typescript","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Great community;Having fun again;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Backtick naming;Computation expressions;Immutability by default;Interactive development;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type inference","Units of measure","","Links and instructions from fsharp.org;F# books;Links mentioned in F# Weekly;Personal mentoring;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More short ""live coding"" videos","","Commercial products","Financial services;Machine learning;Commercial web site/app;Mobile apps;Data analysis/statistics;Text analysis/language parsing","SQL databases;NoSQL database;Event store/logs/Kafka","Windows;Javascript as a platform;Android","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Efficiency/Performance","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;No buy-in: There is lack of acceptance from other teams","","Installation process","Not being part of the core .NET distribution","","",""
"2017/05/03 6:20:31 pm CET","10 or more years","Commercial software/web development","No","Beginner","C#","Less than a year","","I use it for side projects, build scripts and end to end testing","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Agents (MailboxProcessor);Easy integration with other .NET libraries;Type inference;Type providers","","Canopy
FAKE","fsharpforfunandprofit.com/","Theory first, to get a rigorous foundation","In-person: A talks at user groups;Books or longer articles explaining full context","","","","Utilities and tools","SQL databases","","It's officially endorsed in my team for non-critical/non-production code","Correctness: fewer bugs and less rework","Technical reasons;not much experience with F#, I am still in the phase of developing. There is lack of proven projects","","","","","",""
"2017/05/03 6:56:22 pm CET","10 or more years","Enterprise development","Yes","Learner","C#;Javascript","1-2 years","","Just tinkering","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites","Having fun again;Learning functional programming in general","Immutability by default;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Units of measure","FAKE
Ionide","F# bloggers;Answers to Stack Overflow questions;In a learning group with colleagues","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Utilities and tools","Not doing data centric apps","Windows;Mac","Officially endorsed for production code but actually only used for non-productivity code","","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Developing on Windows is great, but Mac not so much. Especially with dotnet core","In the ""features you use"" section, I was unfamiliar with some of the  terminology, so unsure if I use them or not. Maybe have links, tooltips etc.?",""
"2017/05/03 7:03:24 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#;Javascript","1-2 years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type inference;Type providers","Quotations","FSharp.Data
Suave
WebSharper
Fable
","F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects;Open source projects","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app;Data analysis/statistics;Text analysis/language parsing","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka","Windows;Mac;Javascript as a platform;iOS;Azure;Amazon Web services","It's officially endorsed in my team for non-critical/non-production code","Faster time to market;Easy concurrency with async and agents;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;Convincing C# Devs to Switch","","own stupidity, unserstanding complex function signatures","Difficulty in troubleshooting problems;Cross-platform issues;unstable tools, breaking changes","Not yet widely accepted as a 'coming' language
Parts of MSFT ignoring it
Could use better Intellisense, e.g. suggesting compatible functions when piping, ","","Keep going!"
"2017/05/03 7:03:32 pm CET","5-10 years","Commercial software/web development","Yes","Intermediate","C#;Javascript;Typescript","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter","Conciseness of code (I can see more at a glance)","Object-oriented features (inc. C# compatibility, conciseness);Type inference;Type providers","Agents (MailboxProcessor);Units of measure","","MSDN;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More podcasts and other audio-only material","","Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Machine learning","Textual & flat file data;Read-only data sources such as feeds","Windows","It's used unofficially","","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 8:29:19 pm CET","10 or more years","Consulting","No","Intermediate","C#;Clojure","Less than a year","Database access to postgresql was not clear.","Just tinkering","Windows;Linux","VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Immutability by default;Interactive development;The ""piping"" idiom;Units of measure","","VSCode","Links and instructions from fsharp.org;F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information","","Internal enterprise projects;Not applicable. None of my F# code is used by other people","None - Just playing around;Mainstream business & enterprise applications;Commercial web site/app","SQL databases;Textual & flat file data","Linux","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","A really stellar web framework targeted at business applications that require login.","Lack of good tutorials/documentation;Installation process","Lack of F# friendly libraries","","",""
"2017/05/03 8:30:01 pm CET","10 or more years","Consulting","Yes","Experienced","C#;F#;Java;Python","4 or more years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;Github","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Object expressions;The ""piping"" idiom;Type inference;Type providers","","","Links mentioned in F# Weekly;Personal mentoring","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","","","Open source projects","Utilities and tools;Non-commercial web site/app","","Windows;Mac;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Too much focus on VS/NuGet-Client/MS-Technology-X integration","",""
"2017/05/03 8:32:41 pm CET","10 or more years","Enterprise development","No","Learner","C#;C++;Clojure;F#;Python","Less than a year","","I use it for hobby or side projects","Windows;Mac;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type providers;Units of measure","Agents (MailboxProcessor);Quotations","Ionide
Fake
Paket
Expecto 
FSharp.Data","F# books;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Utilities and tools;Custom development/specialist markets","SQL databases;Textual & flat file data","Windows;Mac;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","More official support from Microsoft","","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 8:39:01 pm CET","5-10 years","Enterprise development","Yes","Intermediate","C#;F#","1-2 years","","Mostly hobby, side projects at work. Usage at work is growing as I promote it, but slowly.","Mac","Xamarin;VS Code (with Ionide);Visual Studio for Mac","Twitter;F# Weekly;fsharp channel on Slack","Conciseness of code (I can see more at a glance);Learning functional programming in general","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type inference;Type providers","Computation expressions;Quotations","Xamarin Studio as it works well on the Mac
","F# books;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight);I would like In-Person, but I live in New Zealand. The community is small and the country is isolated. ","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Very soon to be a small commercial mobile app","Utilities and tools;Mobile apps","SQL databases","Windows;Mac;iOS;Android","It's officially endorsed in my team for non-critical/non-production code","More productive with fewer developers;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","Support F# in NZ","Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.","Better tooling for Mac in IDE. Can pick up all the Xamarin developers. ","",""
"2017/05/03 8:55:23 pm CET","2-5 years","Enterprise development","No","Learner","C#;F#;Javascript;PHP;Typescript","Haven't really used it yet","","Just tinkering","Windows;Mac","Xamarin;VS Code (with Ionide)","Twitter;F# bloggers","Great community;Having fun again;Learning functional programming in general","Async workflows;Type inference;Type providers","","","F# books;F# bloggers;Reading F# code written by experts","Practical first, with theory introduced as needed","In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","None - Just playing around","","Windows;Mac;Javascript as a platform;iOS;Android","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed","","Lack of good tutorials/documentation;Installation process;Not enough real-world code to learn from","Lack of F# friendly libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Keep up the good work!
Focus on tools, doc and advanced exemple for Xamarin :) 
Thanks ","",""
"2017/05/03 8:59:11 pm CET","10 or more years","Commercial software/web development","Yes","Learner","C#;Javascript;Typescript","1-2 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;Type inference;Type providers;Units of measure","Agents (MailboxProcessor)","","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Open source projects","Utilities and tools","SQL databases;Textual & flat file data","Windows;Azure","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;Second class citizen for MS","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/03 9:25:27 pm CET","2-5 years","Enterprise development","Yes","Intermediate","C#;F#;Haskell","1-2 years","","I use it for student work","Windows;Linux","Visual Studio 2015 or newer","Twitter;F# Weekly;F# bloggers","Conciseness of code (I can see more at a glance);Great community;Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Backtick naming;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Quotations;Units of measure","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Structured training/workshops;Videos (e.g. Community for F#)","Theory first, to get a rigorous foundation","In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Utilities and tools;Custom development/specialist markets;Text analysis/language parsing","SQL databases;Textual & flat file data","Windows;Linux;Azure","It's used unofficially","Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Tools","",""
"2017/05/03 9:56:55 pm CET","10 or more years","Enterprise development","No","Learner","C#","2-3 years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Great community;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Interactive development;Simple ""one liner"" type definitions for records and DUs;Type providers","Agents (MailboxProcessor);Static type constraints","Fsharp.Data","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","","None - Just playing around","SQL databases;Read-only data sources such as feeds","Windows;Azure","I don't use F# at work","","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/03 10:51:40 pm CET","10 or more years","Open source development","Yes","Experienced","C#;F#;Ocaml/SML;Python;Rust;Swift;Typescript","Less than a year","","Just tinkering","Windows;Linux","Visual Studio 2015 or newer;Xamarin;Sublime Text;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites","Speed of development","Async workflows;Computation expressions","Object-oriented compatibility;Units of measure","","MSDN;F# books;F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases;Textual & flat file data","Windows;Azure","I don't use F# at work","More productive with fewer developers;Faster time to market","Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability;Too Windows-centric: They have concerns over cross-platform issues","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Working with C#-centric tooling;Cross-platform issues","the Object oriented side of F# is an eyesore...","Ask for negative side of f#, like ""what turns people off ""
",""
"2017/05/03 11:14:04 pm CET","5-10 years","Enterprise development","Yes","Experienced","C#;Haskell","I was using F# but have stopped","I started learning Haskell","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Computation expressions;Easy integration with other .NET libraries;Immutability by default;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Object-oriented compatibility","","F# books","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","Windows","Used in other teams","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Lack of good tutorials/documentation","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","","",""
"2017/05/03 11:51:50 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;F#","2-3 years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;Xamarin;MonoDevelop;VS Code (with Ionide)","","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;Object expressions;The ""piping"" idiom;Type inference;Type providers","Units of measure","FAKE
paket","F# books;F# bloggers;Personal mentoring","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material","","Internal enterprise projects;Commercial products","Financial services","SQL databases;Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","Lack of good tutorials/documentation;Installation process;Unpleasant interactions with the community","Working with C#-centric tooling","","",""
"2017/05/04 12:29:16 am CET","5-10 years","Enterprise development","Yes","Experienced","C#;F#;Typescript","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Backtick naming;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Integration with non-F# libraries;Object expressions;Object-oriented compatibility;Quotations;Units of measure","Fsharp.Data.SqlClient
Canopy","F# books;F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial)","SQL databases","Windows","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;Team unware of F#/F# advantages","","","Not being part of the core .NET distribution","","",""
"2017/05/04 12:44:43 am CET","2-5 years","Enterprise development","No","Intermediate","C#;F#;Javascript","1-2 years","","I use it for hobby or side projects","Windows;Linux","VS Code (with Ionide)","F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Backtick naming;Computation expressions;Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;Type inference;Units of measure","Integration with non-F# libraries;Object expressions;Object-oriented compatibility","","F# books;F# bloggers;Links mentioned in F# Weekly;F# for fun and profit","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Utilities and tools;Algorithm-heavy business applications (non-financial);Financial services","SQL databases;Event store/logs/Kafka","Windows;Linux;Raspberry Pi","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 1:11:24 am CET","10 or more years","Science or related","Yes","Intermediate","C;C#;C++;F#;matlab","1-2 years","","I use it for research or academic work","Windows","Visual Studio 2015 or newer","Twitter","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Speed of development;Functional but can be tweaked to get high performance","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Type inference","Computation expressions;Type providers","visual studio F# support
F# power tools","MSDN;F# books;Personal mentoring","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More podcasts and other audio-only material","","Internal enterprise projects","Utilities and tools;Financial services;Machine learning;Research/Teaching;Data analysis/statistics;Text analysis/language parsing","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Nothing. Everyone loves it.","","Don't understand the compiler errors;Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.;Performance issues","performance 'how to' need to be addressed
like how 'hashset' is done 
very confusing to see it use a tree at first
","",""
"2017/05/04 2:13:21 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#;Java;Javascript;Pascal","2-3 years","","I use it at work or for other commercial uses","Windows","VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;printf that is type checked;Type inference;Type providers;Units of measure","Object-oriented compatibility","Ionide","Links and instructions from fsharp.org;F# bloggers;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","Commercial products","Utilities and tools;Commercial web site/app","SQL databases;NoSQL database;Textual & flat file data","Windows;Linux","It's used unofficially","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors","Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 2:17:59 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;Javascript","3-4 years","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Object expressions;Quotations;Units of measure","","MSDN;F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Internal util","None - Just playing around;Utilities and tools","SQL databases;Textual & flat file data;Rest apis","Windows","It's used unofficially","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors;Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","Too much reliance on BCL libraries makes so much code mutation oriented. Learning elm which is fully pure really made this obvious to me.","",""
"2017/05/04 2:46:53 am CET","10 or more years","Commercial software/web development","No","Learner","C#;Typescript","I was using F# but have stopped","1. Power of Visual Studio for C# is more convenience than for F#. One of the example, ""add 'using ~' (in F#, it is 'open ~')"" feature. Each difference of these features are small, but those small differences combine to large effective.

2. Very fewer F# user than C# user especially in my job domain area. I can not have co-workers who can use F#. Therefore its is hard to using F# at my work. ","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter;Facebook","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs;Units of measure","Agents (MailboxProcessor);Computation expressions;Object expressions;Type providers","Visual Studio","F# books;F# bloggers;Links posted on social media such as Twitter","Practical first, with theory introduced as needed","~10 minutes videos on internet (YouTube, Channel 9, EggHead, etc.)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","The teaching material is not a problem. I think, the installation of F# run time and developer environment is very pane. Therefore, learning F# was made harder.","Open source projects","Utilities and tools;Non-commercial web site/app","Not doing data centric apps","Windows;Azure","I don't use F# at work","Correctness: fewer bugs and less rework;More productive with fewer developers","Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed","Nothing... I have no idea.","Installation process","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","It is very hard work that redistribute my pretty class library written by F# as NuGet package. 

The class library which written by F# needs F# run time assembly (fsharp.dll), but there is no NuGet package of F# run time assembly officially.

Therefore, I couldn't publish my class library written by F# to nuget.org.
","","- F# run time environment should can install only one line command line, like ""apt-get install fsharp""

- F# run time assembly official NuGet package should publish to nuget.org. If it is realize, I can publish my class libraries which written by F# to nuget.org include package dependency for F# run time assembly package."
"2017/05/04 3:27:00 am CET","10 or more years","SharePoint Engineer","No","Beginner","C#;F#;Javascript;Typescript;PowerShell","Less than two months","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;Sublime Text;Atom (with Ionide);VS Code (with Ionide)","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","","Ionide, Visual Studio, Fable","MSDN;F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical only. I don't care about theory.","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","Most training seems to assume you understand Functional Programming, the best courses are the ones that contrast it with C# ","Not applicable. None of my F# code is used by other people","Utilities and tools;Custom development/specialist markets;Non-commercial web site/app","","Windows;Mac;Javascript as a platform;Linux;Azure","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","Educate and come up with a one page site that demonstrates the benefits.","I can't use my knowledge from C# or other imperative languages;Tooling is garbage right now","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.;Cross-platform issues","Tooling is terrible right now.  I feel like I picked a bad time to start learning it.","",""
"2017/05/04 3:29:07 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general","Agents (MailboxProcessor);Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom","Computation expressions;Object expressions;Quotations","","F# books;F# bloggers","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More podcasts and other audio-only material","","Internal enterprise projects","Financial services","SQL databases;Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","Don't understand the compiler errors;Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Difficulty in troubleshooting problems","","",""
"2017/05/04 3:34:48 am CET","10 or more years","Data or analytics related","No","Learner","Python;Ruby","Haven't really used it yet","","Just tinkering","Mac","VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites","Learning functional programming in general","Immutability by default;Units of measure","","","Links and instructions from fsharp.org;F# books;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Commercial web site/app","SQL databases","Mac;Amazon Web services","I don't use F# at work","","Fad: They have concerns over long term language viability;Too Microsoft-centric: They think it is too closely linked to Microsoft","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Cross-platform issues","","",""
"2017/05/04 5:13:10 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#;Javascript","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2012 or 2013","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Backtick naming;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Object-oriented features (inc. C# compatibility, conciseness);printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers;Units of measure;Record type equality","Object expressions;Quotations","FsUnit
Paket","F# bloggers;Links mentioned in F# Weekly;Personal mentoring","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Reference works or documentation with API listings or short tutorials","","","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications","SQL databases;Textual & flat file data;Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Easy concurrency with async and agents;Better for solving complex problems","Money: They worry that good F# developers will cost too much;Fad: They have concerns over long term language viability;Too Microsoft-centric: They think it is too closely linked to Microsoft;No buy-in: There is lack of acceptance from other teams","","","","","",""
"2017/05/04 5:26:22 am CET","10 or more years","Consulting","Yes","Intermediate","C#;F#","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Quotations","","Links and instructions from fsharp.org;F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability","","","Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 5:46:44 am CET","10 or more years","Commercial software/web development","No","Experienced","F#;Javascript;Typescript","4 or more years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;Vim;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers;Community for F#","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Backtick naming;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;printf that is type checked;Quotations;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","","Fake, Paket, FSharp.Data, FSharp.Data.SqlClient, Gluon, Freya, Fable, Suave","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","Improving the scripting story would be wonderful. F# scripting is already quite nice and a great way to easily introduce F# without requiring all the effort of creating a project, build, etc. These can even be run directly through Azure Functions or F# Notebooks. The biggest missing piece is ease of referencing nuget packages and referencing an App.config file for settings (assuming this is within the context of an existing application).","Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Commercial web site/app;Non-commercial web site/app","SQL databases;Textual & flat file data","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Lack of libraries; we use Matlab for data analytics and F# for most everything else.","Provide more complete analytics packages similar to NumPy and SciPy or the Matlab suite of tools, along with easy visualizations.","","Cross-platform issues","I think the community is constantly hung up on trying to convert the rest of .NET when the better market for expansion is from users of other platforms and startups. There's also a seed of negativity that tends to spread and is exacerbated by sarcasm. The community is typically optimistic and fun, but those bits can really detract from an overall positive experience.","",""
"2017/05/04 6:03:04 am CET","2-5 years","Commercial software/web development","No","Experienced","C#;C++;Haskell;Javascript;Swift","Less than a year","No type classes and/or HKT","Just tinkering","Windows","Visual Studio 2015 or newer","HN, Reddit and other programming news sites","ML style is better than haskell tbh","Type providers;Units of measure","Object-oriented compatibility","Visual studio","F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","Windows","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents","Too Microsoft-centric: They think it is too closely linked to Microsoft;No buy-in: There is lack of acceptance from other teams;Technical reasons","","book tbh","","Lack of higher kinded types and type classes","",""
"2017/05/04 7:53:43 am CET","10 or more years","Consulting","No","Intermediate","F#;Javascript;Scala;Haxe","Less than a year","","I use it at work or for other commercial uses","Windows;Linux","VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;Interactive development;The ""piping"" idiom;Type providers;Units of measure","Object expressions;Object-oriented compatibility","Fsharp.Data
Fable !
","Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","For newcomers: more samples for simple daily tasks. ","Internal enterprise projects;Commercial products;Open source projects","Commercial web site/app;Non-commercial web site/app;Data analysis/statistics","SQL databases;NoSQL database;Analytics;Read-only data sources such as feeds","Javascript as a platform;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents;Better for solving complex problems","","","Don't understand the compiler errors","Cross-platform issues","","include Js/Fable ecosystem","Thanks for this survey! "
"2017/05/04 8:09:47 am CET","5-10 years","Student","Yes","Experienced","C#;F#","2-3 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Computation expressions;Interactive development;Type inference;SRTP","Agents (MailboxProcessor);Object expressions;Type providers;Units of measure","Paket
FAKE
FParsec
Argu
Fable
Ionide
","F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with in-depth tutorials;More material with short ""cookbook"" style information","","Open source projects","Utilities and tools;Games","SQL databases","Windows;Mac;Linux","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","","","Lack of good tutorials/documentation","Cross-platform issues","","",""
"2017/05/04 8:52:38 am CET","5-10 years","Enterprise development","Yes","Learner","C#;F#","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Object expressions;Quotations;Type inference;Type providers;Units of measure","Agents (MailboxProcessor);Object-oriented compatibility;Type providers","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Reading F# code written by experts","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Open source projects","None - Just playing around;Text analysis/language parsing","","Windows","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","Hiring: They worry about not being able to find F# developers","","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 8:56:09 am CET","10 or more years","Consulting","Yes","Learner","C#;Javascript","1-2 years","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;No dependency cycles;Object expressions;Quotations;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers;Units of measure","Agents (MailboxProcessor);Quotations;Type providers;Units of measure","","MSDN;F# books;F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases","Windows","I don't use F# at work","","No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 9:22:17 am CET","10 or more years","Commercial software/web development","No","Intermediate","C;Haskell;Javascript;Scala","Less than a year","","I use it for hobby or side projects","Linux","Vim;Rider EAP","HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Integration with non-F# libraries;Object-oriented compatibility;Quotations;Type providers;Units of measure","","Links and instructions from fsharp.org;F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Utilities and tools;Text analysis/language parsing","Textual & flat file data","Linux","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Too Windows-centric: They have concerns over cross-platform issues","","Lack of good tutorials/documentation;Installation process","Less sophisticated tools for refactoring, etc.;Cross-platform issues","","",""
"2017/05/04 9:22:37 am CET","5-10 years","Consulting","Yes","Learner","C#;Javascript","Less than a year","I don't use it at work and i can't find the time for it out of work.","I use it for hobby or side projects","Mac","VS Code (with Ionide)","F# bloggers","Correctness (no nulls, it works first time);Learning functional programming in general","Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Partial application, option type","","","MSDN;F# books;F# bloggers;Answers to Stack Overflow questions;Personal mentoring;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","None - Just playing around","Textual & flat file data","","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Lack of an IDE as good as visual studio + resharper for c#","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Refactoring tools (I wouldn't go from c# to f# if the refactoring tools weren't as good as resharper)

The syntax is too different from main stream languages (i don't think this is bad,  but it makes harder to attract c#, java, js or ruby developers)

Overlap in language features with c#. C# is becoming more and more functional with every new version. This is making F# less attractive.

There are not many jobs or companies using it.","","Thanks for your work! :)
I really like the language and I hope it becomes mainstream once day."
"2017/05/04 10:29:39 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;C++;F#;Java;Javascript;Visual Basic","4 or more years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;Visual Studio 2012 or 2013","Twitter","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;Type inference","Units of measure","","Links and instructions from fsharp.org;F# books;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","F# is already easy. Making it mainstream would help. ","Internal enterprise projects;Commercial products","Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Mainstream business & enterprise applications;Other","SQL databases;NoSQL database;Redis for cache","Windows;Linux;Azure","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Easy concurrency with async and agents;Better for solving complex problems","Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed","One code works everywhere might help.","Not enough real-world code to learn from","Working with C#-centric tooling;Difficulty in troubleshooting problems","F# is becoming like VB.net, second grade citizen. Things come first in c# and then in f#, it used to be the other way earlier. C# used to get ideas from fsharp.","",""
"2017/05/04 12:35:44 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","C++;F#;Java;Javascript;Python;Rust","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Sublime Text","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Interactive development;No dependency cycles;The ""piping"" idiom","Active Patterns;Agents (MailboxProcessor);Async workflows;Integration with non-F# libraries;Quotations;Type providers;Units of measure","Chessie.ErrorHandling
FsCheck","Links and instructions from fsharp.org;F# books;F# bloggers","Theory first, to get a rigorous foundation","In-person: Shorter workshops focused on a specific topic (1 day);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More short ""live coding"" videos","Guides on best library/tool in a category.
More consensus on the F# standard style.","Not applicable. None of my F# code is used by other people","Utilities and tools","Textual & flat file data","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Too Windows-centric: They have concerns over cross-platform issues","","","Not being part of the core .NET distribution;Choosing tools/libraries/distributions","Community size","",""
"2017/05/04 12:47:22 pm CET","10 or more years","Commercial software/web development","Yes","Learner","C#","Less than a year","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Backtick naming;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Units of measure","Active Patterns","","F# books;F# bloggers;Answers to Stack Overflow questions","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Text analysis/language parsing","Not doing data centric apps","Windows;Linux","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Lack of good tutorials/documentation;Don't understand the compiler errors;Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 1:16:17 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;C++;F#","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Async workflows;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;printf that is type checked;The ""piping"" idiom;Type inference;Type providers","Interactive development;Object expressions;Quotations;Units of measure","WebSharper","Links and instructions from fsharp.org;F# bloggers","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","Need examples to be written as if they are part of a larger program, e.g. naming of record fields can cause type resolution hassles if multiple record types use the same field name.","Internal enterprise projects;Commercial products","Utilities and tools;Commercial web site/app","SQL databases","Windows;Javascript as a platform","It's used unofficially","Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","F# needs peer momentum, it's not a primary language in our workplace because it is not seen as a primary language in the workforce. How many job ads are for F# vs C#?","Understanding type inference and indentation rules, learning how to avoid mutability.","Not being part of the core .NET distribution;Difficulty in troubleshooting problems","It would be nice to debug through pipelined code and see the values at each step.","","I love how when refactoring code in F# the compiler helps ensure you make all the changes required, and type inference means less places to update."
"2017/05/04 1:42:26 pm CET","5-10 years","Data or analytics related","Yes","Experienced","C#;F#;Javascript","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers;StackOverflow chat","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Quotations;Static type constraints;Units of measure","Fable","MSDN;F# books;F# bloggers;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Open source projects","Games;Non-commercial web site/app","NoSQL database;Textual & flat file data","Windows;Javascript as a platform;Linux","I don't use F# at work","Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation","Working with C#-centric tooling","None","",""
"2017/05/04 1:50:42 pm CET","10 or more years","Commercial software/web development","No","Learner","C#;Javascript","1-2 years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;printf that is type checked;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Computation expressions;Quotations;Units of measure","","F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos","","","","","","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Lack of good tutorials/documentation;Not enough real-world code to learn from","","","",""
"2017/05/04 2:24:26 pm CET","10 or more years","hobby","No","Intermediate","Python","Less than a year","Nuget/Paket
Too .NET centric and overcomplicated","I use it for hobby or side projects","Windows","VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Object-oriented compatibility","ionide","MSDN;Links and instructions from fsharp.org;F# bloggers;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information","Jupyter notebook","Not applicable. None of my F# code is used by other people","None - Just playing around","Textual & flat file data;Not doing data centric apps","","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","","Nuget/Paket/building","Working with C#-centric tooling;Performance issues;Cross-platform issues","","",""
"2017/05/04 2:25:20 pm CET","10 or more years","Enterprise development","Yes","Learner","C#;Javascript","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs","Active Patterns;Async workflows;Object-oriented compatibility","","MSDN;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories;More short ""live coding"" videos","","Not applicable. None of my F# code is used by other people","Games","Not doing data centric apps","Azure","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Fad: They have concerns over long term language viability","","Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 2:51:33 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#;Javascript","2-3 years","only the job market could ever force me to stop. but that's not today.","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;Object expressions;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Units of measure","Agents (MailboxProcessor);Async workflows;Computation expressions;Quotations","holy cow, thinking of this made me realize I don't think I've actually overcome a learning gap for any F# library to keep using it consistently.
Looking at my work projects... I don't seem to have a single community/nuget/otherwise created F# library, just lots of my own F# libs.
I'm getting closer and closer to getting over the hump on Fable.
Tooling:
LinqPad (for at least 8 years, F# in it for as long as I've been doing F#) (but it's getting less and less enjoyable with no VI support)
VsCode (One of the non-released work projects is using F#Make)
fssnip.net
I'd probably use more paket if I could get a response from someone on how to get paket to use a parent folder to install packages. (Only one project is currently using paket, but I want all packages to be loaded into the same solution folder)","Links and instructions from fsharp.org;F# books;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials;online exercises/coding games","More material with short ""cookbook"" style information;More interactive tutorials (e.g. like the F# Koans);in-depth F# msbuild or vscode information","tons of tooling work inside VS2017 and VsCode. ( I still have intellisense red underlines on code that builds and runs fine in BOTH)
with the sigdata and other compressed into the same lib like there is a closed issue for (but unreleased)
more acceptance from the C# shops","Commercial products;Open source projects","Commercial web site/app;Text analysis/language parsing","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market","Nothing. Everyone loves it.","I'm the only dev, so.... I guess making more people put it on their resumes so that employers see it's not going to be impossible to replace a dev that does it.

Also, more employers accepting/desiring it so that devs take an interest and learn it.","Don't understand the compiler errors;make static typed parameters easier to write/read, make type provider development easier","Working with C#-centric tooling;intellisense dying or going super slow","adoption. adoption. adoption. (getting people to try it and understand it, there's no way they wouldn't rather be working in it)

F# is an amazing language fighting the popularity of a not-bad language.
Some functional Mac language has to fight objective-c, which is amazingly awful. So who's getting popular far more quickly? the mac language. see: http://ericsink.com/entries/fsharp_chasm.html","explain what is meant by 'primary programming languages'
fix the line that reads: 'In-person: A talks at user groups' to 'In-person: Talks at user groups' or 'In-person A talk at a user group' or 'In-person: Talks at a user group'","I want units of measure for more types, especially string types."
"2017/05/04 3:01:31 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#;Javascript","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;Vim","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Async workflows","Fsharpforfunandprofit.org
FParsec
","MSDN;F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Text analysis/language parsing","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 3:14:46 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;F#;Go;Javascript;Typescript","4 or more years","","I use it for hobby or side projects","Windows;Mac;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Speed of development","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;Type inference;Type providers","Agents (MailboxProcessor);Object expressions;Object-oriented compatibility","Chiron
Suave
Chessie
Paket
Fake","F# books;F# bloggers;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","There's a lot of good content out there already, it just needs to be curated and collated and presented in some sort of more directed, exploratory form. Get the syntax down, then immediately go solve a problem that the reader has in one of several domains using these tools/features/idioms","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app","SQL databases;NoSQL database;Textual & flat file data;Data integration and EAI","Windows;Javascript as a platform;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft;No buy-in: There is lack of acceptance from other teams","Hard question. Our biggest blocker is time quickly followed by indifference. Most of the developers on my teams come from dynamic languages and simply don't see many of the benefits of f# as viable in the first place. This is because they haven't done large, distributed multi team projects before. They haven't felt the pain points that F# solves. So we first have to demonstrate that there is pain before learning can even begin.","Installation process","Lack of F# friendly libraries;Working with C#-centric tooling;Cross-platform issues","The xplat focus still seems second class in the language. I think we'll get more adoption from non C# developers, because I only ever get push back from them, so I think we should focus community time and tooling on making ionide even faster/better and present that as the face of xplat F# dev. Plus despite all the work that Enrico has done on netcore, it's really painful to not be able to use typeproviders on netcore. They are a feature I use all the time in the web world.","",""
"2017/05/04 3:18:42 pm CET","5-10 years","Consulting","No","Beginner","C#","1-2 years","Keep getting switched back to C# projects","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Type inference","Agents (MailboxProcessor);Type providers","Continually improving intellisense and error descriptions in VS","F# bloggers;Videos (e.g. Community for F#);Diving in blindly and figuring it out","Practical only. I don't care about theory.","In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight);Cookbook style small tutorials for implementing practical ""Things"" in F#","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material","Assume the audience doesn't have a CS or Math background. ELI5","Commercial products","Mainstream business & enterprise applications;Commercial web site/app;Mobile apps","NoSQL database","Javascript as a platform;Linux;iOS;Android","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Don't understand the compiler errors;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Tooling isn't on par with C# tooling","",""
"2017/05/04 3:54:12 pm CET","2-5 years","Commercial software/web development","Yes","Intermediate","C#;F#;Kotlin","2-3 years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Visual Studio 2015 or newer;JetBrains Rider","Twitter;fsharp channel on Slack;HN, Reddit and other programming news sites","Correctness (no nulls, it works first time);Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","No dependency cycles;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Quotations;Type providers;Units of measure","","MSDN;F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts;F# specs","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Recorded talks from a conference or user group","More material with in-depth tutorials;More short ""live coding"" videos","","Commercial products;Open source projects","Utilities and tools","Not doing data centric apps","Windows;Mac;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Technical reasons;Most codebase is in C# already.","","I can't use my knowledge from C# or other imperative languages","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 4:03:20 pm CET","2-5 years","Academic, research, or related","Yes","Intermediate","C++;Haskell;Java;Python","Less than two months","","I use it for research or academic work","Linux","VS Code (with Ionide)","fsharp channel on Slack","","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","","FParsec","MSDN;Knowing Ocaml","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","","","Academic project","Research/Teaching;Text analysis/language parsing","Textual & flat file data","Linux","Academic work","Better for solving complex problems","Nothing. Everyone loves it.","","Knowing Ocaml made it easy","Lack of documentation on some library","I don't know. It got pretty good tooling. It just need more user. I'd say focus on spreading and maker a better ecosystem (better tooling, better library, better tutorial)","",""
"2017/05/04 4:55:30 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C;C++;Python","Less than two months","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type inference","","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Machine learning","Not doing data centric apps","Windows;Linux;Azure;Amazon Web services","I don't use F# at work","","","","Lack of good tutorials/documentation;Not enough real-world code to learn from","","","",""
"2017/05/04 5:15:14 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#","2-3 years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Having fun again;Learning functional programming in general","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Computation expressions;No dependency cycles;The ""piping"" idiom;Type inference;Units of measure","Quotations","Powertools
Fsharp.data","F# books;Fsharpforfunandprofit","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with short ""cookbook"" style information","","Internal enterprise projects;Commercial products","Custom development/specialist markets;Data analysis/statistics","SQL databases","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;More productive with fewer developers;Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","Not enough real-world code to learn from","Cross-platform issues","","",""
"2017/05/04 5:31:45 pm CET","Less than a year","Data or analytics related","No","Learner","Clojure;F#","Less than a year","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites","Great community;Learning functional programming in general","Immutability by default;The ""piping"" idiom;Type providers;Units of measure","Agents (MailboxProcessor);Async workflows;Object-oriented compatibility","","MSDN;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Games;Commercial web site/app;Data analysis/statistics;Text analysis/language parsing","SQL databases;Textual & flat file data;Analytics","","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Lack of good tutorials/documentation;Most things expect a c# background ","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 6:28:25 pm CET","10 or more years","Consulting","Yes","Learner","C#;F#","Less than two months","","I use it for hobby or side projects","Mac","Xamarin;VS Code (with Ionide)","Twitter","Great community;Having fun again;Learning functional programming in general","Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type providers","Integration with non-F# libraries;Object-oriented compatibility","","F# bloggers;Personal mentoring;Reading F# code written by experts","Theory first, to get a rigorous foundation","Books or longer articles explaining full context","More material with real-world examples and war stories;More podcasts and other audio-only material","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","iOS;Android;Azure","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Don't understand the compiler errors","Not being part of the core .NET distribution","","",""
"2017/05/04 6:42:29 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#","2-3 years","It's not appreciated in my work-place. ","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;No dependency cycles","Agents (MailboxProcessor);Quotations;Static type constraints","ionide, all the work they are doing on the VS IDE experience. ","MSDN;F# books;F# bloggers;Links posted on social media such as Twitter","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days)","More material with in-depth tutorials","","Not applicable. None of my F# code is used by other people","Utilities and tools;Other","SQL databases;Textual & flat file data;radio","Windows;Mac;Azure","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Installation process;too tactical, not enough theory","","We either should be truly funded by Microsoft or not. This half-way situation isn't helping anyone. ","",""
"2017/05/04 6:43:02 pm CET","2-5 years","Enterprise development","Yes","Experienced","C#;Java","1-2 years","","I use it for hobby or side projects","Windows","Emacs;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;No dependency cycles;Object expressions;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Async workflows;Integration with non-F# libraries;Object-oriented compatibility;Units of measure","suave and Ionide. ","Links posted on social media such as Twitter;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More short ""live coding"" videos","F# is awesome in interactive and scripting manner. But creating whole build process and project which is equivalent in quality to the one given by Visual Studio is not event close. If I want to use Emacs still managing project or god no solution is just painful. ","Internal enterprise projects","Mainstream business & enterprise applications","SQL databases;Read-only data sources such as feeds","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Installation process;Not enough real-world code to learn from","Working with C#-centric tooling;Cross-platform issues","F# is awesome in interactive and scripting manner. But creating whole build process and project which is equivalent in quality to the one given by Visual Studio is not event close. If I want to use Emacs still managing project or god no solution is just painful.  <--- this again","",""
"2017/05/04 6:45:54 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;Javascript;Visual Basic","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Speed of development","Active Patterns;Async workflows;Backtick naming;Immutability by default;Interactive development;The ""piping"" idiom;Type inference;Type providers;Units of measure","Agents (MailboxProcessor);Object expressions;Object-oriented compatibility","Canopy","F# books;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","Teach at Universities.","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial)","SQL databases","Windows","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","Get local Universities to teach it.","Don't understand the compiler errors","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/04 6:47:02 pm CET","10 or more years","Enterprise development","No","Experienced","C#;Clojure;F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Active Patterns;Immutability by default;Interactive development;No dependency cycles","Quotations;Type providers;Units of measure","Paket and Fake","F# books;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","In-person: A talks at user groups","More interactive tutorials (e.g. like the F# Koans)","","Commercial products","Financial services;Games;Mobile apps","Event store/logs/Kafka","Windows;Android","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","Friendly community would go a long way to growing the community.","Unpleasant interactions with the community","Working with C#-centric tooling","The obviously ridiculous ms build projects and general tie in to the ms ecosystem.","",""
"2017/05/04 6:49:43 pm CET","5-10 years","Commercial software/web development","Yes","Learner","C#;F#;Typescript","2-3 years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;Emacs;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;printf that is type checked;Type inference","Agents (MailboxProcessor);Quotations;Units of measure","","F# books;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups","More material with in-depth tutorials","","Internal enterprise projects","Utilities and tools;Commercial web site/app","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","","Lack of good tutorials/documentation","Working with C#-centric tooling","","",""
"2017/05/04 6:56:40 pm CET","5-10 years","Consulting","No","Experienced","C#;F#;Javascript","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Async workflows;Backtick naming;Easy integration with other .NET libraries;Immutability by default;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Quotations;Static type constraints;Type providers","FAKE","MSDN;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","Tooling and IDE/editor integration could be more like C# in visual studio","Internal enterprise projects;Commercial products","Mainstream business & enterprise applications;Commercial web site/app;Mobile apps","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows;iOS;Android","It's used unofficially","","Technical reasons","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 6:58:45 pm CET","10 or more years","Enterprise development","No","Experienced","C#;Scala","4 or more years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites;F# bloggers;Google+","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);No dependency cycles;The ""piping"" idiom;Type inference","Object-oriented compatibility;Quotations","FAKE
Paket
","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","I dunno. I've thought about this a lot.","Not applicable. None of my F# code is used by other people","Utilities and tools;Custom development/specialist markets;Mainstream business & enterprise applications;Research/Teaching;Data analysis/statistics","SQL databases;Textual & flat file data;Analytics","Windows;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","It's tough. If you push too hard, everyone thinks of it the way they do CrossFit. Push too little, everyone wonders if F# is yet another scripting language.","Don't understand the compiler errors","Not being part of the core .NET distribution","The performance issues that could arise from the use of records/DUs when compared to mutable structs/classes.","",""
"2017/05/04 7:10:40 pm CET","5-10 years","Enterprise development","Yes","Experienced","F#;Scala","3-4 years","Changed jobs. Previous job was F# based, new job is Scala based.","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default","Agents (MailboxProcessor);Async workflows;Computation expressions;Quotations;Static type constraints;Type providers","F# Power Tools for VS","MSDN;F# books;Links posted on social media such as Twitter;Answers to Stack Overflow questions","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More podcasts and other audio-only material","","","","","","I don't use F# at work","","","","","","","",""
"2017/05/04 7:10:49 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#;Haskell;Visual Basic","4 or more years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;MonoDevelop;Emacs;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom","Quotations;Static type constraints;Type providers;Units of measure","F# Powerpack/Tooling for VS / Ionide","F# books;F# bloggers;Personal mentoring;Structured training/workshops","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context","More material with real-world examples and war stories;More short ""live coding"" videos","","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications;Non-commercial web site/app;Data analysis/statistics;Text analysis/language parsing","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows","I am the team ... it's endorsed by me","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","tooling","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.","no killer lib - see scala/akka","","I would love to be more involved in the community - giving workshops, talks, etc. (I think my strenght is more in tutoring and less in OSS contributions)"
"2017/05/04 7:16:52 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;F#;Javascript;Typescript;Visual Basic","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Correctness (no nulls, it works first time);Learning functional programming in general","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Simple ""one liner"" type definitions for records and DUs","Object expressions;Quotations","Paket
Freya
Fake","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Reading F# code written by experts","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More podcasts and other audio-only material","","Open source projects","Utilities and tools;Mainstream business & enterprise applications","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","Make it less fringe (public impression)","","","","",""
"2017/05/04 7:17:14 pm CET","5-10 years","Enterprise development","Yes","Experienced","C#;F#;Javascript;Python;Typescript;Emacs Lisp","I was using F# but have stopped","Lack of opportunities to use in day job. ","Just tinkering","Mac;Linux","Emacs","Twitter;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Quotations;Units of measure","Mono - not F# specific, but would never have got started without it. ","F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","Better plugins for non-MS editors, so people can start using F# without learning a new IDE. ","Internal enterprise projects;Open source projects","Utilities and tools;Data analysis/statistics","SQL databases;Textual & flat file data","","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","Better support from MS. ","Not enough real-world code to learn from","Not being part of the core .NET distribution;Cross-platform issues","Microsoft (reputation, being second fiddle to C#, being late to the cross platform game)","",""
"2017/05/04 7:20:45 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;F#;Javascript;Typescript","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Backtick naming;Easy integration with other .NET libraries;Simple ""one liner"" type definitions for records and DUs;Type inference;Type providers","Agents (MailboxProcessor);Quotations","Canopy
Ionide","Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Structured training/workshops","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More short ""live coding"" videos","","Not applicable. None of my F# code is used by other people","Utilities and tools;Mainstream business & enterprise applications","SQL databases","Windows;Javascript as a platform;Azure","It's officially endorsed in my team for non-critical/non-production code","Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 7:25:10 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;F#","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Vim;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Object-oriented features (inc. C# compatibility, conciseness);printf that is type checked;Type inference;Type providers","Units of measure","","F# books;F# bloggers;Scott W blog","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","","","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app","SQL databases;NoSQL database","Windows;Azure","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","Not really that easy to write high perf web api and that is as easy to do with c# in web api.","","A real web api alternative with perf focus","Lack of F# friendly libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","F# is most useful without having to be consumed by c# imo, and high perf web api libraries such as web api 2 are a bit cumbersome to use ","",""
"2017/05/04 7:49:07 pm CET","5-10 years","Commercial software/web development","Yes","Intermediate","C#;Javascript","Less than a year","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Backtick naming;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers;Units of measure;Pattern matching","Agents (MailboxProcessor);Object expressions","FSharp.Data
FParsec
FsCheck","MSDN;Links and instructions from fsharp.org;F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","Microsoft needs to be more involved in promoting F# as an alternative to C#, instead of a second class language. Making F# more visible will lead to more resources being created for learning F#.","Not applicable. None of my F# code is used by other people","Utilities and tools;Data analysis/statistics;Text analysis/language parsing","SQL databases;Textual & flat file data","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","","Not being part of the core .NET distribution;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 7:49:53 pm CET","1-2 years","Commercial software/web development","Yes","Experienced","C#;F#;Java;Javascript","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers","Conciseness of code (I can see more at a glance);Having fun again;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Interactive development;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Type providers;Units of measure","""Debug in Interactive"" in VS 2017","F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","Focusing more at first on the easy/immediate uses, like scripting","Not applicable. None of my F# code is used by other people","Utilities and tools","Textual & flat file data","Windows","It's used unofficially","Correctness: fewer bugs and less rework;More productive with fewer developers","No buy-in: There is lack of acceptance from other teams","","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","It is overshadowed by C# in ease of use and application range (eg. Unity)","",""
"2017/05/04 7:54:10 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;C++;F#","3-4 years","","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Vim;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Functional but can be tweaked to get high performance","Active Patterns;Async workflows;Immutability by default;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Units of measure","","Links and instructions from fsharp.org;F# books;F# bloggers;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories","","Open source projects","Utilities and tools;Non-commercial web site/app;Mobile apps","SQL databases;Textual & flat file data","Windows;iOS;Android","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Faster time to market","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Lack of good tutorials/documentation;Don't understand the compiler errors","Lack of F# friendly libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 9:02:46 pm CET","2-5 years","Student","No","Intermediate","C++;F#;Javascript;Typescript;Elm","Less than a year","","I use it for student work","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Learning functional programming in general","Async workflows;Computation expressions;Immutability by default;Type inference","Agents (MailboxProcessor);Object expressions;Object-oriented compatibility;Quotations;Units of measure","Suave
FsCheck
Chessie","Links and instructions from fsharp.org;F# books;F# bloggers","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More podcasts and other audio-only material","","Internal enterprise projects","Mainstream business & enterprise applications;Non-commercial web site/app","NoSQL database","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Tooling (Which is already getting better and better)

F# Library Support !","","Thanks for the constant improvememt of F# and the community!"
"2017/05/04 9:05:04 pm CET","5-10 years","Commercial software/web development","No","Intermediate","C#;F#;Javascript","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Units of measure","FsCheck","F# books;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Attending a talks as part of a conference;Books or longer articles explaining full context","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Commercial products","Machine learning;Commercial web site/app","Data integration and EAI","Windows","It's officially endorsed in my team for non-critical/non-production code","Correctness: fewer bugs and less rework;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed","","Don't understand the compiler errors","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/04 9:38:56 pm CET","5-10 years","Financial services or similar","No","Intermediate","C;C#;C++","Less than a year","","I use it for hobby or side projects","Linux","VS Code (with Ionide)","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;Quotations;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Object-oriented compatibility","Ionide","Links and instructions from fsharp.org;F# bloggers;Answers to Stack Overflow questions;Personal mentoring;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Open source projects","None - Just playing around;Utilities and tools;Text analysis/language parsing","Textual & flat file data","Linux","We do workshop in our own time for fun and hope","Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","egg and chicken problem. We need more contents and more official endorsements.","nothing. everything is fine for me. good job!","Not being part of the core .NET distribution;Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.;Performance issues","I would love a _strict mode_ to ban/block all mutable code.a warning message for example or else.","all good","Kepp going!"
"2017/05/05 12:05:51 am CET","5-10 years","Consulting","No","Intermediate","C#;F#;Haskell","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;Vim","HN, Reddit and other programming news sites;F# bloggers;StackOverflow chat","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Object expressions;Object-oriented compatibility;Quotations;Units of measure","FSharpPlus
SQLProvider","F# books;F# bloggers;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects;Open source projects;Not applicable. None of my F# code is used by other people","None - Just playing around;Utilities and tools;Algorithm-heavy business applications (non-financial);Mainstream business & enterprise applications","SQL databases;Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Efficiency/Performance;Easy concurrency with async and agents","Fad: They have concerns over long term language viability;Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft;No buy-in: There is lack of acceptance from other teams","","","Less sophisticated tools for refactoring, etc.;Cross-platform issues","","",""
"2017/05/05 1:40:52 am CET","10 or more years","Financial services or similar","Yes","Learner","F#;Smalltalk","Less than a year","","I use it at work or for other commercial uses","Windows","VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Object-oriented compatibility;Quotations","Ionide
Fparsec
Typeproviders","F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information","","Internal enterprise projects","Financial services","Not doing data centric apps","Azure functions","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Nothing but not love yet","","Don't understand the compiler errors","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Difficulty in troubleshooting problems","","",""
"2017/05/05 3:29:46 am CET","10 or more years","Consulting","No","Learner","C#;F#;Javascript;Rust","I was using F# but have stopped","Really small job market for F#
Concessions in the language to be able to run in the .NET ecosystem compared to a fully-fledged functional language","I use it for hobby or side projects","Windows;Mac","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;Xamarin;VS Code (with Ionide)","Twitter;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Async workflows;Computation expressions;Integration with non-F# libraries;Interactive development;Object expressions;Object-oriented compatibility;Quotations;Static type constraints;Type providers;Units of measure","FParsec
","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","I'd like to see a book about making the shift to the functional mindset using F#. What does best practice using F# look like?","Open source projects;Not applicable. None of my F# code is used by other people","Financial services;Non-commercial web site/app;Data analysis/statistics;Text analysis/language parsing","Textual & flat file data;Analytics;Read-only data sources such as feeds","Windows;Mac","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams;Uninterested in learning something new and not mainstream","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling","","",""
"2017/05/05 6:47:17 am CET","5-10 years","Enterprise development","Yes","Intermediate","C#;Java;Objective-C;Swift","1-2 years","","I use it for hobby or side projects","Mac","Xamarin;VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;Simple ""one liner"" type definitions for records and DUs;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Object-oriented compatibility;Quotations;Units of measure","","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","Windows;iOS;Android;Azure","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors;Not enough real-world code to learn from","","","",""
"2017/05/05 11:59:28 am CET","5-10 years","Commercial software/web development","Yes","Intermediate","C#;Javascript","Haven't really used it yet","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Having fun again;Learning functional programming in general","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Computation expressions;Object expressions;The ""piping"" idiom","Active Patterns;Quotations;Type providers;Units of measure","","Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","","","It's used unofficially","","Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much","","Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/05 1:42:13 pm CET","5-10 years","Enterprise development","No","Intermediate","C#;F#;Python","1-2 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly","Having fun again;Learning functional programming in general","The ""piping"" idiom;Type providers","Active Patterns","","MSDN;F# books","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Utilities and tools","SQL databases","Windows;Linux;Raspberry Pi","It's officially endorsed in my team for non-critical/non-production code","More productive with fewer developers;Faster time to market","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Difficulty in troubleshooting problems","","",""
"2017/05/05 2:23:25 pm CET","2-5 years","Commercial testing","Yes","Learner","C#;Java","Less than two months","","I use it for hobby or side projects","Windows;Mac;Linux","Visual Studio 2015 or newer;Vim;VS Code (with Ionide);OmniSharp","fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","","","MSDN;Links and instructions from fsharp.org;F# books","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More short ""live coding"" videos","","Not applicable. None of my F# code is used by other people","None - Just playing around;Games","Textual & flat file data;Not doing data centric apps","Windows;Mac;Linux","I don't use F# at work","Correctness: fewer bugs and less rework","No buy-in: There is lack of acceptance from other teams;Java oriented company","","Don't understand the compiler errors;Not enough real-world code to learn from","","","",""
"2017/05/05 2:55:46 pm CET","2-5 years","Student","No","Learner","C#;F#","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type providers","Agents (MailboxProcessor);Quotations;Static type constraints;Units of measure","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials","","","Utilities and tools;Mainstream business & enterprise applications","SQL databases","Windows;Linux","It's used unofficially","Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers","","Lack of good tutorials/documentation","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/05 4:19:09 pm CET","5-10 years","Consulting","No","Intermediate","C#;F#;Javascript","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Active Patterns;Async workflows;Computation expressions;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Interactive development;Quotations","Suave","MSDN;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Non-commercial web site/app","SQL databases;NoSQL database","Azure","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/05 4:29:02 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;Erlang;F#","3-4 years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;The ""piping"" idiom;Type inference","Quotations;Units of measure","","MSDN;Links and instructions from fsharp.org;F# bloggers;http://fsharpforfunandprofit.com/","Practical first, with theory introduced as needed","","More podcasts and other audio-only material","","Internal enterprise projects","Utilities and tools;Mainstream business & enterprise applications","Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents","","","Don't understand the compiler errors","","","","I've started tinkering with F# for a personal ML project, but I didn't report on it here because this is recent for me, and my responses are more reflective of what I've been doing for the past year"
"2017/05/05 6:01:15 pm CET","10 or more years","Academic, research, or related","Yes","Expert","F#","4 or more years","","I use it for research or academic work","Windows;Linux","Visual Studio 2015 or newer","F# Weekly;F# bloggers","Correctness (no nulls, it works first time);Speed of development;Functional but can be tweaked to get high performance","Agents (MailboxProcessor);Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Quotations;The ""piping"" idiom;Type inference;Type providers;Units of measure","","","MSDN;Links and instructions from fsharp.org;F# bloggers;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","","","","Internal enterprise projects;Open source projects","Research/Teaching;Text analysis/language parsing","Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","","","","","","",""
"2017/05/05 9:17:02 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;Javascript;Scala","I was using F# but have stopped","Focused on other languages projects.
Community looks a bit stuck.
No real community projects, always the same saying the same, no so much community activities (meetup, kata, hacathons) comparing to any other languages (Scala, Haskell, Rust, JS, ...).
Community looks is more focused on joke on the other languages or ""advanced"" feature than actual progressing as a community","I use it for research or academic work","Mac;Linux;Mobile","Xamarin;MonoDevelop;Vim;Sublime Text;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","just seeing as different functional concepts should be used in the same way, almost, in diff languages","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default","Object expressions;Object-oriented compatibility","","Links and instructions from fsharp.org;F# books;F# bloggers","Theory first, to get a rigorous foundation","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Recorded talks from a conference or user group","More material with in-depth tutorials;workshops","be an open and active community.
simple focused events where also not professionals can join (1 day and cheap events, more often)","Commercial products","Financial services;Mobile apps","SQL databases;NoSQL database;Event store/logs/Kafka","Linux;iOS;Android;Azure;Amazon Web services","It's used unofficially","other","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft;Technical reasons;lacking advanced feature and supporting communities","more active, less single man centric, less focus in selling courses or single multi-days expensive events and so on..
really focus on communities, on create and share knowledge, projects and ideas","Unpleasant interactions with the community;more simple and open activities","Lack of F# friendly libraries;Cross-platform issues","community
lacking advanced FP feature..
""community"" too much related to MSFT and waiting for supports or other things from MSFT instead of creating projects","shorter and less open questions: statistically are difficult to summarise",""
"2017/05/05 11:30:45 pm CET","10 or more years","Consulting","No","Intermediate","C#;Elixir;F#;Javascript;Typescript","Less than a year","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;The ""piping"" idiom","Async workflows;Object-oriented compatibility","","F# bloggers;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","More examples of f# instead of c# in large asp.net web api apps","Internal enterprise projects","Utilities and tools;Non-commercial web site/app;Research/Teaching","SQL databases;Textual & flat file data","Windows;Javascript as a platform;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages","Real world examples web api solutions","Not enough real-world code to learn from","Not being part of the core .NET distribution","Examples of real world alternative solutions to c# w code","",""
"2017/05/05 11:39:41 pm CET","Less than a year","Financial services or similar","No","Experienced","F#;kdb+/q","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2012 or 2013","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;The ""piping"" idiom;Type inference;easy multicore parallelism","Object-oriented compatibility;Quotations;Static type constraints;Type providers;Units of measure","Deedle
Fsharp.Data
fspickler

","Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts;jdh30 on reddit","Practical only. I don't care about theory.","Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","better repl output formats in VS (grids, to excel,...)
","Internal enterprise projects","Financial services","SQL databases;kdb+/q","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents;Better for solving complex problems","Nothing. Everyone loves it.","","more imaginative repl outputs/formats","Not being part of the core .NET distribution","lack of date literals, i.e., let dt = 2017.04.05","salary?",""
"2017/05/06 2:02:43 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;Javascript","Less than a year","","I use it for student work","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Backtick naming;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","","Suave
Fsharp.data","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects","Financial services;Mainstream business & enterprise applications;Research/Teaching","SQL databases;NoSQL database;Textual & flat file data","Windows;Azure","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","More meetups. I'm in Seattle, joined the Fsharp meetup group 6 months ago, and have seen exactly bupkiss on the subject.","Installation process","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.","Frankly, charismatic evangelists. I'm hoping I can change that in the Seattle area, at least.","",""
"2017/05/06 12:03:39 pm CET","10 or more years","Commercial software/web development","No","Experienced","C#;Javascript;Typescript","Less than a year","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Having fun again","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type inference;Type providers;Concise partial application","","Ionide
FSharp.Data","F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information","It has been difficult to find practical material. While it was enjoyable at first, the ratio of fun, hype, and toy code to practical instruction has become tedious.

I already believe in F#. Now show me something useful!","Not applicable. None of my F# code is used by other people","Custom development/specialist markets;Games","SQL databases;Web scrapings","Linux","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","Focus on solutions to real-world problems. From what I've seen, the Clojure and Scala communities have done a good job of reaching Java developers in this way. F#, much less so.

A big part of the Clojure message has been ""devs who are new to it get up and running with it quicker than you'd expect."" I have found this message compelling.

Fable has a lot of potential for sharing logic and models between client and server, but no clear path for implementation.","Lack of good tutorials/documentation;Not enough real-world code to learn from;Too much web space wasted on persuasion","Less sophisticated tools for refactoring, etc.;Type checking errors could be clearer","Neglect from Microsoft.

Second place: a dearth of practical learning material.","","Love the language and effort. Thank you for administering this survey."
"2017/05/06 2:51:54 pm CET","10 or more years","Commercial software/web development","No","Intermediate","F#;Rust;Swift","3-4 years","","I use it at work or for other commercial uses","Mac","VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Units of measure","Type providers","","F# books;Structured training/workshops","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Commercial products","Algorithm-heavy business applications (non-financial);Mobile apps;Data analysis/statistics","SQL databases;Event store/logs/Kafka","Linux;Amazon Web services","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","First class docker/AWS workflow, Tutorials, documentation etc.

macOS based IDE, Denugger, CLI toolchain support","Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Cross-platform issues","The focus on trying to be a better C# instead of being a better Ruby/Python/Node.js etc.","",""
"2017/05/06 3:35:36 pm CET","2-5 years","Enterprise development","No","Learner","C#;Javascript","Less than a year","","I use it for hobby or side projects","Windows","VS Code (with Ionide)","F# Weekly;Books","Conciseness of code (I can see more at a glance);Learning functional programming in general","Interactive development;Simple ""one liner"" type definitions for records and DUs;Type inference;patrern matching","Agents (MailboxProcessor);Object expressions;Object-oriented compatibility;Quotations;Type providers;Units of measure","Ionide
FSI
Paket","F# books;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Solving problems","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Textual & flat file data","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","Make more enterprise level usage cases visible.","","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/06 4:56:49 pm CET","10 or more years","Retired","No","Learner","F#","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;F# bloggers","Correctness (no nulls, it works first time);Great community;Learning functional programming in general","Active Patterns;Interactive development;The ""piping"" idiom;Type inference","Computation expressions;Object expressions;Object-oriented compatibility;Quotations;Units of measure","","MSDN;F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with short ""cookbook"" style information","","Not applicable. None of my F# code is used by other people","Other","Not doing data centric apps","Raspberry Pi","I don't use F# at work","","","","Lack of good tutorials/documentation","Not being part of the core .NET distribution;Working with C#-centric tooling","","",""
"2017/05/06 5:08:10 pm CET","10 or more years","Entertainment and Advertising","No","Intermediate","C#;F#;Javascript;Typescript","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;Google+","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Backtick naming;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;Object expressions;Object-oriented features (inc. C# compatibility, conciseness);printf that is type checked;Quotations;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Units of measure","Agents (MailboxProcessor);Units of measure","Visual F# Tools 
Ionide
Akka.Net","F# books;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material","Live coding building actual applications or showing application architecture ","Internal enterprise projects","Mainstream business & enterprise applications;Commercial web site/app;Non-commercial web site/app","SQL databases;Textual & flat file data","Windows;Azure","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","Dotnet Core Tooling in Visual Studio ","Greatly improve Dotnet Core Tooling in Visual Studio ","Not enough real-world code to learn from;Tooling","Less sophisticated tools for refactoring, etc.","Tooling. If the tooling can be on party with C#, I believe that the community can easily handle the rest","",""
"2017/05/06 5:35:37 pm CET","2-5 years","","No","Learner","F#","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","F# Weekly;fsharp channel on Slack;StackOverflow chat","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Great community;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;Quotations;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Object-oriented compatibility;Static type constraints;Units of measure","FsXAML
FSharp.ViewModule","Answers to Stack Overflow questions;F# room on SO, F# channel on Slack","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Open source projects","Non-commercial web site/app;Data analysis/statistics;Text analysis/language parsing","SQL databases","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","Lack of good tutorials/documentation","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","","",""
"2017/05/06 6:53:28 pm CET","10 or more years","Data or analytics related","Yes","Learner","C#;Python","1-2 years","","Just tinkering","Windows;Mac","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Computation expressions;Quotations","","MSDN;F# books;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","","More material with in-depth tutorials;More material with short ""cookbook"" style information;More interactive tutorials (e.g. like the F# Koans)","","","","","","I don't use F# at work","","","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/06 7:11:23 pm CET","10 or more years","Commercial software/web development","Yes","Learner","C#;F#;Javascript","3-4 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Quotations;Type inference;Units of measure","","FAKE
Canopy","Links and instructions from fsharp.org;F# books;F# bloggers;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Open source projects;Not applicable. None of my F# code is used by other people","Utilities and tools;Commercial web site/app","Not doing data centric apps","Windows;Android","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Don't understand the compiler errors;Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/06 9:04:04 pm CET","1-2 years","Open source development","No","Intermediate","C#;F#;Javascript;Python","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Speed of development","Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom","","","Links and instructions from fsharp.org;F# bloggers;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: A talks at user groups","More material with in-depth tutorials;More material with real-world examples and war stories","","Open source projects","Utilities and tools;Non-commercial web site/app;Mobile apps","","Windows","It's used unofficially","Efficiency/Performance;Better for solving complex problems","","","","","","",""
"2017/05/06 9:36:27 pm CET","10 or more years","Commercial software/web development","No","Learner","C#;F#","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Object expressions;Object-oriented compatibility;Quotations;Static type constraints;Units of measure","","F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools;Commercial web site/app","Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability;Technical reasons","I don't think there's anything anyone can do if a team isn't open for another language.","Tooling (e.g. Refactoring)","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Tooling, compared to, say, R#, F# tooling is crap.","","I like single-page-surveys because you can immediately estimate how long it will take you to complete it."
"2017/05/06 11:45:23 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#;Javascript","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);The ""piping"" idiom;Type providers","Agents (MailboxProcessor);Async workflows;Interactive development;Object expressions","Fake
FSharp.Data.SqlClient","F# bloggers","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context","More material with real-world examples and war stories","Show how the language features = competitive advantage","Internal enterprise projects;Commercial products","Utilities and tools;Algorithm-heavy business applications (non-financial);Commercial web site/app","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","Improve tooling to achieve parity with C#","Lack of good tutorials/documentation;Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Not given proper backing by Microsoft - treated as an academic curiosity. Makers sense as they don't want C# developers to switch.","",""
"2017/05/07 1:22:21 am CET","10 or more years","Data or analytics related","Yes","Intermediate","C#;F#;R;Typescript;Visual Basic","3-4 years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;Xamarin;VS Code (with Ionide)","F# Weekly;F# bloggers","Functional but can be tweaked to get high performance","Type inference;Type providers","Agents (MailboxProcessor)","Ionide","F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical only. I don't care about theory.","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More podcasts and other audio-only material","","Internal enterprise projects;Commercial products","Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Financial services;Mainstream business & enterprise applications;Data analysis/statistics","SQL databases;Textual & flat file data;Analytics;Data integration and EAI","Windows;Mac;iOS","It's used unofficially","Efficiency/Performance;Better for solving complex problems","No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Difficulty in troubleshooting problems","If you didn't study compsci, it is challenging trying to figure it out","",""
"2017/05/07 1:44:02 am CET","5-10 years","Enterprise development","No","Intermediate","C#;F#;Typescript","2-3 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers;telegram chanel https://t.me/F_Sharp and chat  https://t.me/Fsharp_chat","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;Quotations;The ""piping"" idiom;Type inference","Units of measure","Websharper
Fable
Akkling
Diffsharp","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","Internal enterprise projects;Open source projects","Utilities and tools;Non-commercial web site/app","SQL databases;NoSQL database;Event store/logs/Kafka;Read-only data sources such as feeds","Windows;Javascript as a platform;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","We allready do. We've create russianspeaker comunity for teaching IT-mangers and developers that F# is awesome! :) 

It works when I said (with proofs) that Muigel de Icaza loves F# and want to use F#. I think it'll work when famous developers will call other developers to use F#","Lack of good tutorials/documentation;Don't understand the compiler errors;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","","",""
"2017/05/07 2:34:40 am CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;Javascript;Ruby","1-2 years","","Just tinkering","Mac","VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;No dependency cycles;The ""piping"" idiom;Type providers","Async workflows;Computation expressions","","F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Practical only. I don't care about theory.","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More material with real-world examples and war stories","Generally, I'm trying to solve a real-world problem. F# seems to be a 2nd class citizen, and it's hard to find docs on how to do common things like build a web application, build a GraphQL application, etc.","","None - Just playing around","SQL databases;Event store/logs/Kafka","","I don't use F# at work","","Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft;Not really 1st class citizen in web framework world","Have really solid cross-platform functional-first web framework and dev tooling.","Lack of good tutorials/documentation;Don't understand the compiler errors;Not enough real-world code to learn from","Lack of F# friendly libraries;Less sophisticated tools for refactoring, etc.","The IDE experience is still sub-par vs other languages.","",""
"2017/05/07 8:01:38 am CET","10 or more years","Commercial software/web development","No","Experienced","C#;F#","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Type providers","FSharp.Data
FsUnit
FsCheck
Unquote
FParsec
","F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Commercial products","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Data analysis/statistics","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Don't understand the compiler errors","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Tooling in Visual Studio. The most glaring single example by far is that Find References does not work between C# and F# projects.","",""
"2017/05/07 12:19:12 pm CET","2-5 years","Enterprise development","No","Learner","C#;F#;Javascript","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Functional but can be tweaked to get high performance;Nicer dev workflow with FSI","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;The ""piping"" idiom;Type inference;Type providers;Units of measure","Active Patterns;Agents (MailboxProcessor);Computation expressions","FsCheck
FParsec
Ionide
Visual FSharp Tools
FSI","F# books;F# bloggers;Links posted on social media such as Twitter;Videos (e.g. Community for F#);Project Docs","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people;Prototypes mostly - wouldn't call that published","Mainstream business & enterprise applications;Commercial web site/app;Non-commercial web site/app;Data analysis/statistics;Text analysis/language parsing","SQL databases;Textual & flat file data;Web APIs","Windows;Linux;Azure","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems;F# coding style works really well for distributed systems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed","Highlighting companies that already use it.
More focus on transition training for VB.Net and C# developers.
","Installation process;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Working with C#-centric tooling","C# tooling seems to be always miles ahead of F#. Especially MSFT projects seem to handle F# as an afterthought (eg Microsoft Bot Framework doesn't offer any F# resources at all)","",""
"2017/05/07 2:38:38 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;Java","I was using F# but have stopped","Lack of opportunity but constantly researching, reading.","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide);Rider","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom","Computation expressions;Quotations","","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","","","","","","","","","Unpleasant interactions with the community;Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/07 5:10:30 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;F#;Perl","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Great community;Having fun again;Learning functional programming in general","Immutability by default;Interactive development;No dependency cycles;Type providers","Active Patterns;Agents (MailboxProcessor);Object expressions;Static type constraints","Type providers for csv and xml
SQLProvider for an easy and concise data access
","F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects","Financial services","SQL databases;NoSQL database;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Faster time to market","Technical reasons;Performance in some critical areas e.g. sequeneces","","Installation process;IDE sometimes irritating","Working with C#-centric tooling","Tied to .NET and thus strongly depending on the rise and fall of the mothership. Innovation is stronger in Java land despite the language.","","Keep up the good work!"
"2017/05/07 5:10:38 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#;Javascript","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Having fun again","Active Patterns;Immutability by default;Type inference","Object-oriented compatibility","FAKE, Paket, FSUnit","Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context","More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets","SQL databases;Event store/logs/Kafka","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed","More examples of LOB apps and working with existing C# codebases.","Not enough real-world code to learn from","Working with C#-centric tooling","Image in the .net community. Seen as very limited usage areas not general purpose app development.","",""
"2017/05/07 5:19:59 pm CET","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"2017/05/07 5:28:24 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;F#;Javascript;Python;R;Typescript","2-3 years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;Xamarin","Twitter;F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Quotations;Static type constraints;Units of measure","Fparsec
JSON type provider
","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Pluralsight ","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More podcasts and other audio-only material","Still haven't got Code + Ionide to work properly on Mac - great to have a blog post on how to manage solutions/ projects.
VS Studio for Mac is still flakey, but improving.","Commercial products","Algorithm-heavy business applications (non-financial);Machine learning;Mainstream business & enterprise applications;Data analysis/statistics","SQL databases;NoSQL database;Event store/logs/Kafka","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","Better training for moving from OOP to functional patterns with practical examples. 

More tips on integrating with common libraries eg Signal R, Redis (& other NoSQL). ","Installation process;Not enough real-world code to learn from","Lack of F# friendly libraries;Working with C#-centric tooling;Difficulty in troubleshooting problems;Performance issues","Pathway from C# OOP to functional.

Support for F# on non-windows platforms. ","","Our biggest concern is having inexperienced C# developers writing bad F# code, so getting them a practical way of seeing equivalent patterns in functional would be great, especially as a Pluralsight course e,g converting an app from C# to F# by one or more of you guys would be great!

Thanks for your wonderful support of the community. "
"2017/05/07 5:43:10 pm CET","2-5 years","Game development","Yes","Experienced","C#;F#;Java;Objective-C;Python","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Interactive development;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Quotations;Units of measure","FSharp.Data
F# PowerTools
FParsec","MSDN;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Utilities and tools;Games;Data analysis/statistics","Not doing data centric apps","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams;Technical reasons","More examples of how F# makes certain things easy to do.","Don't understand the compiler errors;Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Tooling.","","Thanks for putting efforts into making such survey. Hope it could help in some way."
"2017/05/07 6:37:09 pm CET","5-10 years","Commercial software/web development","No","Intermediate","C#;F#;Java;Javascript;PHP;Python","Less than a year","","I use it for research or academic work","Mac","VS Code (with Ionide)","Twitter;fsharp channel on Slack","Better domain modelling with records and unions;Learning functional programming in general;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Units of measure","","MSDN;Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials","Work on the tooling, everything is not at all smooth yet. Look closely at c# <-> f# tooling interop. e.g. make sure intellisense works for f# types used in c# and vice versa","Commercial products","Custom development/specialist markets;Mainstream business & enterprise applications;Commercial web site/app;Non-commercial web site/app","SQL databases","Windows;Mac;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Faster time to market","Technical reasons;Too little polished tooling to let more junior devs work with it ","","Installation process;Not enough real-world code to learn from","Lack of F# friendly libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","The tight coupling to CLR concepts and way too much effort is put into C# compatibility hampering language development. 
I'd say be sure to keep the OO compatibility pieces but allow people to go wild behind the curtains of that abstraction. DU's etc are already not really easily consumed in C# so why not see that as an inevitability and open up the language to some very welcome and useful concepts like type classes and GADT's which would be very good to solve some tough performance issues","",""
"2017/05/07 6:37:58 pm CET","5-10 years","Commercial software/web development","No","Intermediate","C#;F#;Java;Javascript;PHP;Python","Less than a year","","I use it for research or academic work","Mac","VS Code (with Ionide)","Twitter;fsharp channel on Slack","Better domain modelling with records and unions;Learning functional programming in general;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Units of measure","","MSDN;Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials","Work on the tooling, everything is not at all smooth yet. Look closely at c# <-> f# tooling interop. e.g. make sure intellisense works for f# types used in c# and vice versa","Commercial products","Custom development/specialist markets;Mainstream business & enterprise applications;Commercial web site/app;Non-commercial web site/app","SQL databases","Windows;Mac;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Faster time to market","Technical reasons;Too little polished tooling to let more junior devs work with it ","","Installation process;Not enough real-world code to learn from","Lack of F# friendly libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","The tight coupling to CLR concepts and way too much effort is put into C# compatibility hampering language development. 
I'd say be sure to keep the OO compatibility pieces but allow people to go wild behind the curtains of that abstraction. DU's etc are already not really easily consumed in C# so why not see that as an inevitability and open up the language to some very welcome and useful concepts like type classes and GADT's which would be very good to solve some tough performance issues","",""
"2017/05/07 7:25:05 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;Elixir;F#;Go","3-4 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;Vim;Emacs;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Having fun again","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom","Object expressions","Fake
Suave
","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with in-depth tutorials","","Internal enterprise projects;Commercial products","Machine learning;Mainstream business & enterprise applications;Commercial web site/app;Data analysis/statistics","SQL databases;Textual & flat file data","Windows;Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","","","","Less sophisticated tools for refactoring, etc.;Performance issues","Visual studio still only partially supports it","",""
"2017/05/07 7:33:04 pm CET","10 or more years","Enterprise development","No","Intermediate","C;C#;Javascript","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;MonoDevelop","F# Weekly;HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference","Active Patterns;Quotations","F# Data
Visual Studio
Monodevelop","F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos","","Internal enterprise projects;Commercial products","Custom development/specialist markets;Data analysis/statistics","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Training: They are worried about getting non-F# developers up to speed","","","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","IDE support, especially in Visual Studio, could be better.
Some ugly syntax with too many characters: ""fun"" keyword, active patterns, pipe could perhaps be a single character.","",""
"2017/05/07 7:50:45 pm CET","5-10 years","Enterprise development","Yes","Learner","C#;Javascript","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Atom (with Ionide);VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Units of measure","","F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","","","Not applicable. None of my F# code is used by other people","None - Just playing around","","","I don't use F# at work","","","","Don't understand the compiler errors","Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","","",""
"2017/05/07 7:57:52 pm CET","5-10 years","Data or analytics related","Yes","Experienced","C#;F#;R","3-4 years","","I use it at work or for other commercial uses","Windows;Mac","Visual Studio 2015 or newer;Xamarin;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Async workflows;Object expressions;Static type constraints;Units of measure","Visual F# Power Tools
Ionide","F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Not applicable. None of my F# code is used by other people","Financial services;Mobile apps;Data analysis/statistics","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Faster time to market;Better for solving complex problems","","","Not enough real-world code to learn from","Lack of F# friendly libraries;Less sophisticated tools for refactoring, etc.;Performance issues","","",""
"2017/05/07 8:03:35 pm CET","10 or more years","Data or analytics related","No","Learner","F#;Visual Basic","1-2 years","","I use it for hobby or side projects","Windows","VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type providers","Quotations;Units of measure","Suave
FSharp.Data
ExcelProvider
SQLProvider","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos;Material with exercises and guided projects","","Internal enterprise projects","Utilities and tools;Games;Data analysis/statistics","SQL databases;Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents;Better for solving complex problems","No buy-in: There is lack of acceptance from other teams","","I don't have a strong enough background to understand some of the more abstract concepts.","","","",""
"2017/05/07 8:26:20 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Interactive development;Quotations;Units of measure","Suave.io
Paket
FsUnit
FSharpx
Visual F#
","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts;Mostly f# for fun & profit","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","My experience: not so difficult with strong C# background, with old Ocaml years ago and reading F# book(s)","Internal enterprise projects","Utilities and tools","","Windows","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Can't think of any!","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","","HTH"
"2017/05/07 8:32:07 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;F#;Javascript","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Quotations;Static type constraints;Type providers","FAKE
Paket","F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories","","Internal enterprise projects;Open source projects","Utilities and tools;Custom development/specialist markets;Mainstream business & enterprise applications","Textual & flat file data;Data integration and EAI;Read-only data sources such as feeds","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","","Don't understand the compiler errors;Not enough real-world code to learn from","Lack of good wrappers for non-F# libraries;Working with C#-centric tooling","","",""
"2017/05/07 8:45:55 pm CET","2-5 years","Enterprise development","Yes","Experienced","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions","Algebraic types (inc discriminated unions and tuples);Type inference","Agents (MailboxProcessor);Async workflows;Interactive development;Object expressions;Object-oriented compatibility;Quotations;Type providers;Units of measure","","F# books","Theory first, to get a rigorous foundation","Books or longer articles explaining full context","More material with in-depth tutorials","","Internal enterprise projects","Financial services","Not doing data centric apps","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors;VS tooling ","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/07 8:46:48 pm CET","10 or more years","Enterprise development","No","Experienced","F#;Java;Python;Scala;Swift","Less than a year","","I use it for hobby or side projects","Mac;Linux","VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Great community;Having fun again;Speed of development","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;No dependency cycles","Integration with non-F# libraries;Object-oriented compatibility;Quotations","Fable","F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Utilities and tools;Mobile apps","Read-only data sources such as feeds;Realm.js through Fable / React Native","Mac;Linux;iOS","I don't use F# at work","","No buy-in: There is lack of acceptance from other teams;It's a JVM-centric company","","Getting projects/build/tests bootstrapped on Mac","Cross-platform issues","","",""
"2017/05/07 9:15:23 pm CET","5-10 years","Open source development","Yes","Experienced","F#;Javascript","Less than a year","","I use it at work or for other commercial uses","Mac;Linux","VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom","","","MSDN;F# books","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with in-depth tutorials","","Open source projects","Other","","Linux","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","","","","Cross-platform issues","","",""
"2017/05/07 10:02:24 pm CET","10 or more years","Consulting","Yes","Experienced","Clojure;F#;Java;Javascript","Less than a year","","I use it for hobby or side projects","Mac","Emacs","Twitter;fsharp channel on Slack","Correctness (no nulls, it works first time)","Immutability by default;The ""piping"" idiom","Agents (MailboxProcessor);Computation expressions;Type providers","","F# bloggers","Practical first, with theory introduced as needed","","","","Open source projects","Games","","Javascript as a platform","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Too Windows-centric: They have concerns over cross-platform issues","","Lack of good tutorials/documentation;Typeclasses","","","",""
"2017/05/07 10:27:09 pm CET","2-5 years","Enterprise development","No","Intermediate","C#","Less than a year","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Great community;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom","","Ionide","Links posted on social media such as Twitter;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with real-world examples and war stories;More podcasts and other audio-only material","Opportunity to use at work","Internal enterprise projects","None - Just playing around","","","I don't use F# at work","","Too busy to learn!","","","Less sophisticated tools for refactoring, etc.","","","F# community is great"
"2017/05/07 10:33:56 pm CET","2-5 years","Consulting","No","Learner","C#;F#;Javascript;Typescript","1-2 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Computation expressions;Easy integration with other .NET libraries;Immutability by default;printf that is type checked;The ""piping"" idiom;Type providers","Agents (MailboxProcessor);Interactive development;Object expressions;Units of measure","","MSDN;Links and instructions from fsharp.org;F# books;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Open source projects","Utilities and tools;Mainstream business & enterprise applications;Commercial web site/app","SQL databases","Windows;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Lack of good tutorials/documentation;Installation process;Not enough real-world code to learn from","Not being part of the core .NET distribution;Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/07 10:52:32 pm CET","5-10 years","Enterprise development","Yes","Intermediate","C#;F#","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Immutability by default;Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers;Units of measure","Active Patterns;Agents (MailboxProcessor);Object expressions","Paket
Fake","Links and instructions from fsharp.org;Links mentioned in F# Weekly","Theory first, to get a rigorous foundation","In-person: A talks at user groups;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information","Less code more visual explanations

Current documentations

Guide how idiomatic FP anf F# works.","Internal enterprise projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Mainstream business & enterprise applications","NoSQL database;Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages","Let Microsoft say ""Yes, you should try F# it's one of our best things and we will invest in it!""","Lack of good tutorials/documentation;Installation process;Don't understand the compiler errors","Working with C#-centric tooling;Difficulty in troubleshooting problems","No enough support from Microsoft","",""
"2017/05/07 10:54:48 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;F#;Javascript","Less than a year","Too many hurdles to jump to get all the libraries and scenarios going for a application hosting REST API, talking to database and messaging with NServiceBus.","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default","Agents (MailboxProcessor);Async workflows;Interactive development;Quotations","Paket
","F# books;F# bloggers","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: A talks at user groups;Books or longer articles explaining full context","More material with in-depth tutorials;More material with real-world examples and war stories;More podcasts and other audio-only material","","Internal enterprise projects","Utilities and tools;Mainstream business & enterprise applications","SQL databases;Azure Message Queues","Windows;Azure","I don't use F# at work","","Too many hurdles to cross to get project going","Make it dead simple to do build apps that can talk to databases, integrate with Queues and host APIs. Handle/Illustrate cases like serialization issues between these and F#, immutability inside domain, Layering in large scale apps, data mapping from/to external world (API) at boundaries, fix Visual studio support.","Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Remove ANY friction in starting stock standard ASP.NET and Web API projects with F#","",""
"2017/05/07 11:39:19 pm CET","10 or more years","Enterprise development","No","Learner","C#;Javascript","Less than a year","","Just tinkering","Windows","Visual Studio 2015 or newer;LinqPad","","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Backtick naming;Immutability by default;The ""piping"" idiom;Type inference;Type providers;Units of measure","Agents (MailboxProcessor);Async workflows","LinqPad","Links and instructions from fsharp.org;F# books;Answers to Stack Overflow questions;Personal mentoring;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials","","Not applicable. None of my F# code is used by other people","None - Just playing around;Utilities and tools","SQL databases;Textual & flat file data","","It's used unofficially","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Don't understand the compiler errors","Difficulty in troubleshooting problems","","",""
"2017/05/08 12:00:53 am CET","10 or more years","Enterprise development","No","Intermediate","C#;F#;Typescript","1-2 years","","I use it at work or for other commercial uses","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Great community;Having fun again;Learning functional programming in general","Agents (MailboxProcessor);Easy integration with other .NET libraries;Immutability by default;Interactive development;printf that is type checked;The ""piping"" idiom;Type inference","Object-oriented compatibility","","F# books;F# bloggers","Practical first, with theory introduced as needed","Books or longer articles explaining full context","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products","Utilities and tools;Financial services;Commercial web site/app","SQL databases;NoSQL database","Windows;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Installation process","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems;Cross-platform issues","","",""
"2017/05/08 12:29:29 am CET","2-5 years","Commercial software/web development","No","Intermediate","C#","1-2 years","","I use it when I can at work, but it's rare","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);simplicity of concepts and the ability to use old knowledge.","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Backtick naming;Computation expressions;Interactive development;No dependency cycles;Object expressions;The ""piping"" idiom;Type providers","Quotations;Units of measure","ionide
cheese 
sql type provider
fable","F# books;F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#);fsharpforfunandprofit","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos","I think more c# to f# code conversion that are not trivial.
take a complete project (suave music store) and do it in both c# and f#. that will help people understand how things like DI vs composition work.
Also examples of adding f# to an existing c# project.
","Internal enterprise projects;Commercial products","None - Just playing around;Mainstream business & enterprise applications;Non-commercial web site/app;Other","SQL databases","","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Fad: They have concerns over long term language viability","grow","Don't understand the compiler errors;took a while before I  understood that only the basics are really needed","Not being part of the core .NET distribution;Working with C#-centric tooling;Difficulty in troubleshooting problems","MS support just isn't there which makes convincing people of its potential difficult.

compiler warnings.

c# interoperability.

too many one man army open source projects.

compilation speed.","","F# is amazing "
"2017/05/08 1:40:03 am CET","2-5 years","Commercial software/web development","No","Experienced","C#;F#;Haskell;Python","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor)","","MSDN;Links and instructions from fsharp.org;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects;Commercial products","Mainstream business & enterprise applications;Commercial web site/app","SQL databases;Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Easy concurrency with async and agents;Better for solving complex problems","Nothing. Everyone loves it.","","","Working with C#-centric tooling","","",""
"2017/05/08 2:07:53 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#","1-2 years","Was using it for Selenium testing and build automation. Now I just use it for build automation and that is mostly done.","I use it for hobby or side projects","Windows;Mac","VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general","Interactive development;The ""piping"" idiom","Async workflows","","Links and instructions from fsharp.org;Links mentioned in F# Weekly;Personal mentoring;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);In-person: A talks at user groups;In-person: Attending a talks as part of a conference;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Utilities and tools","Not doing data centric apps","Windows;Mac;Linux","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","Get the morts to not be so scared of other languages","Don't understand the compiler errors","Difficulty in troubleshooting problems","","",""
"2017/05/08 2:33:02 am CET","5-10 years","Enterprise development","Yes","Intermediate","C#;Java;Javascript;PHP;Python;Typescript","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers;ploeh.dk !","Better domain modelling with records and unions;Having fun again;Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;Type providers","Agents (MailboxProcessor);Quotations;Static type constraints;Units of measure","F# interactive
Fable
Fake","F# books;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: Attending a talks as part of a conference;Books or longer articles explaining full context","More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools","","Windows","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Too Windows-centric: They have concerns over cross-platform issues;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","I was very curious about learning f# but i never did, until a colleague who was expert in f# explained me what were the advantages to use a solution written in f#. Still having an experimented user i had to really force myself to unlearn the habits i had with c# for really understand the constraints of f#","",""
"2017/05/08 3:37:12 am CET","10 or more years","Commercial software/web development","No","Experienced","Javascript;Python;Typescript","1-2 years","","Just tinkering","Mac","VS Code (with Ionide)","Twitter;fsharp channel on Slack;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Type inference","","","F# bloggers","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days)","More material with in-depth tutorials","","Not applicable. None of my F# code is used by other people","None - Just playing around","","","I don't use F# at work","","Too Windows-centric: They have concerns over cross-platform issues",".net core needs to become more mature and prove itself","","","The strong ties to Windows/.net","",""
"2017/05/08 5:09:14 am CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;F#;Javascript;Typescript","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;Type inference","Agents (MailboxProcessor);Object-oriented compatibility;Units of measure","FAKE, Paket, Unquote","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories","","Open source projects","Utilities and tools;Non-commercial web site/app","Not doing data centric apps","Windows;Javascript as a platform","It's officially endorsed in my team for non-critical/non-production code","Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","Not enough real-world code to learn from","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Less sophisticated tools for refactoring, etc.","IDE experience. Microsoft has invested buttloads of cash in C# IDE, and it became unrivaled as a result. This causes kind of a dry feeling when switching to F# and finding holes here and there.","",""
"2017/05/08 5:37:55 am CET","5-10 years","Enterprise development","Yes","Learner","C#","1-2 years","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;HN, Reddit and other programming news sites;F# bloggers","Having fun again;Learning functional programming in general","Object-oriented features (inc. C# compatibility, conciseness);Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom","Agents (MailboxProcessor);Computation expressions;Integration with non-F# libraries","ionide
vscode
","F# books;Answers to Stack Overflow questions;Structured training/workshops","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More interactive tutorials (e.g. like the F# Koans)","more get started guides and more templates. There are a lot of good tools out there like fable, fake, paket, expecto, etc but I don't know how to combine them together to make a proper project. Using the ionide paket commands is very confusing because there are so many of them and confusing like what is 'outdated' or 'simplify' suppose to do?","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","Improve F# reputation, few people know about it and those that do don't see any support from companies or communities.","Lack of good tutorials/documentation;Don't understand the compiler errors","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Few GUI frameworks and even fewer documentation for them, especially for desktop. Nobody is going to buy console programs.  ","",""
"2017/05/08 7:40:57 am CET","5-10 years","Enterprise development","No","Intermediate","C#;C++;F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Interactive development;The ""piping"" idiom","Quotations;Static type constraints;Type providers","","F# books","Practical only. I don't care about theory.","In-person: In-depth trainings (2 or 3 days);In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","Utilities and tools","SQL databases;Textual & flat file data","Windows","","Faster time to market;Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers","","Lack of good tutorials/documentation","Working with C#-centric tooling","","",""
"2017/05/08 8:00:12 am CET","10 or more years","Commercial software/web development","No","Learner","C;C#;Javascript;Typescript","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Active Patterns;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Computation expressions;Quotations","","F# books;http://fsharpforfunandprofit.com/","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","","","","","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Not enough interactions with F# users (my fault)","Less sophisticated tools for refactoring, etc.","","",""
"2017/05/08 9:00:32 am CET","10 or more years","Enterprise development","No","Learner","Java","Haven't really used it yet","","Just tinkering","Linux","MonoDevelop;VS Code (with Ionide)","Twitter;HN, Reddit and other programming news sites","Correctness (no nulls, it works first time);Learning functional programming in general","Immutability by default;Interactive development;The ""piping"" idiom;Type inference","","","Links and instructions from fsharp.org","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","","","I don't use F# at work","","Technical reasons","","","","","",""
"2017/05/08 9:01:43 am CET","5-10 years","Commercial software/web development","Yes","Experienced","C#;F#;Haskell;Java","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;Interactive development;Object-oriented features (inc. C# compatibility, conciseness)","Agents (MailboxProcessor);Type providers;Units of measure","","MSDN;F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","","","","Commercial products;Open source projects","","Not doing data centric apps","Windows;Mac;Linux;Raspberry Pi","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework","","","Don't understand the compiler errors;Unpleasant interactions with the community;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Performance issues;Cross-platform issues","Horrendous tooling, lack of maintenance","",""
"2017/05/08 9:12:47 am CET","10 or more years","Commercial software/web development","Yes","Learner","C#;F#","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type providers","Agents (MailboxProcessor);Interactive development;Object expressions;Units of measure","","Links and instructions from fsharp.org;F# books;F# bloggers;Answers to Stack Overflow questions;Personal mentoring","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context","More material with in-depth tutorials;More short ""live coding"" videos","","Internal enterprise projects;Commercial products","Mainstream business & enterprise applications","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/08 9:37:59 am CET","10 or more years","Enterprise development","Yes","Experienced","C#;C++;F#","4 or more years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;F# bloggers;Google+","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Object expressions;Object-oriented compatibility;Quotations","","F# books;Personal mentoring","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Open source projects","Utilities and tools","Not doing data centric apps","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed","","Lack of good tutorials/documentation;Don't understand the compiler errors","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.","Second class (at best) Visual Studio tooling","",""
"2017/05/08 9:59:06 am CET","5-10 years","Student","Yes","Expert","C;C#;C++;F#;Java;Ocaml/SML;R","1-2 years","","I use it for research or academic work","Linux","VS Code (with Ionide)","F# Weekly;StackOverflow chat","Conciseness of code (I can see more at a glance);Great community;Good tools and libs (for a FP language)","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Async workflows;Computation expressions;Quotations;Type providers;Units of measure","VS Code + Ionide
Paket
","Links and instructions from fsharp.org;F# books;F# bloggers;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Open source projects;Academic","Utilities and tools;Algorithm-heavy business applications (non-financial);Machine learning;Data analysis/statistics;Text analysis/language parsing","Textual & flat file data","Windows;Linux","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","Technical reasons;Not known enough","More publicity.","get rid of .fsproj files","Lack of F# friendly libraries;Lack of good wrappers for non-F# libraries;Cross-platform issues","Better cross-platform libairies in some domains (such as plotting).
Ditching fsproj files (it would easily simplify the language for newcomers).","",""
"2017/05/08 10:03:42 am CET","10 or more years","Enterprise development","Yes","Learner","C#;Javascript;Typescript;Visual Basic","Less than a year","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Type inference;Units of measure","Agents (MailboxProcessor);Async workflows;Quotations;Static type constraints","","Links and instructions from fsharp.org;F# bloggers","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases","","I don't use F# at work","","Hiring: They worry about not being able to find F# developers","","","","","",""
"2017/05/08 10:27:32 am CET","5-10 years","Commercial software/web development","Yes","Learner","C#","Less than two months","","Just tinkering","Windows","VS Code (with Ionide)","Twitter;F# Weekly","Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;No dependency cycles;The ""piping"" idiom","Active Patterns;Agents (MailboxProcessor);Type providers;Units of measure","Paket","F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Theory first, to get a rigorous foundation","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","Better tooling","Not applicable. None of my F# code is used by other people","None - Just playing around;Financial services","Not doing data centric apps","","It's used unofficially","","","","","","","",""
"2017/05/08 10:51:54 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development","Active Patterns;Backtick naming;Computation expressions;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom","Agents (MailboxProcessor);Object-oriented compatibility;Type providers;Units of measure","fParsec, FAKE & Paket","F# books;F# bloggers;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","By reading Isaac Abraham's new book - it's awesome!","Commercial products","Utilities and tools;Text analysis/language parsing","Textual & flat file data;Parsing DSLs","I use an F# DSLs to generate code in other languages.","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers","Highlight the accuracy of the code.  I believe getting the quality benefits recognised will help drive adoption.","","Working with C#-centric tooling","","",""
"2017/05/08 11:04:26 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#;F#;Powershell","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Speed of development","Immutability by default;Interactive development;The ""piping"" idiom;Type inference;Type providers","Object-oriented compatibility;Units of measure","","Links and instructions from fsharp.org;F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Theory first, to get a rigorous foundation","Books or longer articles explaining full context","","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases","Windows","It's used unofficially","Correctness: fewer bugs and less rework;More productive with fewer developers;Easy concurrency with async and agents","Training: They are worried about getting non-F# developers up to speed;Mediocre tooling","","","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/08 12:13:27 pm CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;C++;F#","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly","Better domain modelling with records and unions;Great community;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Immutability by default;Type inference","Active Patterns;Agents (MailboxProcessor);Object expressions;Quotations;Units of measure","Aardvark
FShade","MSDN;F# books;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More short ""live coding"" videos","","Commercial products","Utilities and tools;Algorithm-heavy business applications (non-financial)","Textual & flat file data","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Don't understand the compiler errors","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Tool support, especially when mixed in with C#","",""
"2017/05/08 1:11:26 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;Javascript","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Speed of development","Active Patterns;Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Easy integration with other .NET libraries;Immutability by default;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference","Units of measure","","MSDN;F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#);Reading F# code written by experts;http://fsharpforfunandprofit.com","Practical first, with theory introduced as needed","In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Algorithm-heavy business applications (non-financial);Commercial web site/app","SQL databases;Textual & flat file data;Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.","Absense of Type Classes","",""
"2017/05/08 1:17:12 pm CET","2-5 years","Consulting","Yes","Learner","C#;Javascript","I was using F# but have stopped","Hard to find use for it in worklife.
Tooling has preformance issues.","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# bloggers","Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type providers","Async workflows;Object-oriented compatibility;Units of measure","","Links and instructions from fsharp.org;F# bloggers;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases;NoSQL database","","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","","","Not being part of the core .NET distribution;Working with C#-centric tooling;Performance issues","performance","",""
"2017/05/08 1:23:58 pm CET","2-5 years","Enterprise development","Yes","Learner","C#","1-2 years","","Just tinkering","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly","Better domain modelling with records and unions;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Interactive development;The ""piping"" idiom;Type inference;Type providers","Active Patterns;Agents (MailboxProcessor);Computation expressions;Quotations;Static type constraints;Units of measure","","MSDN;Links and instructions from fsharp.org;F# books;F# bloggers","Practical first, with theory introduced as needed","In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases","Windows","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","","","","",""
"2017/05/08 1:32:03 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;F#;Python;Visual Basic","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples);Immutability by default;Type providers","Agents (MailboxProcessor);Async workflows;Object expressions;Units of measure","","MSDN;Reading F# code written by experts;fsharpforfunandprofit.com","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial)","SQL databases;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Better for solving complex problems","","","Unpleasant interactions with the community","Difficulty in troubleshooting problems","The F# language development direction is largely governed by Microsoft employees, yet its core development team is too small to focus on anything other than keeping up with the rest of .NET","",""
"2017/05/08 1:49:16 pm CET","10 or more years","Enterprise development","Yes","Learner","C#","Haven't really used it yet","","Just tinkering","Windows","Visual Studio 2015 or newer","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time)","Active Patterns;Easy integration with other .NET libraries;Type providers","","","F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical only. I don't care about theory.","Books or longer articles explaining full context","More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases","Azure","I don't use F# at work","","","","Not enough real-world code to learn from","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;C# interaction (go to definition, renames...)","","",""
"2017/05/08 2:36:54 pm CET","10 or more years","Financial services or similar","Yes","Experienced","F#","2-3 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance)","Active Patterns;Algebraic types (inc discriminated unions and tuples);Async workflows;Easy integration with other .NET libraries;Immutability by default;Type providers;Units of measure","","","Links and instructions from fsharp.org;F# books;F# bloggers;Structured training/workshops","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects","Utilities and tools;Financial services","SQL databases;Textual & flat file data;Read-only data sources such as feeds","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","Nothing. Everyone loves it.","","Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/08 2:39:50 pm CET","10 or more years","Enterprise development","Yes","Learner","C#;Javascript;Python","1-2 years","","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Correctness (no nulls, it works first time)","Agents (MailboxProcessor);Immutability by default;The ""piping"" idiom;Type providers","Units of measure","","F# bloggers;Links mentioned in F# Weekly;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products","Utilities and tools;Mainstream business & enterprise applications","SQL databases;Textual & flat file data","Windows;Linux","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","","","","","",""
"2017/05/08 2:50:42 pm CET","5-10 years","Science or related","Yes","Expert","C;C++;F#;Javascript;Python","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# Weekly;HN, Reddit and other programming news sites;Google+","Better domain modelling with records and unions;Learning functional programming in general","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;No dependency cycles;Type inference;Units of measure","Async workflows;Computation expressions;Quotations","FSharp.Data
Aether Lenses","MSDN;F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","A community with well supported libraries","Internal enterprise projects","Data analysis/statistics","Event store/logs/Kafka","Windows","It's officially endorsed in my team for critical/production areas","More productive with fewer developers;Easy concurrency with async and agents;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","Well supported libraries in a variety of areas such that it could be a credible alternative to Python for doing data science.","Lack of good tutorials/documentation;Unpleasant interactions with the community","Lack of F# friendly libraries;Less sophisticated tools for refactoring, etc.","A small fragmented community that moves onto the next language fad leaving any tools unmaintained.","",""
"2017/05/08 3:07:07 pm CET","10 or more years","Enterprise development","Yes","Experienced","C#;C++;Elixir;F#;Java;Javascript","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;HN, Reddit and other programming news sites","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;printf that is type checked;The ""piping"" idiom;Type inference","","","F# books;Links mentioned in F# Weekly;Answers to Stack Overflow questions","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials","","Commercial products","Algorithm-heavy business applications (non-financial);Machine learning","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages","make F# a first class .NET language","better tooling","Not being part of the core .NET distribution;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/08 3:19:18 pm CET","5-10 years","Enterprise development","No","Intermediate","C#;Python;R","Less than two months","Tried suave.io. Had fun but finally rewrote it to webAPI in C#. Suave.IO is buggy, poor docs, missing a lot of basic stuff","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Units of measure","","F# books;F# bloggers","Practical first, with theory introduced as needed","","","","","","","","","","","","","","","",""
"2017/05/08 3:52:47 pm CET","1-2 years","Student","Yes","Learner","C;C++;F#;Java;Javascript;Ocaml/SML","Less than a year","","I use it for student work","Linux","VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Math related","Algebraic types (inc discriminated unions and tuples);Immutability by default;Interactive development;The ""piping"" idiom;Type inference","Active Patterns;Agents (MailboxProcessor);Async workflows;Integration with non-F# libraries;Object expressions;Quotations;Units of measure","","MSDN;F# bloggers;Personal mentoring","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More short ""live coding"" videos","Functional approach to a real simple problems explained step by step, this helps the reader avoid programming in imperative style with functional features. Something like @scottw did for calculator tutorial","Not applicable. None of my F# code is used by other people","Data analysis/statistics;Text analysis/language parsing","Textual & flat file data;Analytics","Windows;Mac;Linux","I don't use F# at work","","","","Installation process;Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.;Cross-platform issues","","",""
"2017/05/08 3:58:40 pm CET","10 or more years","Enterprise development","Yes","Learner","C#","Less than a year","","Just tinkering","Windows","Visual Studio 2015 or newer","F# bloggers","Better domain modelling with records and unions","Agents (MailboxProcessor);Immutability by default;The ""piping"" idiom;Type inference","Interactive development;Units of measure","","F# bloggers;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","None - Just playing around","SQL databases;NoSQL database","Windows;Azure","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","I can't use my knowledge from C# or other imperative languages;Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/08 3:59:31 pm CET","10 or more years","Commercial software/web development","No","Intermediate","C#;C++;Javascript","I was using F# but have stopped","Other developers had a hard time dealing with the project","Just tinkering","Windows","Visual Studio 2015 or newer;Sublime Text;VS Code (with Ionide)","F# bloggers","Learning functional programming in general","Active Patterns;Easy integration with other .NET libraries;The ""piping"" idiom;Type providers","Agents (MailboxProcessor);Async workflows;Interactive development;Units of measure","visual studio","F# books","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","Windows;Linux;Azure","It's used unofficially","Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Too Windows-centric: They have concerns over cross-platform issues;Too Microsoft-centric: They think it is too closely linked to Microsoft","","Lack of good tutorials/documentation;I can't use my knowledge from C# or other imperative languages","Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Difficulty in troubleshooting problems","","",""
"2017/05/08 4:03:40 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;C++;F#;Java;Javascript;Python;R;Scala;Typescript","2-3 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Active Patterns;Computation expressions;No dependency cycles","Agents (MailboxProcessor)","","F# books;F# bloggers;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Internal enterprise projects","Data analysis/statistics;Text analysis/language parsing","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka","Windows","I don't use F# at work","","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Lack of good tutorials/documentation","Difficulty in troubleshooting problems","","",""
"2017/05/08 4:46:29 pm CET","10 or more years","Commercial software/web development","Yes","Experienced","C#;Javascript;Typescript","1-2 years","","I use it for hobby or side projects","Windows","VS Code (with Ionide)","","Having fun again;Learning functional programming in general","Type inference;Units of measure","Async workflows;Integration with non-F# libraries","","Links and instructions from fsharp.org;F# books;F# bloggers;Answers to Stack Overflow questions","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","","I don't use F# at work","","No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation","","","",""
"2017/05/08 5:13:09 pm CET","10 or more years","Enterprise development","No","Learner","C#;Javascript","Less than a year","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","Twitter;fsharp channel on Slack","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;The ""piping"" idiom","Agents (MailboxProcessor);Async workflows;Quotations;Type providers;Units of measure","","F# bloggers;Answers to Stack Overflow questions","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products","Mainstream business & enterprise applications","SQL databases","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Fad: They have concerns over long term language viability","","Don't understand the compiler errors","Working with C#-centric tooling;Difficulty in troubleshooting problems","Adoption","",""
"2017/05/08 6:12:19 pm CET","10 or more years","Enterprise development","No","Experienced","C#;F#;Typescript","4 or more years","I'm still using F#, but it is not being included in a rewrite, primarily because a large number of developers have been brought on from India, and the perceived difficulty of getting them up to speed with F#.","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Functional but can be tweaked to get high performance","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Immutability by default;The ""piping"" idiom;Type inference","Quotations;Type providers;Units of measure","FParsec
","F# books;F# bloggers;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products","Financial services;Mainstream business & enterprise applications;Commercial web site/app","SQL databases;Analytics","Windows","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;No buy-in: There is lack of acceptance from other teams","Help me find a better employer.","","Not being part of the core .NET distribution;Lack of F# friendly libraries;Working with C#-centric tooling","","",""
"2017/05/08 6:45:37 pm CET","10 or more years","Consulting","No","Intermediate","C#;F#","1-2 years","Wanted to learn a language outside of Microsoft.","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Units of measure","Agents (MailboxProcessor);Quotations","","F# books;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material","Industry adoption","Internal enterprise projects;Not applicable. None of my F# code is used by other people","None - Just playing around;Mainstream business & enterprise applications;Mobile apps","SQL databases","Windows;Android","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;No buy-in: There is lack of acceptance from other teams","","I can't use my knowledge from C# or other imperative languages;Not enough real-world code to learn from","Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Cross-platform issues","Microsoft ","",""
"2017/05/08 7:01:16 pm CET","5-10 years","Enterprise development","No","Learner","C#;F#;Javascript","I was using F# but have stopped","have been playing with fsharp for a while, wanted to pull it into my projects but met resistance from other devs, or from customers.

unfortunately now I have even less time to dedicate time to fsharp as my job position changed to a more administrative. looking for a job change, and hoping to get back into fsharp coding soon","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;Visual Studio 2012 or 2013;Sublime Text;VS Code (with Ionide)","Twitter;F# Weekly;F# bloggers;fsharp friends (in person)","Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again","Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Interactive development;Simple ""one liner"" type definitions for records and DUs;Type inference;Type providers","Agents (MailboxProcessor);Object expressions;Units of measure","various type providers (especially R)
Elm
Fable
FAKE","Links and instructions from fsharp.org;F# books;F# bloggers;Links posted on social media such as Twitter;Links mentioned in F# Weekly;Personal mentoring;Structured training/workshops;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","None - Just playing around;Utilities and tools","NoSQL database;Textual & flat file data;Read-only data sources such as feeds","Windows","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Faster time to market;Efficiency/Performance","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Too Windows-centric: They have concerns over cross-platform issues;No buy-in: There is lack of acceptance from other teams","fsharp bootcamps :)","Not enough real-world code to learn from","Lack of good wrappers for non-F# libraries;Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""
"2017/05/08 7:01:41 pm CET","10 or more years","Commercial software/web development","No","Learner","C#;Javascript;Python","Haven't really used it yet","","Just tinkering","Windows;Mac","Visual Studio 2012 or 2013;VS Code (with Ionide)","F# bloggers","Correctness (no nulls, it works first time);Learning functional programming in general","Immutability by default;Interactive development;The ""piping"" idiom;Type inference","","","F# bloggers;Reading F# code written by experts","Theory first, to get a rigorous foundation","Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More interactive tutorials (e.g. like the F# Koans)","","Not applicable. None of my F# code is used by other people","None - Just playing around","Not doing data centric apps","","I don't use F# at work","","","","Installation process","Not being part of the core .NET distribution","Tools + .NET Core. Last November I downloaded .NET Core 1.1 to play around with F# on a Macbook. Turns out I needed to get new F# tools to do so. Went searching for them and there were no official releases of the tools to get me working. I found a GitHub issue describing the problem but it didn't sound like the team was going to release an official package of the tools that would work with .NET Core 1.1 as it was a minor release. Thankfully further along the issue I found someone who had provided an unofficial package of the tools so I could get working.

I haven't been back to play with F# since that experience. It's probably mostly constraints on my time but I also don't want to mess with anything that's going to take that much effort when it should just work out of the box.","",""
"2017/05/08 7:52:15 pm CET","10 or more years","Commercial software/web development","No","Intermediate","F#;Javascript;Python","2-3 years","","I use it for hobby or side projects","Windows;Linux","VS Code (with Ionide)","F# Weekly;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general;Speed of development","Computation expressions;Easy integration with other .NET libraries;Interactive development;Object-oriented features (inc. C# compatibility, conciseness)","Async workflows;Quotations","paket
ionide","MSDN;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;Reading F# code written by experts","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","Open source projects","None - Just playing around","SQL databases;Textual & flat file data","Windows;Linux","It's officially endorsed in my team for critical/production areas","Correctness: fewer bugs and less rework;Faster time to market;Better for solving complex problems","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","Not enough real-world code to learn from","Lack of F# friendly libraries;Working with C#-centric tooling","","",""
"2017/05/08 7:55:41 pm CET","2-5 years","Enterprise development","No","Learner","C#","1-2 years","","Just tinkering","Windows","Visual Studio 2015 or newer","Twitter;HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance);Great community;Learning functional programming in general","Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type providers","Quotations;Units of measure","","F# books;F# bloggers;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days)","More material with real-world examples and war stories","","Not applicable. None of my F# code is used by other people","Utilities and tools;Mainstream business & enterprise applications;Mobile apps","SQL databases","Windows;iOS;Android","It's used unofficially","Domain modelling: making illegal states unrepresentable","No perceived benefits: They don't understand what benefits F# has over C# or other languages","","Don't understand the compiler errors","Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/08 7:57:01 pm CET","5-10 years","Science or related","Yes","Learner","C#;F#;Python;Visual Basic","Less than a year","","I use it for research or academic work","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers;http://fsharpforfunandprofit.com/","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance;Interop with .NET","Algebraic types (inc discriminated unions and tuples);Interactive development;Simple ""one liner"" type definitions for records and DUs;Type providers","","","Links and instructions from fsharp.org;F# bloggers;Answers to Stack Overflow questions;Videos (e.g. Community for F#);http://fsharpforfunandprofit.com/","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","Not applicable. None of my F# code is used by other people","Custom development/specialist markets;Research/Teaching;Data analysis/statistics;Other","Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","Technical reasons;They are C# pros","","Nothing, I love it","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","Tooling for UI development","",""
"2017/05/08 8:02:48 pm CET","10 or more years","Data or analytics related","Yes","Intermediate","C#;F#;Javascript;Typescript","1-2 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly;fsharp channel on Slack;HN, Reddit and other programming news sites;F# bloggers","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Async workflows;Computation expressions;Immutability by default;Type inference;Type providers","Integration with non-F# libraries;Object expressions;Object-oriented compatibility;Quotations;Static type constraints","","Structured training/workshops;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products","Financial services;Mainstream business & enterprise applications;Commercial web site/app;Mobile apps","SQL databases;NoSQL database;Event store/logs/Kafka","Windows;Azure","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;No buy-in: There is lack of acceptance from other teams","","Installation process;Don't understand the compiler errors","Not being part of the core .NET distribution;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","","",""
"2017/05/08 8:31:07 pm CET","10 or more years","Enterprise development","No","Intermediate","C#;F#","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly;fsharp channel on Slack;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Interactive development;No dependency cycles;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type providers","Integration with non-F# libraries;Object-oriented compatibility","","F# books;F# bloggers;Links mentioned in F# Weekly;Answers to Stack Overflow questions;fsharpforfunandprofit","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;personal projects","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories","","Internal enterprise projects;Commercial products;Open source projects","Utilities and tools;Algorithm-heavy business applications (non-financial);Custom development/specialist markets;Mainstream business & enterprise applications;Commercial web site/app;Non-commercial web site/app;Mobile apps;Data analysis/statistics;Other","SQL databases;NoSQL database;Textual & flat file data;Read-only data sources such as feeds","Windows;Azure","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Money: They worry that good F# developers will cost too much;Training: They are worried about getting non-F# developers up to speed;Fad: They have concerns over long term language viability","","Not enough real-world code to learn from","","","",""
"2017/05/08 8:48:30 pm CET","10 or more years","Commercial software/web development","No","Learner","C#;F#","3-4 years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Interactive development;No dependency cycles;The ""piping"" idiom;Type inference","Async workflows;Computation expressions;Quotations;Static type constraints","FAKE
Paket
Ionide","F# books;F# bloggers;Links posted on social media such as Twitter;Answers to Stack Overflow questions;Videos (e.g. Community for F#)","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","Commercial products;Open source projects","Utilities and tools;Custom development/specialist markets","Textual & flat file data","Windows","It's used unofficially","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Fad: They have concerns over long term language viability;Tooling integration with C# (""Find References"" etc.)","","Not enough real-world code to learn from;Some people mentioning category theory at every corner","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Difficulty in troubleshooting problems","Microsoft not giving F# the status it should have as the leading .NET language","",""
"2017/05/08 9:18:00 pm CET","10 or more years","Data or analytics related","Yes","Experienced","C++;F#;Kotlin;Python;Ruby","4 or more years","","I use it at work or for other commercial uses","Windows;Mac;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","F# Weekly","Better domain modelling with records and unions;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Backtick naming;Immutability by default;No dependency cycles;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Units of measure","Type providers;Units of measure","FsCheck
FParsec","Reading the reference manual/specification","Practical first, with theory introduced as needed","In-person: A talks at user groups;Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with real-world examples and war stories;More podcasts and other audio-only material","","Commercial products;Open source projects","Utilities and tools;Machine learning;Data analysis/statistics;Text analysis/language parsing;Other","SQL databases;Textual & flat file data","Windows;Mac;Linux","It's officially endorsed in my team for non-critical/non-production code","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;No buy-in: There is lack of acceptance from other teams;Technical reasons;Tied to .NET","Superb for mono support or .NET Core. Sometimes things breaks which creates unnecessary stress","Not enough real-world code to learn from","Not being part of the core .NET distribution;Compilation times","Language services & Compiler performance.

FSharp.Core core modules have poor performance (Seq for example).","",""
"2017/05/08 9:26:23 pm CET","10 or more years","Enterprise development","Yes","Learner","C#;C++;Java;Javascript;Perl","Haven't really used it yet","","Just tinkering","Windows","Visual Studio 2015 or newer;Sublime Text","HN, Reddit and other programming news sites","Learning functional programming in general","Async workflows;Easy integration with other .NET libraries;Immutability by default;Type inference","","","MSDN;F# bloggers;Reading F# code written by experts","Practical first, with theory introduced as needed","Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group;In-depth online courses (e.g. Pluralsight)","More material with short ""cookbook"" style information;More material with real-world examples and war stories","","","","","","I don't use F# at work","","","","I can't use my knowledge from C# or other imperative languages;Not enough real-world code to learn from","","","",""
"2017/05/08 9:39:16 pm CET","5-10 years","Open source development","Yes","Intermediate","C#;Java;Visual Basic","1-2 years","Changed company and the new one is not using it. ","Just tinkering","Windows","Visual Studio 2015 or newer;Atom (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Active Patterns;Algebraic types (inc discriminated unions and tuples);Immutability by default;No dependency cycles;The ""piping"" idiom;Type providers;Units of measure","Agents (MailboxProcessor);Interactive development","Fsharp.Reactive.Control
FsUnit","Links and instructions from fsharp.org;F# books;Personal mentoring","Practical first, with theory introduced as needed","In-person: A talks at user groups","","","Internal enterprise projects;Commercial products","Algorithm-heavy business applications (non-financial);Data analysis/statistics;Text analysis/language parsing","Textual & flat file data","Windows","I don't use F# at work","","Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams;Technical reasons","","Not enough real-world code to learn from","Lack of good wrappers for non-F# libraries","","",""
"2017/05/08 11:12:01 pm CET","10 or more years","Enterprise development","Yes","Intermediate","C#;C++;F#","1-2 years","","I use it for hobby or side projects","Windows","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Functional but can be tweaked to get high performance","Active Patterns;Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;Interactive development;No dependency cycles;Object expressions;printf that is type checked;Simple ""one liner"" type definitions for records and DUs;The ""piping"" idiom;Type inference;Type providers","Agents (MailboxProcessor);Async workflows;Integration with non-F# libraries;Object expressions;Object-oriented compatibility;Units of measure","","F# books;F# bloggers;Answers to Stack Overflow questions;Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Recorded talks from a conference or user group","More material with in-depth tutorials;More short ""live coding"" videos;More interactive tutorials (e.g. like the F# Koans)","","","","","","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","I can't use my knowledge from C# or other imperative languages","abstractions hides context","","",""
"2017/05/09 12:09:18 am CET","10 or more years","Enterprise development","Yes","Intermediate","C#","Less than a year","","I use it for hobby or side projects","Windows;Xamarin","Visual Studio 2015 or newer","","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Having fun again;Learning functional programming in general","Agents (MailboxProcessor);Algebraic types (inc discriminated unions and tuples);Computation expressions;Immutability by default;The ""piping"" idiom;Type inference;Type providers;Units of measure","Quotations","","Videos (e.g. Community for F#);Reading F# code written by experts","Practical first, with theory introduced as needed","In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More interactive tutorials (e.g. like the F# Koans)","","","Custom development/specialist markets;Mobile apps","SQL databases;NoSQL database","Windows;Azure","I don't use F# at work","","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed","","","Cross-platform issues;Lack of good training materials","","",""
"2017/05/09 7:32:37 am CET","10 or more years","Commercial software/web development","No","Intermediate","C#;Go;Typescript","Less than two months","second class citizen in the .net eco (.net core)","I use it for hobby or side projects","Windows;Linux","Visual Studio 2015 or newer;VS Code (with Ionide)","Twitter;F# Weekly","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Great community;Having fun again;Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type providers;Units of measure","Active Patterns;Integration with non-F# libraries","F# interactive","MSDN;Links and instructions from fsharp.org;F# bloggers;Links mentioned in F# Weekly","Practical first, with theory introduced as needed","In-person: A talks at user groups;In-person: Attending a talks as part of a conference;Books or longer articles explaining full context;In-depth online courses (e.g. Pluralsight)","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos","","","","","","","","","","","","","",""
"2017/05/09 8:07:48 am CET","2-5 years","Enterprise development","No","Beginner","C#","Haven't really used it yet","","Just tinkering","Windows","Visual Studio 2015 or newer","","Learning functional programming in general","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Type inference","Object-oriented compatibility","","Links and instructions from fsharp.org;F# books","Practical first, with theory introduced as needed","Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with short ""cookbook"" style information","","Not applicable. None of my F# code is used by other people","None - Just playing around","","Windows","I don't use F# at work","","","","Lack of good tutorials/documentation","","","",""
"2017/05/09 8:16:10 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#;F#;Javascript;Typescript","4 or more years","","I use it at work or for other commercial uses","Windows","Visual Studio 2015 or newer","F# bloggers","Better domain modelling with records and unions;Conciseness of code (I can see more at a glance);Correctness (no nulls, it works first time);Learning functional programming in general","Active Patterns;Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;Object-oriented features (inc. C# compatibility, conciseness);The ""piping"" idiom;Type inference","Agents (MailboxProcessor);Async workflows;Computation expressions;Interactive development;Type providers;Units of measure","FsLex/FsYacc (primary reason to use F# at work)
","MSDN;Links and instructions from fsharp.org;F# bloggers;Links mentioned in F# Weekly;Reading F# code written by experts","Practical first, with theory introduced as needed","In-person: In-depth trainings (2 or 3 days);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials","More material with in-depth tutorials;More material with real-world examples and war stories","Better Visual Studio support
Better documentation: list / collection processing for example requires knowledge of the many many available functions with short and cryptic names. I like their conciseness, but as a beginner one is both overwhelmed at the amount and confused at the non-expressiveness. A simple website that categorizes them would help a lot (What do you want to do? Iterate / Transform / Filter groups e.g. with functions listed in them).","Commercial products","Commercial web site/app;Text analysis/language parsing","Textual & flat file data","Windows;Azure","It's officially endorsed in my team for critical/production areas","Domain modelling: making illegal states unrepresentable","Hiring: They worry about not being able to find F# developers;Training: They are worried about getting non-F# developers up to speed;Weak integrations in build and development tools (ReSharper, MsBuild)","More & better integrations","Lack of good tutorials/documentation;Don't understand the compiler errors","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.;Building & deploying a mixed C# / F# solution means fixing many annoying MsBuild / fsproj / NuGet related problems","Integrations in development & build tools, especially in mixed C# solutions","",""
"2017/05/09 8:26:21 am CET","10 or more years","Commercial software/web development","Yes","Intermediate","C#","Less than a year","","Just tinkering","Windows;Linux","Visual Studio 2015 or newer","Twitter","Better domain modelling with records and unions;Correctness (no nulls, it works first time);Learning functional programming in general;Speed of development","Algebraic types (inc discriminated unions and tuples);Easy integration with other .NET libraries;Immutability by default;The ""piping"" idiom;Type inference","Integration with non-F# libraries;Object expressions;Object-oriented compatibility","","Links posted on social media such as Twitter;Answers to Stack Overflow questions;Personal mentoring","Theory first, to get a rigorous foundation","In-person: In-depth trainings (2 or 3 days);In-person: Shorter workshops focused on a specific topic (1 day);Books or longer articles explaining full context;Reference works or documentation with API listings or short tutorials;Recorded talks from a conference or user group","More material with in-depth tutorials;More material with short ""cookbook"" style information;More material with real-world examples and war stories;More short ""live coding"" videos;More podcasts and other audio-only material;More interactive tutorials (e.g. like the F# Koans)","","Commercial products;Not applicable. None of my F# code is used by other people","Utilities and tools","SQL databases;NoSQL database;Textual & flat file data;Event store/logs/Kafka","Windows;Linux","I don't use F# at work","Domain modelling: making illegal states unrepresentable;Correctness: fewer bugs and less rework;More productive with fewer developers;Faster time to market;Efficiency/Performance;Easy concurrency with async and agents;Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages;Fad: They have concerns over long term language viability;No buy-in: There is lack of acceptance from other teams","","Lack of good tutorials/documentation;Not enough real-world code to learn from","Working with C#-centric tooling;Less sophisticated tools for refactoring, etc.","","",""